<Shapes xmlns="http://www.evolus.vn/Namespace/Pencil" id="dgthanhan.GenericWireframe" displayName="Generic Wireframe" author="Dương Thành An" description="Shapes for creating generic wireframe" url="https://github.com/dgthanhan/stencils/tree/master/GenericWireframe">
  <Script comments="Built-in util script"><![CDATA[
collection.BOUND_CALCULATOR = {
    L: function (box, v) { return (box.x || 0) + v;},
    T: function (box, v) { return (box.y || 0) + v;},
    R: function (box, v) { return (box.x || 0) + box.w - v;},
    B: function (box, v) { return (box.y || 0) + box.h - v;},
    C: function (box, v) { return (box.x || 0) + box.w / 2 + v;},
    M: function (box, v) { return (box.y || 0) + box.h / 2 + v;},
    H0X: function (box, v, h0, h1) {
        return h0.x + v;
    },
    H0Y: function (box, v, h0, h1) {
        return h0.y + v;
    },
    H1X: function (box, v, h0, h1) {
        return h1.x + v;
    },
    H1Y: function (box, v, h0, h1) {
        return h1.y + v;
    },

    calculate: function (box, spec, h0, h1) {
        spec.match(/^([A-Z0-9]*[A-Z])([0-9-]+)$/)
        return collection.BOUND_CALCULATOR[RegExp.$1](box, parseInt(RegExp.$2, 10), h0, h1);
    }
};
collection.toBounds = function (box, textBounds, h0, h1) {
    var literal = textBounds.value || textBounds.toString();
    var parts = literal.split(",");
    var x = collection.BOUND_CALCULATOR.calculate(box, parts[0], h0, h1);
    var y = collection.BOUND_CALCULATOR.calculate(box, parts[1], h0, h1);
    var w = collection.BOUND_CALCULATOR.calculate(box, parts[2], h0, h1) - x;
    var h = collection.BOUND_CALCULATOR.calculate(box, parts[3], h0, h1) - y;

    return new Bound(x, y, w, h);
};
collection.calculateBoundsFromPolicy = function (box, originalInfo, policy) {
    var hLayout = Group.calculateLayout(originalInfo.x0, originalInfo.w0, originalInfo.gw0, policy.xPolicy, policy.wPolicy, box.w, originalInfo.w0);
    var vLayout = Group.calculateLayout(originalInfo.y0, originalInfo.h0, originalInfo.gh0, policy.yPolicy, policy.hPolicy, box.h, originalInfo.h0);

    return new Bound(Math.round(hLayout.pos), Math.round(vLayout.pos), Math.round(hLayout.size), Math.round(vLayout.size));
};
collection.copyClipboardImage = function (target, imageDataPropName, boxPropName) {
    try {
        var image = clipboard.readImage();
        if (image) {
            var id = Pencil.controller.nativeImageToRefSync(image);

            var size = image.getSize();
            var newImageData = new ImageData(size.width, size.height, ImageData.idToRefString(id));
            target.setProperty(imageDataPropName, newImageData);
            if (boxPropName) target.setProperty(boxPropName, new Dimension(size.width, size.height));
        }
    } catch (e) {
        console.error(e);
    }
};

collection.buildNPatchModel = function (cells, originalSize, newSize) {
    var totalScaleSize = 0;
    for (var cell of cells) totalScaleSize += (cell.to - cell.from);

    var r = (newSize - (originalSize - totalScaleSize)) / totalScaleSize;

    var models = [];
    var total = 0;
    var scaledTotal = 0;
    var last = false;

    //add a sentinel
    cells = cells.concat([{from: originalSize, to: originalSize + 1}]);

    for (var i = 0; i < cells.length; i ++) {
        var cell = cells[i];
        if (cell.from == cell.to) continue;

        var last = (i == cell.length - 2);

        var model = null;
        if (cell.from > total) {
            model = {
                start: total,
                size: cell.from - total,
                scaledStart: scaledTotal,
                scale: false
            };

            models.push(model);
            total = cell.from;
            scaledTotal += model.size;
        }

        if (cell.from >= originalSize) break;

        var scaledSize = (last ? (newSize - (originalSize - cell.to) - scaledTotal) : (r * (cell.to - cell.from)));

        model = {
            start: total,
            size: cell.to - cell.from,
            scaledStart: scaledTotal,
            scaledSize: scaledSize,
            scale: true
        };

        model.r = model.scaledSize / model.size;

        models.push(model);
        total = cell.to;
        scaledTotal += model.scaledSize;
    }

    return models;
};

collection.parsePathData = function (pathDataLiteral) {
    function normalize(pin) {
        pin.x = Math.round(pin.x);
        if (typeof(pin.y) == "number") pin.y = Math.round(pin.y);
    }
    function normalizeAll(pins) {
        for (var pin of pins) normalize(pin);
    }

    function processMultiPoints(points, current, chunk, relative) {
        var count = Math.ceil(points.length / chunk);
        for (var i = 0; i < count; i ++) {
            var pin = points[i * chunk + (chunk - 1)];

            for (var j = 0; j < (chunk - 1); j ++) {
                var p = points[i * chunk + j];
                if (relative) {
                    p.x += current.x;
                    p.y += current.y;
                }

                p.fixed = true;
            }

            normalize(pin);

            if (relative) {
                pin.x += current.x;
                pin.y += current.y;
            }
            current = pin;
        }

        return current;
    }

    //parse the original data
    var RE = /([A-Z])([^A-Z]*)/gi;
    var commands = [];
    var result = null;
    var current = {x: 0, y: 0};
    while ((result = RE.exec(pathDataLiteral))) {
        var c = result[1];
        var command = {
            command: c.toUpperCase()
        };
        var data = result[2].trim();
        if (data) {
            var DATA_RE = /(-?[0-9.]+)(,(-?[0-9.]+))?/g;
            var points = [];
            var result2 = null;
            while ((result2 = DATA_RE.exec(data))) {
                var x = parseFloat(result2[1]);
                var y = result2[3];
                if (y) y = parseFloat(y);
                points.push({
                    x: x,
                    y: y
                });
            }

            if (c == "M" || c == "L" || c == "T") {
                normalizeAll(points);
                command.points = points;
                current = points[points.length - 1];
            } else if (c == "m" || c == "l" || c == "t") {
                for (var p of points) {
                    p.x += current.x;
                    p.y += current.y;

                    current = p;
                }
                normalizeAll(points);
                command.points = points;
            } else if (c == "H") {
                for (var p of points) {
                    console.log("HX:", p.x);
                    p.y = current.y;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "h") {
                for (var p of points) {
                    p.x += current.x;
                    p.y = current.y;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "V") {
                for (var p of points) {
                    p.y = p.x;
                    p.x = current.x;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "v") {
                for (var p of points) {
                    p.y = p.x + current.y;
                    p.x = current.x;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "c" || c == "C") {
                current = processMultiPoints(points, current, 3, c == "c");
                command.points = points;
            } else if (c == "s" || c == "S") {
                current = processMultiPoints(points, current, 2, c == "s");

                command.points = points;
            } else if (c == "q" || c == "Q") {
                current = processMultiPoints(points, current, 2, c == "q");
                command.points = points;
            } else if ((c == "a" || c == "A") && points.length == 5) {
                for (var p of points) {
                    p.fixed = true;
                    p.noRelativeRecalcuate = true;
                    console.log("p.y", p.y);
                }
                var pin = points[4];
                pin.fixed = false;
                pin.noRelativeRecalcuate = false;
                if (c == "a") {
                    pin.x += current.y;
                    pin.y += current.y;
                }
                current = pin;

                normalizeAll(points);
                command.points = points;
                command.command = "A";
            }
        }

        commands.push(command);
    }

    return commands;

};

collection.calculateScaledPosition = function (value, models) {
    if (!models || models.length == 0) return value;
    var m = null;

    if (value < models[0].start) {
        m = models[0];
    } else {
        for (var model of models) {
            if (model.start <= value && value < (model.start + model.size)) {
                m = model;
                break;
            }
        }

        if (!m) m = models[models.length - 1];
    }

    if (m) {
        var d = value - m.start;

        if (m.scale) d *= m.r;

        return d + m.scaledStart;
    }

    return value;
};


collection.scalePathData = function (pathCommands, xCells, yCells, originalSize, newSize) {
    xCells = xCells || [];
    yCells = yCells || [];

    var xModel = collection.buildNPatchModel(xCells, originalSize.w, newSize.w);
    var yModel = collection.buildNPatchModel(yCells, originalSize.h, newSize.h);

    var newData = "";

    for (var command of pathCommands) {
        if (command.points) {
            var last = -1;
            for (var i = 0; i < command.points.length; i ++) {
                var pin = command.points[i];
                if (pin.fixed) {
                    continue;
                }

                var x = collection.calculateScaledPosition(pin.x, xModel);
                var y = collection.calculateScaledPosition(pin.y, yModel);

                for (var j = last + 1; j < i; j ++) {
                    if (command.points[j].noRelativeRecalcuate) continue;
                    command.points[j].x = x + command.points[j].x - pin.x;
                    if (typeof(command.points[j].y) == "number") command.points[j].y = y + command.points[j].y - pin.y;
                }

                pin.x = x;
                pin.y = y;
                last = i;
            }
        }

        if (newData) newData += " ";
        newData += command.command;
        if (command.points) {
            for (var i = 0; i < command.points.length; i ++) {
                var y = command.points[i].y;
                newData += (i > 0 ? " " : "") + command.points[i].x + (typeof(y) == "number" ? ("," + y) : "");
            }
        }
    }

    return newData;
};
collection.generatePathDOM = function (svgPathData, size, keepPathStyle) {
    var specs = [];
    var json = svgPathData.data;
    if (!json.startsWith("json:")) return specs;
    var parsedPathData = JSON.parse(json.substring(5));

    for (var info of parsedPathData) {
        var d = collection.scalePathData(info.commands, svgPathData.xCells, svgPathData.yCells, svgPathData, size);
        specs.push({
            _name: "path",
            _uri: PencilNamespaces.svg,
            d: d,
            style: keepPathStyle ? info.style : ""
        });
    }

    return Dom.newDOMFragment(specs);
};
collection.generateAdvancedRectPathData = function (box, strokeStyle, r, withTop, withRight, withBottom, withLeft, withTopLeftCorner, withTopRightCorner, withBottomRightCorner, withBottomLeftCorner) {
    var x = r * 4 * (Math.sqrt(2) - 1) / 3;
    var w = box.w - strokeStyle.w * ((withLeft ? 0.5 : 0) + (withRight ? 0.5 : 0));
    var h = box.h - strokeStyle.w * ((withTop ? 0.5 : 0) + (withBottom ? 0.5 : 0));
    var parts = [
    ];
    var close = true;
    if (withTop) {
        parts.push(L(w - (withRight && withTopRightCorner ? r : 0),0));
        if (withRight && withTopRightCorner && r > 0) parts.push(c(x,0,r,r-x,r,r));
    } else {
        parts.push(M(w,0));
        close = false;
    }

    if (withRight) {
        parts.push(L(w,h - (withBottom && withBottomRightCorner ? r : 0)));
        if (withBottom && withBottomRightCorner && r > 0) parts.push(c(0,x,x-r,r,0-r,r));
    } else {
        parts.push(M(w,h));
        close = false;
    }

    if (withBottom) {
        parts.push(L(withLeft && withBottomLeftCorner ? r : 0,h));
        if (withLeft && withBottomLeftCorner && r > 0) parts.push(c(x-r,0,0-r,x-r,0-r,0-r));
    } else {
        parts.push(M(0,h));
        close = false;
    }

    if (withLeft) {
        parts.push(L(0,withTop && withTopLeftCorner ? r : 0));
        if (withTop && withTopLeftCorner && r > 0) parts.push(c(0,0-x,r-x,0-r,r,0-r));
    } else {
        parts.push(M(0,0));
        close = false;
    }

    if (close) parts.push(z);

    var firstMove = -1;
    for (var i = 0; i < parts.length; i ++) {
        if (parts[i].indexOf("M") == 0) {
            firstMove = i;
            break;
        }
    }

    if (firstMove > 0) {
        while (firstMove > 0) {
            parts.push(parts.shift());
            firstMove --;
        }
    } else {
        parts.unshift(M(withLeft ? r : 0,0));
    }

    return parts;
};
collection.toColorizedDOMNode = function (svgXML, color) {
    if (!svgXML) return document.createDocumentFragment();

    var svg = Dom.parseDocument(svgXML);

    if (color) {
        var c = color.toRGBAString();
        Dom.workOn("//svg:*", svg, function (node) {
            if (node.style.fill != "none") {
                node.style.fill = c;
            }
            if (node.style.stroke && node.style.stroke != "none") {
                node.style.stroke = c;
            }

            var a = node.getAttribute("fill");
            if (a != "none") node.setAttribute("fill", c);

            a = node.getAttribute("stroke");
            if (a && a != "none") node.setAttribute("stroke", c);
        });
    }

    var g = svg.createElementNS(PencilNamespaces.svg, "g");
    while (svg.documentElement.firstChild) {
        var child = svg.documentElement.firstChild;
        svg.documentElement.removeChild(child);
        g.appendChild(child);
    }

    return g;
};
]]></Script>
  <Script comments="Resource script"><![CDATA[
collection.RESOURCE_LIST = [{"name":"scalable","prefix":"resources/scalable"}];

collection.browseResource = function (setNames, type, returnType, callback) {
    var options = {
        prefixes: [],
        type: type || CollectionResourceBrowserDialog.TYPE_BITMAP,
        returnType: returnType || CollectionResourceBrowserDialog.RETURN_IMAGEDATA
    };

    setNames = (setNames || "").trim();

    for (var resource of collection.RESOURCE_LIST) {
        if ((!resource.type || resource.type == options.type) && (!setNames || setNames.indexOf(resource.name) >= 0)) {
            options.prefixes.push(resource);
        }
    }

    CollectionResourceBrowserDialog.open(collection, options, callback);
};

]]></Script>
  <Properties>
    <PropertyGroup name="Collection Properties">
      <Property name="editableAreaColor" displayName="Editable Area Color" type="Color">#FFFFFFFF</Property>
      <Property name="themeColor" displayName="Primary Color" type="Color">#3D80CCFF</Property>
      <Property name="controlFaceColor" displayName="Default Control Color" type="Color">#EDEDEDFF</Property>
      <Property name="defaultTextFont" displayName="Default Text Font" type="Font">Arial|normal|normal|15px|none</Property>
      <Property name="lineStyle" displayName="Default Line Style" type="StrokeStyle">2|</Property>
    </PropertyGroup>
  </Properties>
  <Shape id="label" displayName="Label" icon="icons/label.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,20</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor.hollowed(1)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle.condensed(-1)</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:20,&quot;w0&quot;:200,&quot;h0&quot;:20,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Lorem ipsum</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0IconSide" displayName="Text icon side" type="Enum" p:enumValues="['leading|Leading', 'trailing|Trailing']">leading</Property>
        <Property name="text0IconColor" displayName="Icon Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":20,"w0":200,"h0":20,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":20,"w0":200,"h0":20,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":20,"w0":200,"h0":20,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $text0IconColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(237, 237, 237); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="200" height="20"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="textinput" displayName="Text Input" icon="icons/textinput.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">280,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:280,&quot;gh0&quot;:36,&quot;w0&quot;:264,&quot;h0&quot;:22,&quot;x0&quot;:7,&quot;y0&quot;:7}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Lorem ipsum</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Icon)" type="ImageData">17,19,data:image/svg+xml,&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Created with Inkscape (http://www.inkscape.org/) --&gt;

&lt;svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   version="1.1"
   id="svg4487"
   width="17"
   height="19"&gt;
  &lt;metadata
     id="metadata4493"&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=""&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;defs
     id="defs4491" /&gt;
  &lt;sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="640"
     inkscape:window-height="480"
     id="namedview4489" /&gt;
  &lt;inkscape:clipboard
     style="font-variant-east_asian:normal;opacity:1;vector-effect:none;fill:none;fill-opacity:0.35678394;stroke:none;stroke-width:4.99999986;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"
     min="146,790.00001"
     max="163,809.00001" /&gt;
  &lt;rect
     ry="1.45209"
     y="0"
     x="0"
     height="19"
     width="17"
     id="rect4485"
     style="opacity:1;fill:none;fill-opacity:0.35678394;stroke:none;stroke-width:5;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" /&gt;
&lt;/svg&gt;
</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":280,"gh0":36,"w0":280,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":280,"gh0":36,"w0":264,"h0":22,"x0":7,"y0":7}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":280,"gh0":36,"w0":16,"h0":16,"x0":255,"y0":10}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Icon">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="278" height="34"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="button" displayName="Button" icon="icons/button.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">100,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:100,&quot;gh0&quot;:36,&quot;w0&quot;:84,&quot;h0&quot;:20,&quot;x0&quot;:8,&quot;y0&quot;:8}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Button</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0IconSide" displayName="Text icon side" type="Enum" p:enumValues="['leading|Leading', 'trailing|Trailing']">leading</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":36,"w0":100,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.2 * ($textFont).getPixelHeight());
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":36,"w0":84,"h0":20,"x0":8,"y0":8}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.2 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":36,"w0":84,"h0":20,"x0":8,"y0":8}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="98" height="34"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="checkbox" displayName="Checkbox" icon="icons/checkbox.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,20</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:120,&quot;gh0&quot;:20,&quot;w0&quot;:92,&quot;h0&quot;:20,&quot;x0&quot;:28,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Checkbox</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property name="checked" displayName="Checked" type="Bool">true</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":20,"w0":20,"h0":20,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":20,"w0":92,"h0":20,"x0":28,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vector0">
        <Visibility>
          <Arg><![CDATA[$checked.value]]></Arg>
        </Visibility>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L3,M-6,L19,M6");
 var r = (b.w / 13 + b.h / 9) / 2; var style = $strokeStyle.condensed(1);
 return new StrokeStyle(style.w / r, style.array);}())]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L3,M-6,L19,M6");
var s = $strokeStyle.condensed(1); b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("13,9,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":5},{\"x\":4,\"y\":9},{\"x\":12,\"y\":0}]}],\"style\":\"fill:none;stroke:#000000;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L3,M-6,L19,M6");
var s = $strokeStyle.condensed(1); b.x += s.w / 2; b.y += s.w / 2; b.w -= s.w; b.h -= s.w;
return [translate(b.x, b.y), scale(b.w / 13, b.h / 9)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="18" height="18"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 3.782; fill: rgb(237, 237, 237); fill-opacity: 0;"/>
    </Content>
  </Shape>
  <Shape id="radio" displayName="Radio" icon="icons/radio.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,20</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:120,&quot;gh0&quot;:20,&quot;w0&quot;:92,&quot;h0&quot;:20,&quot;x0&quot;:28,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Radio</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property name="checked" displayName="Checked" type="Bool">true</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":20,"w0":20,"h0":20,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("10,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":20,"w0":92,"h0":20,"x0":28,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":20,"w0":10,"h0":10,"x0":5,"y0":5}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$checked.value]]></Arg>
        </Visibility>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("4.999999999999999,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="10" ry="10" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="18" height="18"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle1" rx="4.999999999999999" ry="4.999999999999999" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="10" height="10"/>
    </Content>
  </Shape>
  <Shape id="comboentry" displayName="Combo Entry" icon="icons/comboentry.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">280,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:280,&quot;gh0&quot;:36,&quot;w0&quot;:227,&quot;h0&quot;:22,&quot;x0&quot;:7,&quot;y0&quot;:7}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Combo Entry</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector1">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":280,"gh0":36,"w0":242,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("200,36,16-186,12-29,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":200,\"y\":36}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":36}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":200,\"y\":0}]}],\"style\":\"opacity:1;fill:none;fill-opacity:0.35678394;stroke:#000000;stroke-width:0;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":280,"gh0":36,"w0":242,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":280,"gh0":36,"w0":227,"h0":22,"x0":7,"y0":7}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":280,"gh0":36,"w0":39,"h0":36,"x0":241,"y0":0}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vector0">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":280,"gh0":36,"w0":14.2251264,"h0":9.3222784,"x0":253,"y0":14}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"});
 var r = (b.w / 18 + b.h / 11) / 2; var style = StrokeStyle.fromString("0|");
 return new StrokeStyle(style.w / r, style.array);}())]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":280,"gh0":36,"w0":14.2251264,"h0":9.3222784,"x0":253,"y0":14}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"});
var s = StrokeStyle.fromString("0|"); b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("18,11,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":9,\"y\":11},{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":18,\"y\":0}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.35678394;stroke:none;stroke-width:2.44600081;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":280,"gh0":36,"w0":14.2251264,"h0":9.3222784,"x0":253,"y0":14}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"});
var s = StrokeStyle.fromString("0|"); b.x += s.w / 2; b.y += s.w / 2; b.w -= s.w; b.h -= s.w;
return [translate(b.x, b.y), scale(b.w / 18, b.h / 11)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector1" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(255, 255, 255); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle1" rx="0" ry="0" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="37" height="34"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0; fill: rgb(51, 102, 255); fill-opacity: 1;"/>
    </Content>
  </Shape>
  <Shape id="spinner" displayName="Spinner" icon="icons/spinner.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">71,36</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:71,&quot;gh0&quot;:36,&quot;w0&quot;:37,&quot;h0&quot;:22,&quot;x0&quot;:8,&quot;y0&quot;:7}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">50</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="valueState" displayName="Value State" type="Enum" p:enumValues="['min|Minimum', 'normal|Normal', 'max|Maximum']">normal</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect2">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value || $valueState.value == 'min' ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = new Bound($box.w - 20, Math.round($box.h / 2 + $strokeStyle.w / 2), 20, $box.h - Math.round($box.h / 2 + $strokeStyle.w / 2));
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, false, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = new Bound($box.w - 20, Math.round($box.h / 2 + $strokeStyle.w / 2), 20, $box.h - Math.round($box.h / 2 + $strokeStyle.w / 2));
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((false) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value || $valueState.value == 'max' ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = new Bound($box.w - 20, 0, 20, Math.round($box.h / 2 + $strokeStyle.w / 2));
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = new Bound($box.w - 20, 0, 20, Math.round($box.h / 2 + $strokeStyle.w / 2));
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":71,"gh0":36,"w0":51,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, false, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":71,"gh0":36,"w0":51,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":71,"gh0":36,"w0":37,"h0":22,"x0":8,"y0":7}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vector0">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value || $valueState.value == 'min' ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":71,"gh0":36,"w0":9,"h0":5,"x0":56,"y0":24}, {"xPolicy":"end","yPolicy":"end","wPolicy":"fixed","hPolicy":"fixed"});
 var r = (b.w / 18 + b.h / 11) / 2; var style = StrokeStyle.fromString("0|");
 return new StrokeStyle(style.w / r, style.array);}())]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":71,"gh0":36,"w0":9,"h0":5,"x0":56,"y0":24}, {"xPolicy":"end","yPolicy":"end","wPolicy":"fixed","hPolicy":"fixed"});
var s = StrokeStyle.fromString("0|"); b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("18,11,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":9,\"y\":11},{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":18,\"y\":0}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.35678394;stroke:none;stroke-width:2.44600081;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":71,"gh0":36,"w0":9,"h0":5,"x0":56,"y0":24}, {"xPolicy":"end","yPolicy":"end","wPolicy":"fixed","hPolicy":"fixed"});
var s = StrokeStyle.fromString("0|"); b.x += s.w / 2; b.y += s.w / 2; b.w -= s.w; b.h -= s.w;
return [translate(b.x, b.y), scale(b.w / 18, b.h / 11)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vector3">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value || $valueState.value == 'max' ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":71,"gh0":36,"w0":9,"h0":5,"x0":56,"y0":6}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
 var r = (b.w / 68 + b.h / 42) / 2; var style = StrokeStyle.fromString("0|");
 return new StrokeStyle(style.w / r, style.array);}())]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":71,"gh0":36,"w0":9,"h0":5,"x0":56,"y0":6}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
var s = StrokeStyle.fromString("0|"); b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("68,42,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":34,\"y\":0},{\"x\":0,\"y\":42}]},{\"command\":\"L\",\"points\":[{\"x\":68,\"y\":42}]},{\"command\":\"Z\"}],\"style\":\"fill:none;stroke:#000000;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":71,"gh0":36,"w0":9,"h0":5,"x0":56,"y0":6}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
var s = StrokeStyle.fromString("0|"); b.x += s.w / 2; b.y += s.w / 2; b.w -= s.w; b.h -= s.w;
return [translate(b.x, b.y), scale(b.w / 68, b.h / 42)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect2" d="M 0 0 M 18.115098112000002 0 L 18.115098112000002 16.2891136 L 0 16.2891136 L 0 0" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 0 0 L 18 0 L 18 17 L 0 17 L 0 0 z" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 50 34 L 0 34 L 0 0 L 50 0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0; fill: rgb(51, 102, 255); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector3" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0; fill: rgb(51, 102, 255); fill-opacity: 1;"/>
    </Content>
  </Shape>
  <Shape id="toggleoff" displayName="Toggle Off" icon="icons/toggleoff.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">55,24</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.resized(-0.1333333333333333)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:55,&quot;gh0&quot;:24,&quot;w0&quot;:32,&quot;h0&quot;:24,&quot;x0&quot;:19,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">OFF</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":55,"gh0":24,"w0":55,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("11,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":55,"gh0":24,"w0":32,"h0":24,"x0":19,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":55,"gh0":24,"w0":16,"h0":16,"x0":4,"y0":4}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("8,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="11" ry="11" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="53" height="22"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle1" rx="8" ry="8" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="16" height="16"/>
    </Content>
  </Shape>
  <Shape id="toggleon" displayName="Toggle On" icon="icons/toggleon.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">55,24</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$themeColor.shaded(-0.25).hollowed(0.7098039215686274)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor.shaded(0.2875)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.resized(-0.1333333333333333)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:55,&quot;gh0&quot;:24,&quot;w0&quot;:32,&quot;h0&quot;:24,&quot;x0&quot;:4,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">ON</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":55,"gh0":24,"w0":55,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("11,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":55,"gh0":24,"w0":32,"h0":24,"x0":4,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":55,"gh0":24,"w0":16,"h0":16,"x0":35,"y0":4}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("8,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="11" ry="11" style="fill: rgb(77, 160, 255); fill-opacity: 0.290196; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="53" height="22"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle1" rx="8" ry="8" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="16" height="16"/>
    </Content>
  </Shape>
  <Shape id="commandinput" displayName="Command Input" icon="icons/commandinput.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,36</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="handle0" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true">118,0</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.toBounds($box, &quot;L7,T7,H0X-7,B7&quot;, $handle0),font: $textFont,align: $textAlignment,richText: true})">50</Property>
        <Property name="textAlignment2" displayName="Other Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor2" displayName="Other Text Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="textFont2" displayName="Other Text Font" type="Font">
          <E>$$defaultTextFont.bold(true)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: new Bound($handle0.x + Math.round($box.h / 2), 0, Math.round($box.w - $handle0.x - $box.h), $box.h),font: $textFont2,align: $textAlignment2,richText: true})">Search</Property>
        <Property name="text1ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "H0X0,T0,R0,B0", $handle0);
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, false, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.toBounds($box, "H0X0,T0,R0,B0", $handle0);
return [translate(((false) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L0,T0,H0X0,B0", $handle0);
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, false, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.toBounds($box, "L0,T0,H0X0,B0", $handle0);
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.toBounds($box, "L7,T7,H0X-7,B7", $handle0)]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text1text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont2]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text1ImageData).w > 0) {
                                //depends $text1, $textFont2
                                var iconGap = Math.round(0.4 * ($textFont2).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont2).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment2;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(new Bound($handle0.x + Math.round($box.h / 2), 0, Math.round($box.w - $handle0.x - $box.h), $box.h)))]]></Arg>
          <Arg><![CDATA[$textAlignment2]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text1Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text1ImageData).w > 0) {
                                //depends $text1, $textFont2
                                var iconGap = Math.round(0.4 * ($textFont2).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont2).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment2;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text1text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text1text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text1text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text1text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(new Bound($handle0.x + Math.round($box.h / 2), 0, Math.round($box.w - $handle0.x - $box.h), $box.h))));

var imageData = ($text1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.3 : 1]]></Arg>
        </CustomStyle>
      </For>
      <For ref="text1IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text1ImageData).getDataAsXML(), $textColor2)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text1Browse" displayName="Select Resource Images for Command Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text1ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text1Remove" displayName="Remove Command Icon...">
        <Impl><![CDATA[this.setProperty("text1ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 L 79.99336704 0 L 79.99336704 34 L 0 34" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 118 34 L 0 34 L 0 0 L 118 0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text1Icon">
        <g id="text1IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text1text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="panel" displayName="Panel" icon="icons/panel.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">400,250</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":400,"gh0":250,"w0":400,"h0":250,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":400,"gh0":250,"w0":400,"h0":250,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T20"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B20"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="398" height="248"/>
    </Content>
  </Shape>
  <Shape id="windowframe" displayName="Window Frame" icon="icons/windowframe.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">594,494</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:594,&quot;gh0&quot;:494,&quot;w0&quot;:487,&quot;h0&quot;:26,&quot;x0&quot;:11,&quot;y0&quot;:9}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: $textAlignment,richText: true})">Window Frame</Property>
        <Property name="withMinimize" displayName="With Minimize" type="Bool">true</Property>
        <Property name="withMaxmimize" displayName="With Maximize" type="Bool">true</Property>
        <Property name="withClose" displayName="With Close" type="Bool">true</Property>
        <Property name="withShadow" displayName="With Shadow" type="Bool">true</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":594,"h0":494,"x0":4,"y0":4}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$withShadow]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[Color.fromString("#0000001C")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#4388CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":594,"h0":494,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":590,"h0":40,"x0":2,"y0":2}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#4388CC1F")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#4388CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":487,"h0":26,"x0":11,"y0":9}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vector0">
        <Visibility>
          <Arg><![CDATA[$withClose]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":15,"h0":15,"x0":565.9825439453125,"y0":15.112846374511719}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
 var r = (b.w / 15 + b.h / 15) / 2; var style = $strokeStyle;
 return new StrokeStyle(style.w / r, style.array);}())]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":15,"h0":15,"x0":565.9825439453125,"y0":15.112846374511719}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("15,15,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":15},{\"x\":15,\"y\":0}]},{\"command\":\"M\",\"points\":[{\"x\":1,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":15,\"y\":15}]}],\"style\":\"fill:none;stroke:#000000;stroke-width:0.99999994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":15,"h0":15,"x0":565.9825439453125,"y0":15.112846374511719}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2; b.w -= s.w; b.h -= s.w;
return [translate(b.x, b.y), scale(b.w / 15, b.h / 15)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vector1">
        <Visibility>
          <Arg><![CDATA[$withMinimize]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":15,"h0":3,"x0":507,"y0":27}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
 var r = (b.w / 15 + b.h / 1) / 2; var style = $strokeStyle;
 return new StrokeStyle(style.w / r, style.array);}())]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":15,"h0":3,"x0":507,"y0":27}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("15,1,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":15,\"y\":0}]}],\"style\":\"fill:none;stroke:#000000;stroke-width:0.99380797px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":15,"h0":3,"x0":507,"y0":27}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2; b.w -= s.w; b.h -= s.w;
return [translate(b.x, b.y), scale(b.w / 15, b.h / 1)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":14,"h0":14,"x0":538,"y0":14.899497985839844}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Transform>
          <Arg><![CDATA[
                                        (function () {
                                            var b = collection.calculateBoundsFromPolicy($box, {"gw0":594,"gh0":494,"w0":14,"h0":14,"x0":538,"y0":14.899497985839844}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
                                            return ["rotate(6.361103296506196e-15 " + (b.x + 7) + " " + (b.y + 7) + ")"];
                                        }())
                                    ]]></Arg>
        </Transform>
        <Visibility>
          <Arg><![CDATA[$withMaxmimize]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":594,"gh0":494,"w0":594,"h0":494,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T62"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B20"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true),
new SnappingData("HCenter1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M21"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle3" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.109804; stroke: rgb(67, 136, 204); stroke-opacity: 1; stroke-width: 0;" width="594" height="494"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="592" height="492"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle1" rx="0" ry="0" style="fill: rgb(67, 136, 204); fill-opacity: 0.121569; stroke: rgb(67, 136, 204); stroke-opacity: 1; stroke-width: 0;" width="590" height="40"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2.30769; fill: rgb(255, 255, 255); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector1" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 1.39535; fill: rgb(255, 255, 255); fill-opacity: 1;"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle2" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="12" height="12"/>
    </Content>
  </Shape>
  <Shape id="progressoutside" displayName="Progress (outside)" icon="icons/progressoutside.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,8</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$controlFaceColor.shaded(1).hollowed(0.8588235294117648)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="handle0" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true">100,0</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.resized(-0.19999999999999996)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle1" displayName="handle1" type="Handle" p:minX="$handle0.x" p:maxX="$box.w" p:lockY="true">136,0</Property>
        <Property name="withBackgroundProgress" displayName="With Background Progress" type="Bool">true</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect2">
        <Visibility>
          <Arg><![CDATA[$withBackgroundProgress.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.h/2,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L0,T0,H1X0,B0", null, $handle1);
var s = StrokeStyle.fromString("0|");
var r = new Handle($box.h/2,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, $handle1.x >= $box.w - $box.h / 2, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.toBounds($box, "L0,T0,H1X0,B0", null, $handle1);
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.h/2,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":8,"w0":200,"h0":8,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = new Handle($box.h/2,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":8,"w0":200,"h0":8,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.h/2,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L0,T0,H0X0,B0", $handle0);
var s = StrokeStyle.fromString("0|");
var r = new Handle($box.h/2,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, $handle0.x >= $box.w - $box.h / 2, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.toBounds($box, "L0,T0,H0X0,B0", $handle0);
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[new RichText("" + Math.round(100 * $handle0.x / $box.w) + "%")]]></Arg>
          <Arg><![CDATA[collection.toBounds($box, "H0X-40,B-2,H0X40,B-40", $handle0)]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect2" d="M 5.44 0 L 130.56 0 c 3.004429039079517 0 5.44 2.4355709609204834 5.44 5.44 L 136 2.5599999999999996 c 0 3.004429039079517 -2.4355709609204834 5.44 -5.44 5.44 L 5.44 8 c -2.4355709609204834 0 -5.44 -2.4355709609204834 -5.44 -5.44 L 0 5.44 c 0 -3.004429039079517 2.4355709609204834 -5.44 5.44 -5.44 z" style="fill: rgb(0, 0, 0); fill-opacity: 0.141176; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 3 0 L 195 0 c 1.6568542494923806 0 3 1.3431457505076194 3 3 L 198 3 c 0 1.6568542494923806 -1.3431457505076194 3 -3 3 L 3 6 c -1.3431457505076194 0 -3 -1.3431457505076194 -3 -3 L 0 3 c 0 -1.6568542494923806 1.3431457505076194 -3 3 -3 z" style="fill: rgb(237, 237, 237); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 4 0 L 96 0 c 2.2091389993231743 0 4 1.7908610006768257 4 4 L 100 4 c 0 2.2091389993231743 -1.7908610006768257 4 -4 4 L 4 8 c -1.7908610006768257 0 -4 -1.7908610006768257 -4 -4 L 0 4 c 0 -2.2091389993231743 1.7908610006768257 -4 4 -4 z" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="progressinside" displayName="Progress (inside)" icon="icons/progressinside.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,14</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$controlFaceColor.shaded(1).hollowed(0.8588235294117648)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="handle0" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true">100,0</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle1" displayName="handle1" type="Handle" p:minX="$handle0.x" p:maxX="$box.w" p:lockY="true">136,0</Property>
        <Property name="withBackgroundProgress" displayName="With Background Progress" type="Bool">true</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">2,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.resized(-0.4)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.toBounds($box, &quot;L0,T0,H0X-5,B0&quot;, $handle0),font: $textFont,align: $textAlignment,richText: true})">UPLOADING</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect2">
        <Visibility>
          <Arg><![CDATA[$withBackgroundProgress.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.h/2,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L0,T0,H1X0,B0", null, $handle1);
var s = StrokeStyle.fromString("0|");
var r = new Handle($box.h/2,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, $handle1.x >= $box.w - $box.h / 2, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.toBounds($box, "L0,T0,H1X0,B0", null, $handle1);
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.h/2,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":14,"w0":200,"h0":14,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = new Handle($box.h/2,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":14,"w0":200,"h0":14,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.h/2,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L0,T0,H0X0,B0", $handle0);
var s = StrokeStyle.fromString("0|");
var r = new Handle($box.h/2,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, $handle0.x >= $box.w - $box.h / 2, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.toBounds($box, "L0,T0,H0X0,B0", $handle0);
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.toBounds($box, "L0,T0,H0X-5,B0", $handle0)]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect2" d="M 5.44 0 L 130.56 0 c 3.004429039079517 0 5.44 2.4355709609204834 5.44 5.44 L 136 8.559999999999999 c 0 3.004429039079517 -2.4355709609204834 5.44 -5.44 5.44 L 5.44 14 c -2.4355709609204834 0 -5.44 -2.4355709609204834 -5.44 -5.44 L 0 5.44 c 0 -3.004429039079517 2.4355709609204834 -5.44 5.44 -5.44 z" style="fill: rgb(0, 0, 0); fill-opacity: 0.141176; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 3 0 L 195 0 c 1.6568542494923806 0 3 1.3431457505076194 3 3 L 198 9 c 0 1.6568542494923806 -1.3431457505076194 3 -3 3 L 3 12 c -1.3431457505076194 0 -3 -1.3431457505076194 -3 -3 L 0 3 c 0 -1.6568542494923806 1.3431457505076194 -3 3 -3 z" style="fill: rgb(237, 237, 237); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 4 0 L 96 0 c 2.2091389993231743 0 4 1.7908610006768257 4 4 L 100 10 c 0 2.2091389993231743 -1.7908610006768257 4 -4 4 L 4 14 c -1.7908610006768257 0 -4 -1.7908610006768257 -4 -4 L 0 4 c 0 -2.2091389993231743 1.7908610006768257 -4 4 -4 z" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="progressundetermined" displayName="Progress (undetermined)" icon="icons/progressundetermined.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,8</Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="handle0" type="Handle" p:minX="0" p:maxX="$handle1.x-5" p:lockY="true">50,0</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle1" displayName="handle1" type="Handle" p:minX="$handle0.x + 5" p:maxX="$box.w" p:lockY="true">136,0</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.h/2,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":8,"w0":200,"h0":8,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = new Handle($box.h/2,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":8,"w0":200,"h0":8,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.h/2,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "H0X0,T0,H1X0,B0", $handle0, $handle1);
var s = StrokeStyle.fromString("0|");
var r = new Handle($box.h/2,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.toBounds($box, "H0X0,T0,H1X0,B0", $handle0, $handle1);
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 3 0 L 195 0 c 1.6568542494923806 0 3 1.3431457505076194 3 3 L 198 3 c 0 1.6568542494923806 -1.3431457505076194 3 -3 3 L 3 6 c -1.3431457505076194 0 -3 -1.3431457505076194 -3 -3 L 0 3 c 0 -1.6568542494923806 1.3431457505076194 -3 3 -3 z" style="fill: rgb(237, 237, 237); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 3.44 0 L 82.56 0 c 1.8998595394179298 0 3.44 1.54014046058207 3.44 3.44 L 86 4.5600000000000005 c 0 1.8998595394179298 -1.54014046058207 3.44 -3.44 3.44 L 3.44 8 c -1.54014046058207 0 -3.44 -1.54014046058207 -3.44 -3.44 L 0 3.44 c 0 -1.8998595394179298 1.54014046058207 -3.44 3.44 -3.44 z" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
    </Content>
  </Shape>
  <Shape id="toolbarbutton" displayName="Toolbar Button" icon="icons/toolbarbutton.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">36,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:36,&quot;gh0&quot;:36,&quot;w0&quot;:20,&quot;h0&quot;:20,&quot;x0&quot;:8,&quot;y0&quot;:8}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">A</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0IconSide" displayName="Text icon side" type="Enum" p:enumValues="['leading|Leading', 'trailing|Trailing']">leading</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="position" displayName="Button Position" type="Enum" p:enumValues="['first|First', 'middle|Middle', 'last|Last']">first</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($position.value == 'middle' ? 0 : 5,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":36,"gh0":36,"w0":36,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = new Handle($position.value == 'middle' ? 0 : 5,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, $position.value == 'first', true, $position.value != 'first', $position.value != 'first', true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":36,"gh0":36,"w0":36,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate((($position.value == 'first') ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.2 * ($textFont).getPixelHeight());
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":36,"gh0":36,"w0":20,"h0":20,"x0":8,"y0":8}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.2 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":36,"gh0":36,"w0":20,"h0":20,"x0":8,"y0":8}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":36,"gh0":36,"w0":36,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "R0"), "Left", true, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 4 0 L 30 0 c 2.2091389993231743 0 4 1.7908610006768257 4 4 L 34 30 c 0 2.2091389993231743 -1.7908610006768257 4 -4 4 L 4 34 c -1.7908610006768257 0 -4 -1.7908610006768257 -4 -4 L 0 4 c 0 -2.2091389993231743 1.7908610006768257 -4 4 -4 z" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="scaleround" displayName="Scale (round)" icon="icons/scaleround.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,8</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$themeColor.shaded(-0.25)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="handle0" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true">50,4</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.h/2,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":8,"w0":200,"h0":8,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = new Handle($box.h/2,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":8,"w0":200,"h0":8,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.toBounds($box, "H0X-8,T-4,H0X8,B-4", $handle0)).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("8,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 3 0 L 195 0 c 1.6568542494923806 0 3 1.3431457505076194 3 3 L 198 3 c 0 1.6568542494923806 -1.3431457505076194 3 -3 3 L 3 6 c -1.3431457505076194 0 -3 -1.3431457505076194 -3 -3 L 0 3 c 0 -1.6568542494923806 1.3431457505076194 -3 3 -3 z" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="8" ry="8" style="fill: rgb(77, 160, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="14" height="14"/>
    </Content>
  </Shape>
  <Shape id="scalediamond" displayName="Scale (diamond)" icon="icons/scalediamond.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,8</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$themeColor.shaded(-0.25)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="handle0" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true">49,4</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.h/2,0)).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":8,"w0":200,"h0":8,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = new Handle($box.h/2,0);
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":8,"w0":200,"h0":8,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vector0">
        <Visibility>
          <Arg><![CDATA[opacity=$disabled.value ? 0.4 : 1]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "H0X-5,T-4,H0X5,B-5", $handle0);
 var r = (b.w / 12 + b.h / 16) / 2; var style = $strokeStyle;
 return new StrokeStyle(style.w / r, style.array);}())]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "H0X-5,T-4,H0X5,B-5", $handle0);
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("12,16,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":12,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":12,\"y\":12}]},{\"command\":\"L\",\"points\":[{\"x\":6,\"y\":16},{\"x\":0,\"y\":12}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:none;stroke-width:0.99999994;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "H0X-5,T-4,H0X5,B-5", $handle0);
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2; b.w -= s.w; b.h -= s.w;
return [translate(b.x, b.y), scale(b.w / 12, b.h / 16)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 3 0 L 195 0 c 1.6568542494923806 0 3 1.3431457505076194 3 3 L 198 3 c 0 1.6568542494923806 -1.3431457505076194 3 -3 3 L 3 6 c -1.3431457505076194 0 -3 -1.3431457505076194 -3 -3 L 0 3 c 0 -1.6568542494923806 1.3431457505076194 -3 3 -3 z" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2.34146; fill: rgb(77, 160, 255); fill-opacity: 1;"/>
    </Content>
  </Shape>
  <Shape id="avatarsquare" displayName="Avatar (Square)" icon="icons/avatarsquare.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">100,100</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor.hollowed(1)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":100,"w0":100,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":100,"w0":55,"h0":55,"x0":23,"y0":23}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
 var r = (b.w / 225 + b.h / 207) / 2; var style = $strokeStyle;
 return new StrokeStyle(style.w / r, style.array);}())]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":100,"w0":55,"h0":55,"x0":23,"y0":23}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("225,207,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":3,\"y\":205}]},{\"command\":\"C\",\"points\":[{\"x\":1.5417071,\"y\":201.19976,\"fixed\":true},{\"x\":5.7892914,\"y\":182.49578,\"fixed\":true},{\"x\":10,\"y\":174},{\"x\":16.8214431,\"y\":160.36074,\"fixed\":true},{\"x\":25.879874100000002,\"y\":152.68377,\"fixed\":true},{\"x\":40,\"y\":148},{\"x\":44.56669,\"y\":146.58461,\"fixed\":true},{\"x\":54.929059,\"y\":143.39159,\"fixed\":true},{\"x\":63,\"y\":141},{\"x\":79.160769,\"y\":136.0368,\"fixed\":true},{\"x\":82.765342,\"y\":134.2588,\"fixed\":true},{\"x\":84,\"y\":132},{\"x\":84.490696,\"y\":131.04317,\"fixed\":true},{\"x\":85.177511,\"y\":126.72317,\"fixed\":true},{\"x\":86,\"y\":122},{\"x\":86.621354,\"y\":114.29714,\"fixed\":true},{\"x\":86.571842,\"y\":114.06107,\"fixed\":true},{\"x\":84,\"y\":110},{\"x\":80.769638,\"y\":105.9214,\"fixed\":true},{\"x\":77.610595,\"y\":97.524313,\"fixed\":true},{\"x\":78,\"y\":94},{\"x\":78,\"y\":92.939351,\"fixed\":true},{\"x\":76.214136,\"y\":90.008176,\"fixed\":true},{\"x\":74,\"y\":87},{\"x\":69.564989,\"y\":81.875754,\"fixed\":true},{\"x\":67.968516,\"y\":74.622992,\"fixed\":true},{\"x\":68,\"y\":67},{\"x\":68,\"y\":63.30366,\"fixed\":true},{\"x\":68.597165,\"y\":61.548523,\"fixed\":true},{\"x\":71,\"y\":59},{\"x\":73.625373,\"y\":55.879887,\"fixed\":true},{\"x\":72.709934,\"y\":55.393424,\"fixed\":true},{\"x\":73,\"y\":43},{\"x\":73.03855,\"y\":31.22817,\"fixed\":true},{\"x\":73.229039,\"y\":30.010104,\"fixed\":true},{\"x\":76,\"y\":25},{\"x\":81.567396,\"y\":13.657486,\"fixed\":true},{\"x\":93.757884,\"y\":4.619539700000001,\"fixed\":true},{\"x\":107,\"y\":2},{\"x\":124.83911,\"y\":-1.25791501,\"fixed\":true},{\"x\":144.78001,\"y\":8.6597166,\"fixed\":true},{\"x\":153,\"y\":25},{\"x\":155.68747,\"y\":30.476308,\"fixed\":true},{\"x\":155.84319,\"y\":31.511445000000002,\"fixed\":true},{\"x\":156,\"y\":44},{\"x\":155.966,\"y\":56.785461,\"fixed\":true},{\"x\":154.98867,\"y\":56.91132,\"fixed\":true},{\"x\":158,\"y\":60},{\"x\":160.28721,\"y\":62.287219,\"fixed\":true},{\"x\":160.78411,\"y\":63.657865,\"fixed\":true},{\"x\":161,\"y\":68},{\"x\":161,\"y\":75.411389,\"fixed\":true},{\"x\":159.43388,\"y\":82.635502,\"fixed\":true},{\"x\":155,\"y\":88},{\"x\":152.81732,\"y\":90.52189,\"fixed\":true},{\"x\":151.03149,\"y\":93.401323,\"fixed\":true},{\"x\":151,\"y\":94},{\"x\":151,\"y\":97.281953,\"fixed\":true},{\"x\":148.50374,\"y\":104.479194,\"fixed\":true},{\"x\":145,\"y\":110}]},{\"command\":\"L\",\"points\":[{\"x\":142,\"y\":115},{\"x\":142,\"y\":123}]},{\"command\":\"C\",\"points\":[{\"x\":142.69755,\"y\":129.9194,\"fixed\":true},{\"x\":143.25427,\"y\":131.77205,\"fixed\":true},{\"x\":145,\"y\":133},{\"x\":146.97499,\"y\":134.59927,\"fixed\":true},{\"x\":156.65527,\"y\":138.05149,\"fixed\":true},{\"x\":187,\"y\":147},{\"x\":196.99202,\"y\":150.08012,\"fixed\":true},{\"x\":205.82213000000002,\"y\":155.34678,\"fixed\":true},{\"x\":210,\"y\":161},{\"x\":214.23073,\"y\":166.13256,\"fixed\":true},{\"x\":219.61697,\"y\":176.62982,\"fixed\":true},{\"x\":222,\"y\":183},{\"x\":223.9539,\"y\":190.01934,\"fixed\":true},{\"x\":225.09131,\"y\":203.40949,\"fixed\":true},{\"x\":225,\"y\":203}]},{\"command\":\"L\",\"points\":[{\"x\":3,\"y\":205}]},{\"command\":\"Z\"}],\"style\":\"fill:none;stroke:#000000;stroke-width:5;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":100,"w0":55,"h0":55,"x0":23,"y0":23}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2; b.w -= s.w; b.h -= s.w;
return [translate(b.x, b.y), scale(b.w / 225, b.h / 207)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":100,"gh0":100,"w0":100,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T22"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B20"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="98" height="98"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 8.13679; fill: rgb(255, 255, 255); fill-opacity: 0;"/>
    </Content>
  </Shape>
  <Shape id="avatarrounded" displayName="Avatar (Rounded)" icon="icons/avatarrounded.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">100,100</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor.hollowed(1)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":100,"w0":100,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle(Math.max($box.w/2, $box.h/2), 0)).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":100,"w0":55,"h0":55,"x0":23,"y0":23}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
 var r = (b.w / 225 + b.h / 207) / 2; var style = $strokeStyle;
 return new StrokeStyle(style.w / r, style.array);}())]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":100,"w0":55,"h0":55,"x0":23,"y0":23}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("225,207,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":3,\"y\":205}]},{\"command\":\"C\",\"points\":[{\"x\":1.5417071,\"y\":201.19976,\"fixed\":true},{\"x\":5.7892914,\"y\":182.49578,\"fixed\":true},{\"x\":10,\"y\":174},{\"x\":16.8214431,\"y\":160.36074,\"fixed\":true},{\"x\":25.879874100000002,\"y\":152.68377,\"fixed\":true},{\"x\":40,\"y\":148},{\"x\":44.56669,\"y\":146.58461,\"fixed\":true},{\"x\":54.929059,\"y\":143.39159,\"fixed\":true},{\"x\":63,\"y\":141},{\"x\":79.160769,\"y\":136.0368,\"fixed\":true},{\"x\":82.765342,\"y\":134.2588,\"fixed\":true},{\"x\":84,\"y\":132},{\"x\":84.490696,\"y\":131.04317,\"fixed\":true},{\"x\":85.177511,\"y\":126.72317,\"fixed\":true},{\"x\":86,\"y\":122},{\"x\":86.621354,\"y\":114.29714,\"fixed\":true},{\"x\":86.571842,\"y\":114.06107,\"fixed\":true},{\"x\":84,\"y\":110},{\"x\":80.769638,\"y\":105.9214,\"fixed\":true},{\"x\":77.610595,\"y\":97.524313,\"fixed\":true},{\"x\":78,\"y\":94},{\"x\":78,\"y\":92.939351,\"fixed\":true},{\"x\":76.214136,\"y\":90.008176,\"fixed\":true},{\"x\":74,\"y\":87},{\"x\":69.564989,\"y\":81.875754,\"fixed\":true},{\"x\":67.968516,\"y\":74.622992,\"fixed\":true},{\"x\":68,\"y\":67},{\"x\":68,\"y\":63.30366,\"fixed\":true},{\"x\":68.597165,\"y\":61.548523,\"fixed\":true},{\"x\":71,\"y\":59},{\"x\":73.625373,\"y\":55.879887,\"fixed\":true},{\"x\":72.709934,\"y\":55.393424,\"fixed\":true},{\"x\":73,\"y\":43},{\"x\":73.03855,\"y\":31.22817,\"fixed\":true},{\"x\":73.229039,\"y\":30.010104,\"fixed\":true},{\"x\":76,\"y\":25},{\"x\":81.567396,\"y\":13.657486,\"fixed\":true},{\"x\":93.757884,\"y\":4.619539700000001,\"fixed\":true},{\"x\":107,\"y\":2},{\"x\":124.83911,\"y\":-1.25791501,\"fixed\":true},{\"x\":144.78001,\"y\":8.6597166,\"fixed\":true},{\"x\":153,\"y\":25},{\"x\":155.68747,\"y\":30.476308,\"fixed\":true},{\"x\":155.84319,\"y\":31.511445000000002,\"fixed\":true},{\"x\":156,\"y\":44},{\"x\":155.966,\"y\":56.785461,\"fixed\":true},{\"x\":154.98867,\"y\":56.91132,\"fixed\":true},{\"x\":158,\"y\":60},{\"x\":160.28721,\"y\":62.287219,\"fixed\":true},{\"x\":160.78411,\"y\":63.657865,\"fixed\":true},{\"x\":161,\"y\":68},{\"x\":161,\"y\":75.411389,\"fixed\":true},{\"x\":159.43388,\"y\":82.635502,\"fixed\":true},{\"x\":155,\"y\":88},{\"x\":152.81732,\"y\":90.52189,\"fixed\":true},{\"x\":151.03149,\"y\":93.401323,\"fixed\":true},{\"x\":151,\"y\":94},{\"x\":151,\"y\":97.281953,\"fixed\":true},{\"x\":148.50374,\"y\":104.479194,\"fixed\":true},{\"x\":145,\"y\":110}]},{\"command\":\"L\",\"points\":[{\"x\":142,\"y\":115},{\"x\":142,\"y\":123}]},{\"command\":\"C\",\"points\":[{\"x\":142.69755,\"y\":129.9194,\"fixed\":true},{\"x\":143.25427,\"y\":131.77205,\"fixed\":true},{\"x\":145,\"y\":133},{\"x\":146.97499,\"y\":134.59927,\"fixed\":true},{\"x\":156.65527,\"y\":138.05149,\"fixed\":true},{\"x\":187,\"y\":147},{\"x\":196.99202,\"y\":150.08012,\"fixed\":true},{\"x\":205.82213000000002,\"y\":155.34678,\"fixed\":true},{\"x\":210,\"y\":161},{\"x\":214.23073,\"y\":166.13256,\"fixed\":true},{\"x\":219.61697,\"y\":176.62982,\"fixed\":true},{\"x\":222,\"y\":183},{\"x\":223.9539,\"y\":190.01934,\"fixed\":true},{\"x\":225.09131,\"y\":203.40949,\"fixed\":true},{\"x\":225,\"y\":203}]},{\"command\":\"L\",\"points\":[{\"x\":3,\"y\":205}]},{\"command\":\"Z\"}],\"style\":\"fill:none;stroke:#000000;stroke-width:5;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":100,"gh0":100,"w0":55,"h0":55,"x0":23,"y0":23}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2; b.w -= s.w; b.h -= s.w;
return [translate(b.x, b.y), scale(b.w / 225, b.h / 207)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":100,"gh0":100,"w0":100,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T22"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B20"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="50" ry="50" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="98" height="98"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 8.13679; fill: rgb(255, 255, 255); fill-opacity: 0;"/>
    </Content>
  </Shape>
  <Shape id="icon" displayName="Icon" icon="icons/icon.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">48,48</Property>
        <Property name="strokeColor" displayName="strokeColor" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Icon)" type="ImageData">24,24,collection://bitmaps/icon-vectorimage0.png</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":48,"gh0":48,"w0":48,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":48,"gh0":48,"w0":48,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $strokeColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Icon">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 0;" width="48" height="48"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="iconrounded" displayName="Icon (Rounded)" icon="icons/iconrounded.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">64,64</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor.hollowed(1)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Icon)" type="ImageData">24,24,collection://bitmaps/iconrounded-vectorimage0.png</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":64,"gh0":64,"w0":64,"h0":64,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle(Math.max($box.w/2, $box.h/2), 0)).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":64,"gh0":64,"w0":32,"h0":32,"x0":16,"y0":16}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"relative","hPolicy":"relative"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $strokeColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Icon">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":64,"gh0":64,"w0":64,"h0":64,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T22"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B20"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="32" ry="32" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="62" height="62"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="filedropzone" displayName="File Drop Zone" icon="icons/filedropzone.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">240,120</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor.hollowed(1)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle.styled("5,5")</E>
        </Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Icon)" type="ImageData">24,24,collection://bitmaps/filedropzone-vectorimage0.png</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,2</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.toBounds($box, &quot;L0,M-30,R0,M3&quot;),font: $textFont,align: $textAlignment,richText: true})">Drop files here...</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":240,"gh0":120,"w0":240,"h0":120,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.toBounds($box, "C-18,M0,C18,M36"));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.toBounds($box, "L0,M-30,R0,M3")]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Icon">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":240,"gh0":120,"w0":240,"h0":120,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T22"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B20"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; stroke-dasharray: 5, 5;" width="238" height="118"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="imageuploadzone" displayName="Image Upload Zone" icon="icons/imageuploadzone.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,120</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor.hollowed(1)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle.styled("5,5")</E>
        </Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Icon)" type="ImageData">24,24,collection://bitmaps/imageuploadzone-vectorimage0.png</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,0</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.toBounds($box, &quot;L0,M3,R0,M30&quot;),font: $textFont,align: $textAlignment,richText: true})">Upload image</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":120,"w0":120,"h0":120,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.toBounds($box, "C-18,M-36,C18,M0"));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.toBounds($box, "L0,M3,R0,M30")]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Icon">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":120,"gh0":120,"w0":120,"h0":120,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T22"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B20"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; stroke-dasharray: 5, 5;" width="118" height="118"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="popovertop" displayName="Popover (top)" icon="icons/popovertop.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">180,90</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:180,&quot;gh0&quot;:90,&quot;w0&quot;:150,&quot;h0&quot;:50,&quot;x0&quot;:15,&quot;y0&quot;:15}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("186,93,15-60 125-170,18-71,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":83,\"y\":83}]},{\"command\":\"L\",\"points\":[{\"x\":5,\"y\":83}]},{\"command\":\"C\",\"points\":[{\"x\":2.4316366,\"y\":83.000004,\"fixed\":true},{\"x\":0.0000018897638,\"y\":80.568366,\"fixed\":true},{\"x\":0,\"y\":78}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":5}]},{\"command\":\"C\",\"points\":[{\"x\":0.0000018897638,\"y\":2.4316403,\"fixed\":true},{\"x\":2.4316366,\"y\":0.0000018897637,\"fixed\":true},{\"x\":5,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":181,\"y\":0}]},{\"command\":\"C\",\"points\":[{\"x\":183.56837,\"y\":0.0000018897637,\"fixed\":true},{\"x\":186,\"y\":2.4316403,\"fixed\":true},{\"x\":186,\"y\":5}]},{\"command\":\"L\",\"points\":[{\"x\":186,\"y\":78}]},{\"command\":\"C\",\"points\":[{\"x\":186,\"y\":81.020467,\"fixed\":true},{\"x\":183.56837,\"y\":83.452105,\"fixed\":true},{\"x\":181,\"y\":83}]},{\"command\":\"L\",\"points\":[{\"x\":103,\"y\":83}]},{\"command\":\"L\",\"points\":[{\"x\":93,\"y\":93}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:none;fill-opacity:1;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":150,"h0":50,"x0":15,"y0":15}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L15"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T15"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R15"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B25"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M-5"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(255, 255, 255); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="popoverbottom" displayName="Popover (bottom)" icon="icons/popoverbottom.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">180,90</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:180,&quot;gh0&quot;:90,&quot;w0&quot;:150,&quot;h0&quot;:50,&quot;x0&quot;:15,&quot;y0&quot;:25}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("186,92,18-68 119-169,24-77,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":103,\"y\":10}]},{\"command\":\"L\",\"points\":[{\"x\":181,\"y\":10}]},{\"command\":\"C\",\"points\":[{\"x\":184.02049,\"y\":10,\"fixed\":true},{\"x\":186.45212,\"y\":12.410858300000001,\"fixed\":true},{\"x\":186,\"y\":15}]},{\"command\":\"L\",\"points\":[{\"x\":186,\"y\":87}]},{\"command\":\"C\",\"points\":[{\"x\":186,\"y\":89.99466,\"fixed\":true},{\"x\":183.56837,\"y\":91.957281,\"fixed\":true},{\"x\":181,\"y\":92}]},{\"command\":\"L\",\"points\":[{\"x\":5,\"y\":92}]},{\"command\":\"C\",\"points\":[{\"x\":2.4316366,\"y\":91.999997,\"fixed\":true},{\"x\":0.0000018897638,\"y\":90.037376,\"fixed\":true},{\"x\":0,\"y\":87}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":15}]},{\"command\":\"C\",\"points\":[{\"x\":0.0000018897638,\"y\":12.325416,\"fixed\":true},{\"x\":2.4316366,\"y\":9.9145577,\"fixed\":true},{\"x\":5,\"y\":10}]},{\"command\":\"L\",\"points\":[{\"x\":83,\"y\":10}]},{\"command\":\"L\",\"points\":[{\"x\":93,\"y\":0}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:none;fill-opacity:1;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":150,"h0":50,"x0":15,"y0":25}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L15"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T25"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R15"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B15"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M5"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(255, 255, 255); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="popoverleft" displayName="Popover (left)" icon="icons/popoverleft.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">180,90</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:180,&quot;gh0&quot;:90,&quot;w0&quot;:140,&quot;h0&quot;:60,&quot;x0&quot;:15,&quot;y0&quot;:15}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Lorem ipsum dolor sit amet, consectetur adipiscing tortor.</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("132,106,18-103,10-38 70-98,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":122,\"y\":63}]},{\"command\":\"L\",\"points\":[{\"x\":122,\"y\":101}]},{\"command\":\"C\",\"points\":[{\"x\":122,\"y\":104.02049,\"fixed\":true},{\"x\":119.58916,\"y\":106.45212,\"fixed\":true},{\"x\":117,\"y\":106}]},{\"command\":\"L\",\"points\":[{\"x\":5,\"y\":106}]},{\"command\":\"C\",\"points\":[{\"x\":1.962635,\"y\":106.00002,\"fixed\":true},{\"x\":0.0000018897638,\"y\":103.56839,\"fixed\":true},{\"x\":0,\"y\":101}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":5}]},{\"command\":\"C\",\"points\":[{\"x\":0.0000018897638,\"y\":2.4316366,\"fixed\":true},{\"x\":1.962635,\"y\":0.0000018897637,\"fixed\":true},{\"x\":5,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":117,\"y\":0}]},{\"command\":\"C\",\"points\":[{\"x\":119.99468,\"y\":0,\"fixed\":true},{\"x\":122.40552,\"y\":2.4316347102363,\"fixed\":true},{\"x\":122,\"y\":5}]},{\"command\":\"L\",\"points\":[{\"x\":122,\"y\":43}]},{\"command\":\"L\",\"points\":[{\"x\":132,\"y\":53}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":140,"h0":60,"x0":15,"y0":15}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L15"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T25"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R15"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B15"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M5"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(255, 255, 255); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="popoverright" displayName="Popover (right)" icon="icons/popoverright.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">180,90</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:180,&quot;gh0&quot;:90,&quot;w0&quot;:140,&quot;h0&quot;:60,&quot;x0&quot;:25,&quot;y0&quot;:15}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Lorem ipsum dolor sit amet, consectetur adipiscing tortor.</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("132,106,27-112,13-36 73-96,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":10,\"y\":43}]},{\"command\":\"L\",\"points\":[{\"x\":10,\"y\":5}]},{\"command\":\"C\",\"points\":[{\"x\":9.9145351,\"y\":2.4316366,\"fixed\":true},{\"x\":12.325382,\"y\":0.000001889764,\"fixed\":true},{\"x\":15,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":127,\"y\":0}]},{\"command\":\"C\",\"points\":[{\"x\":129.99463,\"y\":0,\"fixed\":true},{\"x\":131.95727,\"y\":2.431634710236,\"fixed\":true},{\"x\":132,\"y\":5}]},{\"command\":\"L\",\"points\":[{\"x\":132,\"y\":101}]},{\"command\":\"C\",\"points\":[{\"x\":132,\"y\":104.02045,\"fixed\":true},{\"x\":130.03736,\"y\":106.45208,\"fixed\":true},{\"x\":127,\"y\":106}]},{\"command\":\"L\",\"points\":[{\"x\":15,\"y\":106}]},{\"command\":\"C\",\"points\":[{\"x\":12.005329,\"y\":106,\"fixed\":true},{\"x\":9.5944821,\"y\":103.56837,\"fixed\":true},{\"x\":10,\"y\":101}]},{\"command\":\"L\",\"points\":[{\"x\":10,\"y\":63}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":53}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":180,"gh0":90,"w0":140,"h0":60,"x0":25,"y0":15}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":180,"gh0":90,"w0":180,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L15"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T25"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R15"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B15"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M5"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(255, 255, 255); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="breadcrumblargefirst" displayName="Breadcrumb (large, first)" icon="icons/breadcrumblargefirst.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">110,60</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true).resized(0.06666666666666665)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:110,&quot;gh0&quot;:60,&quot;w0&quot;:65,&quot;h0&quot;:30,&quot;x0&quot;:18,&quot;y0&quot;:15}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Home</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":110,"gh0":60,"w0":110,"h0":60,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("100,60,8-74,8-23 39-54,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":80,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":30},{\"x\":80,\"y\":60}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":60}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":110,"gh0":60,"w0":110,"h0":60,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":110,"gh0":60,"w0":65,"h0":30,"x0":18,"y0":15}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":110,"gh0":60,"w0":65,"h0":30,"x0":18,"y0":15}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":110,"gh0":60,"w0":110,"h0":60,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="breadcrumblargemiddle" displayName="Breadcrumb (large, middle)" icon="icons/breadcrumblargemiddle.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">130,60</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true).resized(0.06666666666666665)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:130,&quot;gh0&quot;:60,&quot;w0&quot;:68,&quot;h0&quot;:30,&quot;x0&quot;:34,&quot;y0&quot;:15}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Middle</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$fillColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":130,"gh0":60,"w0":130,"h0":60,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("100,60,27-74,9-24 38-53,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":80,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":30},{\"x\":80,\"y\":60}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":60}]},{\"command\":\"L\",\"points\":[{\"x\":20,\"y\":30}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":130,"gh0":60,"w0":130,"h0":60,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vector1">
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = new Bound(0 - $strokeStyle.w, 0, $box.w + $strokeStyle.w, $box.h);
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("100,60,5-72,8-23 38-53,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":80,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":30},{\"x\":80,\"y\":60}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":60}]}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:none;stroke-width:0.99999994;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = new Bound(0 - $strokeStyle.w, 0, $box.w + $strokeStyle.w, $box.h);
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":130,"gh0":60,"w0":68,"h0":30,"x0":34,"y0":15}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":130,"gh0":60,"w0":68,"h0":30,"x0":34,"y0":15}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":130,"gh0":60,"w0":130,"h0":60,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector1" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 0;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="breadcrumblargelast" displayName="Breadcrumb (large, last)" icon="icons/breadcrumblargelast.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,60</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor.hollowed(1)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true).resized(0.06666666666666665)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:120,&quot;gh0&quot;:60,&quot;w0&quot;:68,&quot;h0&quot;:30,&quot;x0&quot;:34,&quot;y0&quot;:15}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Last</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$fillColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":60,"w0":120,"h0":60,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("100,60,25-91,12-27 38-53,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":60}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":60}]},{\"command\":\"L\",\"points\":[{\"x\":20,\"y\":30}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":60,"w0":120,"h0":60,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vector1">
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = new Bound(0 - $strokeStyle.w, 0, $box.w + $strokeStyle.w, $box.h);
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("100,60,8-88,9-52,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":60}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":60}]}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = new Bound(0 - $strokeStyle.w, 0, $box.w + $strokeStyle.w, $box.h);
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":60,"w0":68,"h0":30,"x0":34,"y0":15}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":60,"w0":68,"h0":30,"x0":34,"y0":15}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":120,"gh0":60,"w0":120,"h0":60,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 0; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 0;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector1" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 0;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="breadcrumbsmallfirst" displayName="Breadcrumb (small, first)" icon="icons/breadcrumbsmallfirst.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">110,40</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:110,&quot;gh0&quot;:40,&quot;w0&quot;:65,&quot;h0&quot;:30,&quot;x0&quot;:18,&quot;y0&quot;:5}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Home</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":110,"gh0":40,"w0":110,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("96,40,10-72,6-16 24-34,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":80,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":96,\"y\":20},{\"x\":80,\"y\":40}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":40}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":110,"gh0":40,"w0":110,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":110,"gh0":40,"w0":65,"h0":30,"x0":18,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":110,"gh0":40,"w0":65,"h0":30,"x0":18,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":110,"gh0":40,"w0":110,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R16"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="breadcrumbsmallmiddle" displayName="Breadcrumb (small, middle)" icon="icons/breadcrumbsmallmiddle.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">130,40</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:130,&quot;gh0&quot;:40,&quot;w0&quot;:68,&quot;h0&quot;:30,&quot;x0&quot;:34,&quot;y0&quot;:5}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Middle</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$fillColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":130,"gh0":40,"w0":130,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("96,40,21-74,5-15 25-35,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":80,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":96,\"y\":20},{\"x\":80,\"y\":40}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":40}]},{\"command\":\"L\",\"points\":[{\"x\":16,\"y\":20}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":130,"gh0":40,"w0":130,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vector1">
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = new Bound(0 - $strokeStyle.w, 0, $box.w + $strokeStyle.w, $box.h);
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("96,40,7-71,4-14 26-36,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":80,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":96,\"y\":20},{\"x\":80,\"y\":40}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":40}]}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:none;stroke-width:0.81649655;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = new Bound(0 - $strokeStyle.w, 0, $box.w + $strokeStyle.w, $box.h);
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":130,"gh0":40,"w0":68,"h0":30,"x0":34,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":130,"gh0":40,"w0":68,"h0":30,"x0":34,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":130,"gh0":40,"w0":130,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R16"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L16"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector1" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 0;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="breadcrumbsmalllast" displayName="Breadcrumb (small, last)" icon="icons/breadcrumbsmalllast.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,40</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor.hollowed(1)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:120,&quot;gh0&quot;:40,&quot;w0&quot;:68,&quot;h0&quot;:30,&quot;x0&quot;:34,&quot;y0&quot;:5}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Last</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$fillColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":40,"w0":120,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("100,40,23-92,6-16 24-34,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":40}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":40}]},{\"command\":\"L\",\"points\":[{\"x\":16,\"y\":20}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":40,"w0":120,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vector1">
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = new Bound(0 - $strokeStyle.w, 0, $box.w + $strokeStyle.w, $box.h);
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("100,40,12-80,8-37,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":40}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":40}]}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:#000000;stroke-width:0;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = new Bound(0 - $strokeStyle.w, 0, $box.w + $strokeStyle.w, $box.h);
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":40,"w0":68,"h0":30,"x0":34,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":40,"w0":68,"h0":30,"x0":34,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":120,"gh0":40,"w0":120,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L16"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 0.278431; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 0;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vector1" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 0;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="toggleoffsquare" displayName="Toggle (off, square)" icon="icons/toggleoffsquare.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">54,24</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L0,T0,C0,B0");
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.toBounds($box, "L0,T0,C0,B0");
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "C0,T0,R0,B0");
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, false, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.toBounds($box, "C0,T0,R0,B0");
return [translate(((false) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 L 25 0 L 25 22 L 0 22 L 0 0 z" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 0 0 L 26 0 L 26 22 L 0 22" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
    </Content>
  </Shape>
  <Shape id="toggleonsquare" displayName="Toggle (on, square)" icon="icons/toggleonsquare.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">54,24</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$themeColor.shaded(-0.25).hollowed(0.7098039215686274)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$themeColor</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L0,T0,C0,B0");
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, false, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.toBounds($box, "L0,T0,C0,B0");
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "C0,T0,R0,B0");
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.toBounds($box, "C0,T0,R0,B0");
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 26 22 L 0 22 L 0 0 L 26 0" style="fill: rgb(77, 160, 255); fill-opacity: 0.290196; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 0 0 L 25 0 L 25 22 L 0 22 L 0 0 z" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
    </Content>
  </Shape>
  <Shape id="navigationback" displayName="Navigation (back)" icon="icons/navigationback.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">80,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:80,&quot;gh0&quot;:36,&quot;w0&quot;:52,&quot;h0&quot;:26,&quot;x0&quot;:18,&quot;y0&quot;:5}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Back</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0IconSide" displayName="Text icon side" type="Enum" p:enumValues="['leading|Leading', 'trailing|Trailing']">leading</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":80,"gh0":36,"w0":80,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("93,36,25-81,4-12 25-33,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":90,\"y\":36}]},{\"command\":\"L\",\"points\":[{\"x\":16,\"y\":36}]},{\"command\":\"C\",\"points\":[{\"x\":13.697966,\"y\":36.045619,\"fixed\":true},{\"x\":13.15916,\"y\":35.855509,\"fixed\":true},{\"x\":12,\"y\":34}]},{\"command\":\"L\",\"points\":[{\"x\":1,\"y\":20}]},{\"command\":\"C\",\"points\":[{\"x\":-0.16715970000000002,\"y\":18.395477,\"fixed\":true},{\"x\":-0.1229127699999999,\"y\":17.548938,\"fixed\":true},{\"x\":1,\"y\":16}]},{\"command\":\"L\",\"points\":[{\"x\":12,\"y\":2}]},{\"command\":\"C\",\"points\":[{\"x\":12.984236,\"y\":0.34140458,\"fixed\":true},{\"x\":13.636499,\"y\":0.00026441542,\"fixed\":true},{\"x\":16,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":90,\"y\":0}]},{\"command\":\"C\",\"points\":[{\"x\":93.148179,\"y\":-0.00729464,\"fixed\":true},{\"x\":93.271641,\"y\":0.12725654,\"fixed\":true},{\"x\":93,\"y\":3}]},{\"command\":\"L\",\"points\":[{\"x\":93,\"y\":33}]},{\"command\":\"C\",\"points\":[{\"x\":93.0019,\"y\":35.730368,\"fixed\":true},{\"x\":92.86783,\"y\":35.938734,\"fixed\":true},{\"x\":90,\"y\":36}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:none;stroke-width:0.77459675;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":80,"gh0":36,"w0":80,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":80,"gh0":36,"w0":52,"h0":26,"x0":18,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":80,"gh0":36,"w0":52,"h0":26,"x0":18,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":80,"gh0":36,"w0":80,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R16"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="navigationnext" displayName="Navigation (next)" icon="icons/navigationnext.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">80,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true).resized(-0.06666666666666665)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:80,&quot;gh0&quot;:36,&quot;w0&quot;:52,&quot;h0&quot;:26,&quot;x0&quot;:10,&quot;y0&quot;:5}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Next</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0IconSide" displayName="Text icon side" type="Enum" p:enumValues="['leading|Leading', 'trailing|Trailing']">leading</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":80,"gh0":36,"w0":80,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("93,36,8-69,5-13 25-33,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":3,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":77,\"y\":0}]},{\"command\":\"C\",\"points\":[{\"x\":79.384825,\"y\":-0.04535433,\"fixed\":true},{\"x\":79.923631,\"y\":0.14475591,\"fixed\":true},{\"x\":81,\"y\":2}]},{\"command\":\"L\",\"points\":[{\"x\":92,\"y\":16}]},{\"command\":\"C\",\"points\":[{\"x\":93.16716,\"y\":17.604522,\"fixed\":true},{\"x\":93.122913,\"y\":18.451061,\"fixed\":true},{\"x\":92,\"y\":20}]},{\"command\":\"L\",\"points\":[{\"x\":81,\"y\":34}]},{\"command\":\"C\",\"points\":[{\"x\":79.837021,\"y\":35.523679,\"fixed\":true},{\"x\":79.184757,\"y\":35.864819,\"fixed\":true},{\"x\":77,\"y\":36}]},{\"command\":\"L\",\"points\":[{\"x\":3,\"y\":36}]},{\"command\":\"C\",\"points\":[{\"x\":0.12348175,\"y\":36.013194,\"fixed\":true},{\"x\":0.000019700175,\"y\":35.878643,\"fixed\":true},{\"x\":0,\"y\":33}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":3}]},{\"command\":\"C\",\"points\":[{\"x\":-0.00190786,\"y\":0.21399988,\"fixed\":true},{\"x\":0.13218978,\"y\":0.00563452,\"fixed\":true},{\"x\":3,\"y\":0}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.17697598;stroke:none;stroke-width:0.77459675;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":80,"gh0":36,"w0":80,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":80,"gh0":36,"w0":52,"h0":26,"x0":10,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":80,"gh0":36,"w0":52,"h0":26,"x0":10,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_vector0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":80,"gh0":36,"w0":80,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R16"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_vector0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2; fill: rgb(237, 237, 237); fill-opacity: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="videocontrolbarbasic" displayName="Video Control Bar (basic)" icon="icons/videocontrolbarbasic.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">700,50</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/videocontrolbarbasic-vectorimage0.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (vectorImage1)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/videocontrolbarbasic-vectorimage1.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage2ImageData" displayName="Image Data (vectorImage2)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/videocontrolbarbasic-vectorimage2.png</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:700,&quot;gh0&quot;:50,&quot;w0&quot;:46,&quot;h0&quot;:30,&quot;x0&quot;:116,&quot;y0&quot;:10}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;middle&quot;,&quot;wPolicy&quot;:&quot;fixed&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: $textAlignment,richText: true})">10:45</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$controlFaceColor.shaded(0.06451612903225812)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:700,&quot;gh0&quot;:50,&quot;w0&quot;:46,&quot;h0&quot;:30,&quot;x0&quot;:473,&quot;y0&quot;:10}, {&quot;xPolicy&quot;:&quot;end&quot;,&quot;yPolicy&quot;:&quot;middle&quot;,&quot;wPolicy&quot;:&quot;fixed&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: $textAlignment,richText: true})">18:20</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage3ImageData" displayName="Image Data (vectorImage3)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/videocontrolbarbasic-vectorimage3.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage4ImageData" displayName="Image Data (vectorImage4)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/videocontrolbarbasic-vectorimage4.png</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":700,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":24,"h0":24,"x0":12,"y0":13}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":36,"h0":36,"x0":38,"y0":7}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage2">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":24,"h0":24,"x0":78,"y0":13}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage2ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage2Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage2ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":46,"h0":30,"x0":116,"y0":10}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":275,"h0":8,"x0":178,"y0":21}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"start-end","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":174,"h0":8,"x0":178,"y0":21}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"start-end","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text1text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":46,"h0":30,"x0":473,"y0":10}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vectorImage3">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":24,"h0":24,"x0":533,"y0":13}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage3ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage3Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage3ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":90,"h0":8,"x0":564,"y0":21}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle4">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":60,"h0":8,"x0":564,"y0":21}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage4">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":50,"w0":24,"h0":24,"x0":662,"y0":13}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage4ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage4Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage4ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":700,"gh0":50,"w0":700,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Bottom", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="698" height="48"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage2">
        <g id="vectorImage2Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle1" rx="0" ry="0" style="fill: rgb(222, 222, 222); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="275" height="8"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle2" rx="0" ry="0" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="174" height="8"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text1text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage3">
        <g id="vectorImage3Image" x="0" y="0"/>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle3" rx="0" ry="0" style="fill: rgb(222, 222, 222); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="90" height="8"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle4" rx="0" ry="0" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="60" height="8"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage4">
        <g id="vectorImage4Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="videocontrolbarfull" displayName="Video Control Bar (full)" icon="icons/videocontrolbarfull.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">500,40</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (vectorImage1)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/videocontrolbarfull-vectorimage1.png</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:500,&quot;gh0&quot;:40,&quot;w0&quot;:46,&quot;h0&quot;:30,&quot;x0&quot;:37,&quot;y0&quot;:5}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;middle&quot;,&quot;wPolicy&quot;:&quot;fixed&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: $textAlignment,richText: true})">10:45</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$controlFaceColor.shaded(0.06451612903225812)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:500,&quot;gh0&quot;:40,&quot;w0&quot;:46,&quot;h0&quot;:30,&quot;x0&quot;:373,&quot;y0&quot;:5}, {&quot;xPolicy&quot;:&quot;end&quot;,&quot;yPolicy&quot;:&quot;middle&quot;,&quot;wPolicy&quot;:&quot;fixed&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: $textAlignment,richText: true})">18:20</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage3ImageData" displayName="Image Data (vectorImage3)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/videocontrolbarfull-vectorimage3.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage4ImageData" displayName="Image Data (vectorImage4)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/videocontrolbarfull-vectorimage4.png</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":40,"w0":500,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage1">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":40,"w0":24,"h0":24,"x0":7,"y0":8}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":40,"w0":46,"h0":30,"x0":37,"y0":5}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":40,"w0":275,"h0":8,"x0":87,"y0":16}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"start-end","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":40,"w0":174,"h0":8,"x0":87,"y0":16}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"start-end","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text1text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":40,"w0":46,"h0":30,"x0":373,"y0":5}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vectorImage3">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":40,"w0":24,"h0":24,"x0":431,"y0":8}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage3ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage3Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage3ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage4">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":40,"w0":24,"h0":24,"x0":464,"y0":8}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage4ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage4Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage4ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":500,"gh0":40,"w0":500,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Bottom", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="498" height="38"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle1" rx="0" ry="0" style="fill: rgb(222, 222, 222); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="275" height="8"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle2" rx="0" ry="0" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="174" height="8"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text1text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage3">
        <g id="vectorImage3Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage4">
        <g id="vectorImage4Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="videoframe" displayName="Video Frame" icon="icons/videoframe.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">700,400</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor.shaded(0.29032258064516125)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="withBorderBottom" displayName="With Bottom Border" type="Bool">false</Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/videoframe-vectorimage0.png</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":400,"w0":700,"h0":400,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, $withBorderBottom.value, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":400,"w0":700,"h0":400,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":700,"gh0":400,"w0":110,"h0":110,"x0":295,"y0":145}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"relative","hPolicy":"relative"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":700,"gh0":400,"w0":700,"h0":400,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "B0"), "Top", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 L 698 0 L 698 398 L 0 398 L 0 0 z" style="fill: rgb(168, 168, 168); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="ratingstars" displayName="Rating (stars)" icon="icons/ratingstars.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">196,36</Property>
        <Property name="fillColor2" displayName="Other Background Star Color" type="Color">
          <E>$$controlFaceColor.shaded(0.06451612903225812)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (Background Star)" type="ImageData" p:disabled="true">196,36,data:image/svg+xml,&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Created with Inkscape (http://www.inkscape.org/) --&gt;

&lt;svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   version="1.1"
   id="svg4644"
   width="196.00011"
   height="36.000679"&gt;
  &lt;metadata
     id="metadata4650"&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=""&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;defs
     id="defs4648" /&gt;
  &lt;sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="640"
     inkscape:window-height="480"
     id="namedview4646" /&gt;
  &lt;inkscape:clipboard
     style="font-variant-east_asian:normal;opacity:1;vector-effect:none;fill:#000000;fill-opacity:1;stroke:none;stroke-width:3.71295926;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"
     min="602.81114,212.34121"
     max="798.81124,248.34189" /&gt;
  &lt;path
     inkscape:connector-curvature="0"
     id="path4589"
     d="m 178.0001,0 c 1.55743,4.3795276 3.11498,8.7589418 4.67237,13.138469 4.44261,0.204473 8.88506,0.408643 13.32763,0.613002 -3.47992,2.910765 -6.96003,5.821531 -10.43996,8.732296 1.18787,4.505575 2.37645,9.011301 3.56466,13.516914 -3.70824,-2.580511 -7.41645,-5.161059 -11.1247,-7.741569 -3.70821,2.58051 -7.4163,5.161058 -11.12451,7.741569 1.18787,-4.505613 2.37634,-9.011339 3.56451,-13.516914 -3.47996,-2.910765 -6.96004,-5.821531 -10.44,-8.732296 4.44261,-0.204472 8.88518,-0.40868 13.32779,-0.613002 C 174.88528,8.7589418 176.44271,4.3795276 178.0001,0 Z m -39.99999,0 c 1.5574,4.3795276 3.11498,8.7589418 4.67237,13.138469 4.44261,0.204473 8.88503,0.408643 13.32764,0.613002 -3.47997,2.910765 -6.96004,5.821531 -10.44001,8.732296 1.18791,4.505575 2.3765,9.011301 3.56467,13.516914 -3.70821,-2.580511 -7.41646,-5.161059 -11.12467,-7.741569 -3.7082,2.58051 -7.4163,5.161058 -11.12454,7.741569 1.1879,-4.505613 2.37637,-9.011339 3.56454,-13.516914 -3.47996,-2.910765 -6.96003,-5.821531 -10.44,-8.732296 4.44261,-0.204472 8.88518,-0.40868 13.32779,-0.613002 C 134.88529,8.7589418 136.44268,4.3795276 138.00011,0 Z M 98.000127,0 c 1.557392,4.3795276 3.114933,8.7589418 4.672363,13.138469 4.44257,0.204473 8.88503,0.408643 13.32764,0.613002 -3.47997,2.910765 -6.96004,5.821531 -10.44,8.732296 1.1879,4.505575 2.37649,9.011301 3.56466,13.516914 -3.70821,-2.580511 -7.41646,-5.161059 -11.124663,-7.741569 -3.708246,2.58051 -7.41634,5.161058 -11.124548,7.741569 1.187905,-4.505613 2.37634,-9.011339 3.56451,-13.516914 -3.479924,-2.910765 -6.960038,-5.821531 -10.439962,-8.732296 4.44257,-0.204472 8.885178,-0.40868 13.327748,-0.613002 C 94.885305,8.7589418 96.442697,4.3795276 98.000127,0 Z M 57.999988,0 c 1.557392,4.3795276 3.114935,8.7589418 4.672365,13.138469 4.442571,0.204473 8.885027,0.408643 13.327635,0.613002 -3.479962,2.910765 -6.960038,5.821531 -10.44,8.732296 1.187906,4.505575 2.376491,9.011301 3.564662,13.516914 -3.708208,-2.580511 -7.416454,-5.161059 -11.124662,-7.741569 -3.708246,2.58051 -7.416302,5.161058 -11.124548,7.741569 1.187905,-4.505613 2.37634,-9.011339 3.564548,-13.516914 -3.479962,-2.910765 -6.960038,-5.821531 -10.44,-8.732296 4.44257,-0.204472 8.885178,-0.40868 13.327748,-0.613002 C 54.885166,8.7589418 56.442558,4.3795276 57.999988,0 Z M 18,0 c 1.557392,4.3795276 3.114936,8.7589418 4.672366,13.138469 4.44257,0.204473 8.885026,0.408643 13.327597,0.613002 -3.479925,2.910765 -6.960038,5.821531 -10.439963,8.732296 1.187906,4.505575 2.376492,9.011301 3.564662,13.516914 C 25.416416,33.42017 21.708208,30.839622 18,28.259112 14.291754,30.839622 10.58366,33.42017 6.875452,36.000681 8.0633576,31.495068 9.2517922,26.989342 10.439962,22.483767 6.9600379,19.573002 3.4799244,16.662236 0,13.751471 4.4425701,13.546999 8.885178,13.342791 13.327748,13.138469 14.885178,8.7589418 16.44257,4.3795276 18,0 Z"
     style="opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:3.71295929;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" /&gt;
&lt;/svg&gt;
</Property>
        <Property name="fillColor" displayName="Star Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (Star)" type="ImageData" p:disabled="true">196,36,data:image/svg+xml,&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Created with Inkscape (http://www.inkscape.org/) --&gt;

&lt;svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   version="1.1"
   id="svg4644"
   width="196.00011"
   height="36.000679"&gt;
  &lt;metadata
     id="metadata4650"&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=""&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;defs
     id="defs4648" /&gt;
  &lt;sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="640"
     inkscape:window-height="480"
     id="namedview4646" /&gt;
  &lt;inkscape:clipboard
     style="font-variant-east_asian:normal;opacity:1;vector-effect:none;fill:#000000;fill-opacity:1;stroke:none;stroke-width:3.71295926;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"
     min="602.81114,212.34121"
     max="798.81124,248.34189" /&gt;
  &lt;path
     inkscape:connector-curvature="0"
     id="path4589"
     d="m 178.0001,0 c 1.55743,4.3795276 3.11498,8.7589418 4.67237,13.138469 4.44261,0.204473 8.88506,0.408643 13.32763,0.613002 -3.47992,2.910765 -6.96003,5.821531 -10.43996,8.732296 1.18787,4.505575 2.37645,9.011301 3.56466,13.516914 -3.70824,-2.580511 -7.41645,-5.161059 -11.1247,-7.741569 -3.70821,2.58051 -7.4163,5.161058 -11.12451,7.741569 1.18787,-4.505613 2.37634,-9.011339 3.56451,-13.516914 -3.47996,-2.910765 -6.96004,-5.821531 -10.44,-8.732296 4.44261,-0.204472 8.88518,-0.40868 13.32779,-0.613002 C 174.88528,8.7589418 176.44271,4.3795276 178.0001,0 Z m -39.99999,0 c 1.5574,4.3795276 3.11498,8.7589418 4.67237,13.138469 4.44261,0.204473 8.88503,0.408643 13.32764,0.613002 -3.47997,2.910765 -6.96004,5.821531 -10.44001,8.732296 1.18791,4.505575 2.3765,9.011301 3.56467,13.516914 -3.70821,-2.580511 -7.41646,-5.161059 -11.12467,-7.741569 -3.7082,2.58051 -7.4163,5.161058 -11.12454,7.741569 1.1879,-4.505613 2.37637,-9.011339 3.56454,-13.516914 -3.47996,-2.910765 -6.96003,-5.821531 -10.44,-8.732296 4.44261,-0.204472 8.88518,-0.40868 13.32779,-0.613002 C 134.88529,8.7589418 136.44268,4.3795276 138.00011,0 Z M 98.000127,0 c 1.557392,4.3795276 3.114933,8.7589418 4.672363,13.138469 4.44257,0.204473 8.88503,0.408643 13.32764,0.613002 -3.47997,2.910765 -6.96004,5.821531 -10.44,8.732296 1.1879,4.505575 2.37649,9.011301 3.56466,13.516914 -3.70821,-2.580511 -7.41646,-5.161059 -11.124663,-7.741569 -3.708246,2.58051 -7.41634,5.161058 -11.124548,7.741569 1.187905,-4.505613 2.37634,-9.011339 3.56451,-13.516914 -3.479924,-2.910765 -6.960038,-5.821531 -10.439962,-8.732296 4.44257,-0.204472 8.885178,-0.40868 13.327748,-0.613002 C 94.885305,8.7589418 96.442697,4.3795276 98.000127,0 Z M 57.999988,0 c 1.557392,4.3795276 3.114935,8.7589418 4.672365,13.138469 4.442571,0.204473 8.885027,0.408643 13.327635,0.613002 -3.479962,2.910765 -6.960038,5.821531 -10.44,8.732296 1.187906,4.505575 2.376491,9.011301 3.564662,13.516914 -3.708208,-2.580511 -7.416454,-5.161059 -11.124662,-7.741569 -3.708246,2.58051 -7.416302,5.161058 -11.124548,7.741569 1.187905,-4.505613 2.37634,-9.011339 3.564548,-13.516914 -3.479962,-2.910765 -6.960038,-5.821531 -10.44,-8.732296 4.44257,-0.204472 8.885178,-0.40868 13.327748,-0.613002 C 54.885166,8.7589418 56.442558,4.3795276 57.999988,0 Z M 18,0 c 1.557392,4.3795276 3.114936,8.7589418 4.672366,13.138469 4.44257,0.204473 8.885026,0.408643 13.327597,0.613002 -3.479925,2.910765 -6.960038,5.821531 -10.439963,8.732296 1.187906,4.505575 2.376492,9.011301 3.564662,13.516914 C 25.416416,33.42017 21.708208,30.839622 18,28.259112 14.291754,30.839622 10.58366,33.42017 6.875452,36.000681 8.0633576,31.495068 9.2517922,26.989342 10.439962,22.483767 6.9600379,19.573002 3.4799244,16.662236 0,13.751471 4.4425701,13.546999 8.885178,13.342791 13.327748,13.138469 14.885178,8.7589418 16.44257,4.3795276 18,0 Z"
     style="opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:3.71295929;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" /&gt;
&lt;/svg&gt;
</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="handle0" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true">138,0</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":196,"gh0":36,"w0":196,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $fillColor2)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":196,"gh0":36,"w0":196,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), $fillColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.toBounds($box, "L0,T0,H0X0,B0", $handle0)).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect id="rectangle0" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="138" height="36"/>
        </clipPath>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <g id="vectorImage1">
          <g id="vectorImage1Image" x="0" y="0"/>
        </g>
      </g>
    </Content>
  </Shape>
  <Shape id="ratingheart" displayName="Rating (heart)" icon="icons/ratingheart.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">196,36</Property>
        <Property name="fillColor2" displayName="Other Background Star Color" type="Color">
          <E>$$controlFaceColor.shaded(0.06451612903225812)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (Background Star)" type="ImageData" p:disabled="true">196,36,data:image/svg+xml,&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Created with Inkscape (http://www.inkscape.org/) --&gt;

&lt;svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   version="1.1"
   id="svg4686"
   width="196.00009"
   height="36.000004"&gt;
  &lt;metadata
     id="metadata4692"&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=""&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;defs
     id="defs4690" /&gt;
  &lt;sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="640"
     inkscape:window-height="480"
     id="namedview4688" /&gt;
  &lt;inkscape:clipboard
     style="font-variant-east_asian:normal;opacity:1;vector-effect:none;fill:#000000;fill-opacity:1;stroke-width:0.03834965;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"
     min="633.15324,198.49346"
     max="829.15335,234.49346" /&gt;
  &lt;path
     inkscape:connector-curvature="0"
     d="M 175.39193,33.4097 C 166.12009,24.249557 160.00009,18.204183 160.00009,10.789592 160.00009,4.748221 164.35683,0 169.90009,0 c 3.13347,0 6.13837,1.5894129 8.1,4.0996444 C 179.96173,1.5894129 182.96663,0 186.1001,0 c 5.54326,0 9.9,4.748221 9.9,10.789592 0,7.414591 -6.12,13.455961 -15.39184,22.640126 l -2.60817,2.570285 z m -40.00002,0 C 126.12007,24.249557 120.00007,18.204183 120.00007,10.789592 120.00007,4.748221 124.3568,0 129.90007,0 c 3.13347,0 6.13837,1.5894129 8.1,4.0996444 C 139.9617,1.5894129 142.9666,0 146.10007,0 c 5.54327,0 9.9,4.748221 9.9,10.789592 0,7.414591 -6.12,13.455961 -15.39184,22.640126 l -2.60816,2.570285 z m -40.000023,0 C 86.120048,24.249557 80.000047,18.204183 80.000047,10.789592 80.000047,4.748221 84.356783,0 89.900049,0 93.033519,0 96.038417,1.5894129 98.00005,4.0996444 99.961683,1.5894129 102.96658,0 106.10005,0 c 5.54327,0 9.9,4.748221 9.9,10.789592 0,7.414591 -6.12,13.455961 -15.39184,22.640126 l -2.60816,2.570285 z m -40.000026,0 C 46.120023,24.249557 40.000022,18.204183 40.000022,10.789592 40.000022,4.748221 44.356757,0 49.900023,0 53.033493,0 56.038392,1.5894129 58.000025,4.0996444 59.961658,1.5894129 62.966556,0 66.100026,0 c 5.543266,0 9.900002,4.748221 9.900002,10.789592 0,7.414591 -6.120001,13.455961 -15.39184,22.640126 l -2.608163,2.570285 z m -40.000022,0 C 6.120001,24.249557 0,18.204183 0,10.789592 0,4.748221 4.3567354,0 9.9000016,0 13.033472,0 16.03837,1.5894129 18.000003,4.0996444 19.961636,1.5894129 22.966534,0 26.100004,0 c 5.543267,0 9.900002,4.748221 9.900002,10.789592 0,7.414591 -6.120001,13.455961 -15.391839,22.640126 l -2.608164,2.570285 z"
     id="path4681"
     style="stroke-width:0.03834965" /&gt;
&lt;/svg&gt;
</Property>
        <Property name="fillColor" displayName="Star Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (Star)" type="ImageData" p:disabled="true">196,36,data:image/svg+xml,&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Created with Inkscape (http://www.inkscape.org/) --&gt;

&lt;svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   version="1.1"
   id="svg4686"
   width="196.00009"
   height="36.000004"&gt;
  &lt;metadata
     id="metadata4692"&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=""&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" /&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;defs
     id="defs4690" /&gt;
  &lt;sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="640"
     inkscape:window-height="480"
     id="namedview4688" /&gt;
  &lt;inkscape:clipboard
     style="font-variant-east_asian:normal;opacity:1;vector-effect:none;fill:#000000;fill-opacity:1;stroke-width:0.03834965;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"
     min="633.15324,198.49346"
     max="829.15335,234.49346" /&gt;
  &lt;path
     inkscape:connector-curvature="0"
     d="M 175.39193,33.4097 C 166.12009,24.249557 160.00009,18.204183 160.00009,10.789592 160.00009,4.748221 164.35683,0 169.90009,0 c 3.13347,0 6.13837,1.5894129 8.1,4.0996444 C 179.96173,1.5894129 182.96663,0 186.1001,0 c 5.54326,0 9.9,4.748221 9.9,10.789592 0,7.414591 -6.12,13.455961 -15.39184,22.640126 l -2.60817,2.570285 z m -40.00002,0 C 126.12007,24.249557 120.00007,18.204183 120.00007,10.789592 120.00007,4.748221 124.3568,0 129.90007,0 c 3.13347,0 6.13837,1.5894129 8.1,4.0996444 C 139.9617,1.5894129 142.9666,0 146.10007,0 c 5.54327,0 9.9,4.748221 9.9,10.789592 0,7.414591 -6.12,13.455961 -15.39184,22.640126 l -2.60816,2.570285 z m -40.000023,0 C 86.120048,24.249557 80.000047,18.204183 80.000047,10.789592 80.000047,4.748221 84.356783,0 89.900049,0 93.033519,0 96.038417,1.5894129 98.00005,4.0996444 99.961683,1.5894129 102.96658,0 106.10005,0 c 5.54327,0 9.9,4.748221 9.9,10.789592 0,7.414591 -6.12,13.455961 -15.39184,22.640126 l -2.60816,2.570285 z m -40.000026,0 C 46.120023,24.249557 40.000022,18.204183 40.000022,10.789592 40.000022,4.748221 44.356757,0 49.900023,0 53.033493,0 56.038392,1.5894129 58.000025,4.0996444 59.961658,1.5894129 62.966556,0 66.100026,0 c 5.543266,0 9.900002,4.748221 9.900002,10.789592 0,7.414591 -6.120001,13.455961 -15.39184,22.640126 l -2.608163,2.570285 z m -40.000022,0 C 6.120001,24.249557 0,18.204183 0,10.789592 0,4.748221 4.3567354,0 9.9000016,0 13.033472,0 16.03837,1.5894129 18.000003,4.0996444 19.961636,1.5894129 22.966534,0 26.100004,0 c 5.543267,0 9.900002,4.748221 9.900002,10.789592 0,7.414591 -6.120001,13.455961 -15.391839,22.640126 l -2.608164,2.570285 z"
     id="path4681"
     style="stroke-width:0.03834965" /&gt;
&lt;/svg&gt;
</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="handle0" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true">138,0</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":196,"gh0":36,"w0":196,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $fillColor2)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":196,"gh0":36,"w0":196,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), $fillColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.toBounds($box, "L0,T0,H0X0,B0", $handle0)).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect id="rectangle0" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="138" height="36"/>
        </clipPath>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <g id="vectorImage1">
          <g id="vectorImage1Image" x="0" y="0"/>
        </g>
      </g>
    </Content>
  </Shape>
  <Shape id="menuitemfirst" displayName="Menu Item (first)" icon="icons/menuitemfirst.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,40</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="label" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;labeltext&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:40,&quot;w0&quot;:165,&quot;h0&quot;:32,&quot;x0&quot;:20,&quot;y0&quot;:8}, {&quot;xPolicy&quot;:&quot;relative&quot;,&quot;yPolicy&quot;:&quot;relative&quot;,&quot;wPolicy&quot;:&quot;relative&quot;,&quot;hPolicy&quot;:&quot;relative&quot;}),font: $textFont,align: $textAlignment,richText: true})">Menu Item</Property>
        <Property name="labelImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="selected" displayName="Selected" type="Bool">false</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/menuitemfirst-vectorimage0.png</Property>
        <Property name="hasSubMenu" displayName="Has Sub Menu" type="Bool">false</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":200,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, false, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":200,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":200,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, false, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":200,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":200,"h0":32,"x0":0,"y0":8}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$selected.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="labeltext">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$selected.value ? Color.fromString("#FFFFFF") : $textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$selected.value ? Color.fromString("#FFFFFF") : $textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$label]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($labelImageData).w > 0) {
                                //depends $label, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }((function (bound) {
console.log("current bound", JSON.stringify(bound));
if ($labelImageData.w > 0) {
var d = Math.round($textFont.getPixelHeight() * 1.4 * 0.7);
bound.x -= d;
bound.w += d;
console.log("shifted", d, "new bound", JSON.stringify(bound));
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":165,"h0":32,"x0":20,"y0":8}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})))))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="labelIcon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($labelImageData).w > 0) {
                                //depends $label, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }((function (bound) {
console.log("current bound", JSON.stringify(bound));
if ($labelImageData.w > 0) {
var d = Math.round($textFont.getPixelHeight() * 1.4 * 0.7);
bound.x -= d;
bound.w += d;
console.log("shifted", d, "new bound", JSON.stringify(bound));
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":165,"h0":32,"x0":20,"y0":8}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}))))));

var imageData = ($labelImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
      </For>
      <For ref="labelIconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($labelImageData).getDataAsXML(), $selected.value ? Color.fromString("#FFFFFF") : $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$hasSubMenu.value]]></Arg>
        </Visibility>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":26,"h0":26,"x0":174,"y0":11}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $selected.value ? Color.fromString("#FFFFFF") : $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="labelBrowse" displayName="Select Resource Images for Menu Item Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("labelImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="labelRemove" displayName="Remove Menu Item Icon...">
        <Impl><![CDATA[this.setProperty("labelImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":40,"w0":200,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "T0"), "Bottom", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 0 40 L 0 0 L 200 0 L 200 40" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 39 L 0 0 L 198 0 L 198 39" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" height="32" width="200"/>
      <g xmlns="http://www.w3.org/2000/svg" id="labelIcon">
        <g id="labelIconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="labeltext" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="menuitemmiddle" displayName="Menu Item (middle)" icon="icons/menuitemmiddle.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,32</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="label" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;labeltext&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:32,&quot;w0&quot;:165,&quot;h0&quot;:32,&quot;x0&quot;:20,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;relative&quot;,&quot;yPolicy&quot;:&quot;relative&quot;,&quot;wPolicy&quot;:&quot;relative&quot;,&quot;hPolicy&quot;:&quot;relative&quot;}),font: $textFont,align: $textAlignment,richText: true})">Menu Item</Property>
        <Property name="labelImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="selected" displayName="Selected" type="Bool">false</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/menuitemmiddle-vectorimage0.png</Property>
        <Property name="hasSubMenu" displayName="Has Sub Menu" type="Bool">false</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":32,"w0":200,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":32,"w0":200,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":32,"w0":200,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, false, true, false, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":32,"w0":200,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((false) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":32,"w0":200,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$selected.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="labeltext">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$selected.value ? Color.fromString("#FFFFFF") : $textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$selected.value ? Color.fromString("#FFFFFF") : $textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$label]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($labelImageData).w > 0) {
                                //depends $label, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }((function (bound) {
console.log("current bound", JSON.stringify(bound));
if ($labelImageData.w > 0) {
var d = Math.round($textFont.getPixelHeight() * 1.4 * 0.7);
bound.x -= d;
bound.w += d;
console.log("shifted", d, "new bound", JSON.stringify(bound));
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":32,"w0":165,"h0":32,"x0":20,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})))))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="labelIcon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($labelImageData).w > 0) {
                                //depends $label, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }((function (bound) {
console.log("current bound", JSON.stringify(bound));
if ($labelImageData.w > 0) {
var d = Math.round($textFont.getPixelHeight() * 1.4 * 0.7);
bound.x -= d;
bound.w += d;
console.log("shifted", d, "new bound", JSON.stringify(bound));
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":32,"w0":165,"h0":32,"x0":20,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}))))));

var imageData = ($labelImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
      </For>
      <For ref="labelIconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($labelImageData).getDataAsXML(), $selected.value ? Color.fromString("#FFFFFF") : $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$hasSubMenu.value]]></Arg>
        </Visibility>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":32,"w0":26,"h0":26,"x0":174,"y0":3}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $selected.value ? Color.fromString("#FFFFFF") : $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="labelBrowse" displayName="Select Resource Images for Menu Item Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("labelImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="labelRemove" displayName="Remove Menu Item Icon...">
        <Impl><![CDATA[this.setProperty("labelImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":32,"w0":200,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "T0"), "Bottom", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 0 0 L 200 0 L 200 32 L 0 32 L 0 0 z" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 M 198 0 L 198 32 M 0 32 L 0 0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" height="32" width="200"/>
      <g xmlns="http://www.w3.org/2000/svg" id="labelIcon">
        <g id="labelIconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="labeltext" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="menuitembottom" displayName="Menu Item (bottom)" icon="icons/menuitembottom.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,40</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="label" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;labeltext&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:40,&quot;w0&quot;:165,&quot;h0&quot;:32,&quot;x0&quot;:20,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;relative&quot;,&quot;yPolicy&quot;:&quot;relative&quot;,&quot;wPolicy&quot;:&quot;relative&quot;,&quot;hPolicy&quot;:&quot;relative&quot;}),font: $textFont,align: $textAlignment,richText: true})">Menu Item</Property>
        <Property name="labelImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="selected" displayName="Selected" type="Bool">false</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/menuitembottom-vectorimage0.png</Property>
        <Property name="hasSubMenu" displayName="Has Sub Menu" type="Bool">false</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":200,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, false, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":200,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":200,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, false, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":200,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((false) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":200,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$selected.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="labeltext">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$selected.value ? Color.fromString("#FFFFFF") : $textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$selected.value ? Color.fromString("#FFFFFF") : $textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$label]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($labelImageData).w > 0) {
                                //depends $label, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }((function (bound) {
console.log("current bound", JSON.stringify(bound));
if ($labelImageData.w > 0) {
var d = Math.round($textFont.getPixelHeight() * 1.4 * 0.7);
bound.x -= d;
bound.w += d;
console.log("shifted", d, "new bound", JSON.stringify(bound));
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":165,"h0":32,"x0":20,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})))))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="labelIcon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($labelImageData).w > 0) {
                                //depends $label, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }((function (bound) {
console.log("current bound", JSON.stringify(bound));
if ($labelImageData.w > 0) {
var d = Math.round($textFont.getPixelHeight() * 1.4 * 0.7);
bound.x -= d;
bound.w += d;
console.log("shifted", d, "new bound", JSON.stringify(bound));
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":165,"h0":32,"x0":20,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}))))));

var imageData = ($labelImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
      </For>
      <For ref="labelIconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($labelImageData).getDataAsXML(), $selected.value ? Color.fromString("#FFFFFF") : $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$hasSubMenu.value]]></Arg>
        </Visibility>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":40,"w0":26,"h0":26,"x0":174,"y0":3}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $selected.value ? Color.fromString("#FFFFFF") : $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="labelBrowse" displayName="Select Resource Images for Menu Item Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("labelImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="labelRemove" displayName="Remove Menu Item Icon...">
        <Impl><![CDATA[this.setProperty("labelImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":40,"w0":200,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "T0"), "Bottom", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 0 40 L 0 0 L 200 0 L 200 40" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 M 198 0 L 198 39 L 0 39 L 0 0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" height="32" width="200"/>
      <g xmlns="http://www.w3.org/2000/svg" id="labelIcon">
        <g id="labelIconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="labeltext" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="menuitemorphan" displayName="Menu Item (orphan)" icon="icons/menuitemorphan.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,48</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="label" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;labeltext&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:48,&quot;w0&quot;:165,&quot;h0&quot;:32,&quot;x0&quot;:20,&quot;y0&quot;:8}, {&quot;xPolicy&quot;:&quot;relative&quot;,&quot;yPolicy&quot;:&quot;relative&quot;,&quot;wPolicy&quot;:&quot;relative&quot;,&quot;hPolicy&quot;:&quot;relative&quot;}),font: $textFont,align: $textAlignment,richText: true})">Menu Item</Property>
        <Property name="labelImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="selected" displayName="Selected" type="Bool">false</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/menuitemorphan-vectorimage0.png</Property>
        <Property name="hasSubMenu" displayName="Has Sub Menu" type="Bool">false</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, false, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":32,"x0":0,"y0":8}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$selected.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="labeltext">
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Fill>
          <Arg><![CDATA[$selected.value ? Color.fromString("#FFFFFF") : $textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$selected.value ? Color.fromString("#FFFFFF") : $textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$label]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($labelImageData).w > 0) {
                                //depends $label, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }((function (bound) {
console.log("current bound", JSON.stringify(bound));
if ($labelImageData.w > 0) {
var d = Math.round($textFont.getPixelHeight() * 1.4 * 0.7);
bound.x -= d;
bound.w += d;
console.log("shifted", d, "new bound", JSON.stringify(bound));
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":165,"h0":32,"x0":20,"y0":8}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})))))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="labelIcon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($labelImageData).w > 0) {
                                //depends $label, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("labeltext").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }((function (bound) {
console.log("current bound", JSON.stringify(bound));
if ($labelImageData.w > 0) {
var d = Math.round($textFont.getPixelHeight() * 1.4 * 0.7);
bound.x -= d;
bound.w += d;
console.log("shifted", d, "new bound", JSON.stringify(bound));
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":165,"h0":32,"x0":20,"y0":8}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}))))));

var imageData = ($labelImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
      </For>
      <For ref="labelIconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($labelImageData).getDataAsXML(), $selected.value ? Color.fromString("#FFFFFF") : $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$hasSubMenu.value]]></Arg>
        </Visibility>
        <CustomStyle>
          <Arg><![CDATA["opacity"]]></Arg>
          <Arg><![CDATA[$disabled.value ? 0.4 : 1]]></Arg>
        </CustomStyle>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":26,"h0":26,"x0":174,"y0":11}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $selected.value ? Color.fromString("#FFFFFF") : $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="labelBrowse" displayName="Select Resource Images for Menu Item Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("labelImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="labelRemove" displayName="Remove Menu Item Icon...">
        <Impl><![CDATA[this.setProperty("labelImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "T0"), "Bottom", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 0 48 L 0 0 L 200 0 L 200 48" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 L 198 0 L 198 46 L 0 46 L 0 0 z" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" height="32" width="200"/>
      <g xmlns="http://www.w3.org/2000/svg" id="labelIcon">
        <g id="labelIconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="labeltext" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="menuseprator" displayName="Menu Seprator" icon="icons/menuseprator.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,16</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect2">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":16,"w0":200,"h0":16,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, false, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":16,"w0":200,"h0":16,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":16,"w0":200,"h0":16,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, false, true, false, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":16,"w0":200,"h0":16,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((false) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "L0,M0,R0,B0");
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, false, false, false, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.toBounds($box, "L0,M0,R0,B0");
return [translate(((false) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect1 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":16,"w0":200,"h0":16,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "T0"), "Bottom", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect2" d="M 0 16 L 0 0 L 200 0 L 200 16" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 0 0 M 198 0 L 198 16 M 0 16 L 0 0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 200 7 M 0 7 M 0 0 L 200 0" style="fill: rgb(237, 237, 237); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
    </Content>
  </Shape>
  <Shape id="messagepanel" displayName="Message Panel" icon="icons/messagepanel.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">520,70</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="fillColor2" displayName="Other Icon Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Icon)" type="ImageData">24,24,collection://bitmaps/messagepanel-vectorimage0.png</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.toBounds($box, &quot;B0,T0,R0,B0&quot;),font: $textFont,align: $textAlignment,richText: true})">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis 
semper dolor. Nunc purus nisi, elementum id p</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.toBounds($box, "L0,T0,B0,B0")).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.toBounds($box, "B0,T0,R0,B0");
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, false, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.toBounds($box, "B0,T0,R0,B0");
return [translate(((false) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (new Bound($box.h / 4, $box.h / 4, $box.h / 2, $box.h / 2));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $fillColor2)]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
return bound.narrowed($textFont.getPixelHeight());
}(collection.toBounds($box, "B0,T0,R0,B0")))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Icon">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" height="68" width="74"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 L 444 0 L 444 68 L 0 68" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="tabheader" displayName="Tab Header" icon="icons/tabheader.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,50</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="last" displayName="Last Tab" type="Bool">false</Property>
        <Property name="active" displayName="ActiveTab" type="Bool">false</Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:50,&quot;w0&quot;:180,&quot;h0&quot;:30,&quot;x0&quot;:10,&quot;y0&quot;:10}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Tab Header</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":50,"w0":200,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":50,"w0":200,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":50,"w0":200,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, $last.value, !$active.value, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":50,"w0":200,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.6 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":50,"w0":180,"h0":30,"x0":10,"y0":10}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.6 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":50,"w0":180,"h0":30,"x0":10,"y0":10}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Tab Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Tab Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect1 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":50,"w0":200,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "T0"), "Bottom", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 L 200 0 L 200 50 L 0 50 L 0 0 z" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 0 0 L 198 0 L 198 48 L 0 48 L 0 0 z" style="fill: rgb(237, 237, 237); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="tabbody" displayName="Tab Body" icon="icons/tabbody.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">600,400</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":600,"gh0":400,"w0":600,"h0":400,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, false, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":600,"gh0":400,"w0":600,"h0":400,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((false) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":600,"gh0":400,"w0":600,"h0":400,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "L20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "T20"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "R20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "B20"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 M 598 0 L 598 399 L 0 399 L 0 0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
    </Content>
  </Shape>
  <Shape id="menubar" displayName="Menu Bar" icon="icons/menubar.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">600,50</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":600,"gh0":50,"w0":600,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":600,"gh0":50,"w0":600,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":600,"gh0":50,"w0":600,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "L40"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "R40"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 L 598 0 L 598 48 L 0 48 L 0 0 z" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
    </Content>
  </Shape>
  <Shape id="menubaritem" displayName="Menu Bar Item" icon="icons/menubaritem.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,50</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:120,&quot;gh0&quot;:50,&quot;w0&quot;:120,&quot;h0&quot;:50,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Menu Item</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle.condensed(1)</E>
        </Property>
        <Property name="selected" displayName="Selected" type="Bool">false</Property>
        <Property name="withDropdown" displayName="With Dropdown Chevron" type="Bool">false</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/menubaritem-vectorimage0.png</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.6 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":50,"w0":120,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.6 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":50,"w0":120,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="pathRect0">
        <Visibility>
          <Arg><![CDATA[$selected.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[Color.fromString("#EDEDED00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":50,"w0":120,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, false, false, true, false, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":50,"w0":120,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((false) ? (s.w / 2) : 0) + b.x, ((false) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$withDropdown.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":50,"w0":18,"h0":18,"x0":98,"y0":18}, {"xPolicy":"end","yPolicy":"relative","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("scalable", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":120,"gh0":50,"w0":120,"h0":50,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "L0"), "Right", true, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 0 M 120 0 M 120 48 L 0 48 M 0 0" style="fill: rgb(237, 237, 237); fill-opacity: 0; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 4;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="tooltiptop" displayName="Tooltip (top)" icon="icons/tooltiptop.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,35</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor.shaded(0.19354838709677424).hollowed(0.1098039215686275)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle.condensed(-1)</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.resized(-0.1333333333333333)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:120,&quot;gh0&quot;:35,&quot;w0&quot;:120,&quot;h0&quot;:30,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Tooltip text</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":35,"w0":120,"h0":35,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("100,35,12-34 61-83,6-24,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":3,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":97,\"y\":0}]},{\"command\":\"C\",\"points\":[{\"x\":98.661972,\"y\":0,\"fixed\":true},{\"x\":100.000004,\"y\":1.3379906,\"fixed\":true},{\"x\":100,\"y\":3}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":27}]},{\"command\":\"C\",\"points\":[{\"x\":100,\"y\":28.661972,\"fixed\":true},{\"x\":98.661968,\"y\":30,\"fixed\":true},{\"x\":97,\"y\":30}]},{\"command\":\"L\",\"points\":[{\"x\":55,\"y\":30}]},{\"command\":\"L\",\"points\":[{\"x\":50,\"y\":35},{\"x\":45,\"y\":30}]},{\"command\":\"L\",\"points\":[{\"x\":3,\"y\":30}]},{\"command\":\"C\",\"points\":[{\"x\":1.3380284,\"y\":30,\"fixed\":true},{\"x\":0,\"y\":28.661972,\"fixed\":true},{\"x\":0,\"y\":27}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":3}]},{\"command\":\"C\",\"points\":[{\"x\":0,\"y\":1.3379906,\"fixed\":true},{\"x\":1.3380284,\"y\":0,\"fixed\":true},{\"x\":3,\"y\":0}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.33668345;stroke:none;stroke-width:0.95549142;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":35,"w0":120,"h0":35,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":35,"w0":120,"h0":30,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0; fill: rgb(192, 192, 192); fill-opacity: 0.890196;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="tooltipbottom" displayName="Tooltip (bottom)" icon="icons/tooltipbottom.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,35</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor.shaded(0.19354838709677424).hollowed(0.1098039215686275)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle.condensed(-1)</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.resized(-0.1333333333333333)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:120,&quot;gh0&quot;:35,&quot;w0&quot;:120,&quot;h0&quot;:30,&quot;x0&quot;:0,&quot;y0&quot;:5}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Tooltip text</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":35,"w0":120,"h0":35,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("100,35,14-36 65-87,13-30,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":97,\"y\":35}]},{\"command\":\"L\",\"points\":[{\"x\":3,\"y\":35}]},{\"command\":\"C\",\"points\":[{\"x\":1.3380284,\"y\":35,\"fixed\":true},{\"x\":0,\"y\":33.66201,\"fixed\":true},{\"x\":0,\"y\":32}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":8}]},{\"command\":\"C\",\"points\":[{\"x\":0,\"y\":6.3380282999999995,\"fixed\":true},{\"x\":1.3380284,\"y\":5,\"fixed\":true},{\"x\":3,\"y\":5}]},{\"command\":\"L\",\"points\":[{\"x\":45,\"y\":5}]},{\"command\":\"L\",\"points\":[{\"x\":50,\"y\":0},{\"x\":55,\"y\":5}]},{\"command\":\"L\",\"points\":[{\"x\":97,\"y\":5}]},{\"command\":\"C\",\"points\":[{\"x\":98.661972,\"y\":5,\"fixed\":true},{\"x\":100.000004,\"y\":6.3380282999999995,\"fixed\":true},{\"x\":100,\"y\":8}]},{\"command\":\"L\",\"points\":[{\"x\":100,\"y\":32}]},{\"command\":\"C\",\"points\":[{\"x\":100,\"y\":33.66201,\"fixed\":true},{\"x\":98.661968,\"y\":35,\"fixed\":true},{\"x\":97,\"y\":35}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.33668345;stroke:none;stroke-width:0.95549142;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":35,"w0":120,"h0":35,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":35,"w0":120,"h0":30,"x0":0,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0; fill: rgb(192, 192, 192); fill-opacity: 0.890196;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="tooltipleft" displayName="Tooltip (left)" icon="icons/tooltipleft.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">115,30</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor.shaded(0.19354838709677424).hollowed(0.1098039215686275)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle.condensed(-1)</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.resized(-0.1333333333333333)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:115,&quot;gh0&quot;:30,&quot;w0&quot;:110,&quot;h0&quot;:30,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Tooltip text</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":115,"gh0":30,"w0":115,"h0":30,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("115,36,14-94,6-11 26-31,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":0,\"y\":33}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":3}]},{\"command\":\"C\",\"points\":[{\"x\":0,\"y\":1.3380284,\"fixed\":true},{\"x\":1.3379906,\"y\":0,\"fixed\":true},{\"x\":3,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":107,\"y\":0}]},{\"command\":\"C\",\"points\":[{\"x\":108.66198,\"y\":0,\"fixed\":true},{\"x\":110,\"y\":1.3380284,\"fixed\":true},{\"x\":110,\"y\":3}]},{\"command\":\"L\",\"points\":[{\"x\":110,\"y\":13}]},{\"command\":\"L\",\"points\":[{\"x\":115,\"y\":18},{\"x\":110,\"y\":23}]},{\"command\":\"L\",\"points\":[{\"x\":110,\"y\":33}]},{\"command\":\"C\",\"points\":[{\"x\":110,\"y\":34.661972,\"fixed\":true},{\"x\":108.66198,\"y\":36,\"fixed\":true},{\"x\":107,\"y\":36}]},{\"command\":\"L\",\"points\":[{\"x\":3,\"y\":36}]},{\"command\":\"C\",\"points\":[{\"x\":1.3379906,\"y\":36,\"fixed\":true},{\"x\":0,\"y\":34.661972,\"fixed\":true},{\"x\":0,\"y\":33}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.33668345;stroke:none;stroke-width:0.95549142;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":115,"gh0":30,"w0":115,"h0":30,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":115,"gh0":30,"w0":110,"h0":30,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0; fill: rgb(192, 192, 192); fill-opacity: 0.890196;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="tooltipright" displayName="Tooltip (right)" icon="icons/tooltipright.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">115,30</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor.shaded(0.19354838709677424).hollowed(0.1098039215686275)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle.condensed(-1)</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.resized(-0.1333333333333333)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:115,&quot;gh0&quot;:30,&quot;w0&quot;:110,&quot;h0&quot;:30,&quot;x0&quot;:5,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Tooltip text</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":115,"gh0":30,"w0":115,"h0":30,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("115,36,17-106,6-11 26-31,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":115,\"y\":3}]},{\"command\":\"L\",\"points\":[{\"x\":115,\"y\":33}]},{\"command\":\"C\",\"points\":[{\"x\":115,\"y\":34.661972,\"fixed\":true},{\"x\":113.66201,\"y\":36,\"fixed\":true},{\"x\":112,\"y\":36}]},{\"command\":\"L\",\"points\":[{\"x\":8,\"y\":36}]},{\"command\":\"C\",\"points\":[{\"x\":6.3380282999999995,\"y\":36,\"fixed\":true},{\"x\":5,\"y\":34.661972,\"fixed\":true},{\"x\":5,\"y\":33}]},{\"command\":\"L\",\"points\":[{\"x\":5,\"y\":23}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":18},{\"x\":5,\"y\":13}]},{\"command\":\"L\",\"points\":[{\"x\":5,\"y\":3}]},{\"command\":\"C\",\"points\":[{\"x\":5,\"y\":1.3380284,\"fixed\":true},{\"x\":6.3380282999999995,\"y\":0,\"fixed\":true},{\"x\":8,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":112,\"y\":0}]},{\"command\":\"C\",\"points\":[{\"x\":113.66201,\"y\":0,\"fixed\":true},{\"x\":115,\"y\":1.3380284,\"fixed\":true},{\"x\":115,\"y\":3}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:0.33668345;stroke:none;stroke-width:0.95549142;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":115,"gh0":30,"w0":115,"h0":30,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":115,"gh0":30,"w0":110,"h0":30,"x0":5,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" id="vector0" style="stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0; fill: rgb(192, 192, 192); fill-opacity: 0.890196;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="browser" displayName="Browser" icon="icons/browser.png?token=1494391412836">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">1366,768</Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle2" displayName="Other Line Style" type="StrokeStyle">
          <E>$$lineStyle.condensed(-1)</E>
        </Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$controlFaceColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultTextFont.bold(true)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:1366,&quot;gh0&quot;:768,&quot;w0&quot;:240,&quot;h0&quot;:31,&quot;x0&quot;:55,&quot;y0&quot;:4}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;fixed&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: $textAlignment,richText: true})">Website Page Title</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="text0IconColor" displayName="Site Icon Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$lineStyle</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/browser-vectorimage0.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (vectorImage1)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/browser-vectorimage1.png</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$editableAreaColor</E>
        </Property>
        <Property name="textColor2" displayName="Other Text Color" type="Color">
          <E>$$themeColor</E>
        </Property>
        <Property name="textFont2" displayName="Other Text Font" type="Font">
          <E>$$defaultTextFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:1366,&quot;gh0&quot;:768,&quot;w0&quot;:937,&quot;h0&quot;:30,&quot;x0&quot;:97,&quot;y0&quot;:40}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont2,align: Alignment.fromString(&quot;0,1&quot;),richText: true})">http://www.example.com/</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage2ImageData" displayName="Image Data (vectorImage2)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/browser-vectorimage2.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage3ImageData" displayName="Image Data (vectorImage3)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/browser-vectorimage3.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage4ImageData" displayName="Image Data (vectorImage4)" type="ImageData" p:disabled="true">24,24,collection://bitmaps/browser-vectorimage4.png</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":1366,"h0":768,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle2).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle2]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":1366,"h0":34,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#3D80CCFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":261,"h0":31,"x0":44,"y0":4}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, false, true, true, true, false, false); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":261,"h0":31,"x0":44,"y0":4}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":240,"h0":31,"x0":55,"y0":4}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.4 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":240,"h0":31,"x0":55,"y0":4}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $text0IconColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":1366,"h0":42,"x0":0,"y0":34}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, false, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":1366,"h0":42,"x0":0,"y0":34}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((false) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":36,"h0":36,"x0":7,"y0":37}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $strokeColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":36,"h0":36,"x0":43,"y0":37}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), $strokeColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":1272,"h0":30,"x0":88,"y0":40}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text1text">
        <Fill>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont2]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":937,"h0":30,"x0":97,"y0":40}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[Alignment.fromString("0,1")]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vectorImage2">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":18,"h0":18,"x0":1342,"y0":9}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage2ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage2Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage2ImageData).getDataAsXML(), Color.fromString("#FFFFFFFF"))]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage3">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":22,"h0":22,"x0":1333,"y0":43}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage3ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage3Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage3ImageData).getDataAsXML(), $strokeColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage4">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":1366,"gh0":768,"w0":22,"h0":22,"x0":11,"y0":7}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage4ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage4Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage4ImageData).getDataAsXML(), Color.fromString("#FFFFFF96"))]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Site Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Site Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":1366,"gh0":768,"w0":1366,"h0":768,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T76"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M58"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="1366" height="768"/>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle1" rx="0" ry="0" style="fill: rgb(61, 128, 204); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;" width="1366" height="34"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect0" d="M 0 31 L 0 0 L 261 0 L 261 31" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 0;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0text" dominant-baseline="auto"/>
      <path xmlns="http://www.w3.org/2000/svg" id="pathRect1" d="M 0 0 M 1364 0 L 1364 41 L 0 41 L 0 0" style="fill: rgb(237, 237, 237); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" id="rectangle3" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(61, 128, 204); stroke-opacity: 1; stroke-width: 2;" width="1270" height="28"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text1text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage2">
        <g id="vectorImage2Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage3">
        <g id="vectorImage3Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage4">
        <g id="vectorImage4Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shortcut to="toggleoff" displayName="Toggle Off (no text)" icon="icons/toggleoffnotext.png">
    <PropertyValue name="box">45,24</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
  </Shortcut>
  <Shortcut to="toggleon" displayName="Toggle On (no text)" icon="icons/toggleonnotext.png">
    <PropertyValue name="box">45,24</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$themeColor.shaded(-0.25).hollowed(0.7098039215686274)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor.shaded(0.2875)</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
  </Shortcut>
  <Shortcut to="iconrounded" displayName="Icon Facebook" icon="icons/iconfacebook.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-iconfacebook-vectorimage0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="iconrounded" displayName="Icon Twitter" icon="icons/icontwitter.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-icontwitter-vectorimage0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="iconrounded" displayName="Icon Google+" icon="icons/icongoogle.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-icongoogle-vectorimage0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="iconrounded" displayName="Icon RSS" icon="icons/iconrss.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-iconrss-vectorimage0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="iconrounded" displayName="Icon Share" icon="icons/iconshare.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-iconshare-vectorimage0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="toolbarbutton" displayName="Paginator Prev" icon="icons/paginatorprev.png">
    <PropertyValue name="box">55,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$controlFaceColor.shaded(0.16129032258064513)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Prev</PropertyValue>
  </Shortcut>
  <Shortcut to="toolbarbutton" displayName="Paginator Number" icon="icons/paginatornumber.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0">1</PropertyValue>
    <PropertyValue name="position">middle</PropertyValue>
  </Shortcut>
  <Shortcut to="toolbarbutton" displayName="Paginator Number (Selected)" icon="icons/paginatornumberselected.png">
    <PropertyValue name="fillColor">
      <E>$$controlFaceColor.shaded(0.16129032258064513)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0">2</PropertyValue>
    <PropertyValue name="position">middle</PropertyValue>
  </Shortcut>
  <Shortcut to="toolbarbutton" displayName="Paginator Next" icon="icons/paginatornext.png">
    <PropertyValue name="box">55,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$controlFaceColor.shaded(0.16129032258064513)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Next</PropertyValue>
    <PropertyValue name="position">last</PropertyValue>
  </Shortcut>
  <Shortcut to="textinput" displayName="Input Valid" icon="icons/inputvalid.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-inputvalid-vectorimage0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="textinput" displayName="Input Warning" icon="icons/inputwarning.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-inputwarning-vectorimage0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="textinput" displayName="Input with Clear" icon="icons/inputwithclear.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-inputwithclear-vectorimage0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="commandinput" displayName="Input Config" icon="icons/inputconfig.png">
    <PropertyValue name="box">280,36</PropertyValue>
    <PropertyValue name="fillColor2">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="handle0">239,0</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text1"/>
    <PropertyValue name="text1ImageData">24,24,collection://bitmaps/testfield-inputconfig-text1imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="toolbarbutton" displayName="Toolbar Icon First" icon="icons/toolbariconfirst.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text0ImageData">24,24,collection://bitmaps/testfield-toolbariconfirst-text0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="toolbarbutton" displayName="Toolbar Icon Middle Selected" icon="icons/toolbariconmiddleselected.png">
    <PropertyValue name="fillColor">
      <E>$$controlFaceColor.shaded(0.16129032258064513)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text0ImageData">24,24,collection://bitmaps/testfield-toolbariconmiddleselected-text0imagedata.png</PropertyValue>
    <PropertyValue name="position">middle</PropertyValue>
  </Shortcut>
  <Shortcut to="toolbarbutton" displayName="Toolbar Icon Last" icon="icons/toolbariconlast.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text0ImageData">24,24,collection://bitmaps/testfield-toolbariconlast-text0imagedata.png</PropertyValue>
    <PropertyValue name="position">last</PropertyValue>
  </Shortcut>
  <Shortcut to="avatarsquare" displayName="Avatar Square Mid" icon="icons/avatarsquaremid.png">
    <PropertyValue name="box">70,70</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="avatarsquare" displayName="Avatar Square Small" icon="icons/avatarsquaresmall.png">
    <PropertyValue name="box">50,50</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="avatarrounded" displayName="Avatar Circle Mid" icon="icons/avatarcirclemid.png">
    <PropertyValue name="box">70,70</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="avatarrounded" displayName="Avatar Circle Small" icon="icons/avatarcirclesmall.png">
    <PropertyValue name="box">50,50</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="messagepanel" displayName="Message OK" icon="icons/messageok.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="fillColor2">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-messageok-vectorimage0imagedata.png</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="messagepanel" displayName="Message Error" icon="icons/messageerror.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="fillColor2">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-messageerror-vectorimage0imagedata.png</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="messagepanel" displayName="Message Warning" icon="icons/messagewarning.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="fillColor2">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-messagewarning-vectorimage0imagedata.png</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="messagepanel" displayName="Message Info" icon="icons/messageinfo.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="fillColor2">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://bitmaps/testfield-messageinfo-vectorimage0imagedata.png</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="menuitemmiddle" displayName="Menu with Sub" icon="icons/menuwithsub.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="fillColor2">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="label">Menu with sub-items</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="hasSubMenu">true</PropertyValue>
  </Shortcut>
  <Shortcut to="tabheader" displayName="Tab Header Selected" icon="icons/tabheaderselected.png">
    <PropertyValue name="fillColor">
      <E>$$editableAreaColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="active">true</PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultTextFont.bold(true)</E>
    </PropertyValue>
    <PropertyValue name="text0">Tab Selected</PropertyValue>
  </Shortcut>
  <Shortcut to="tabheader" displayName="Tab Last Hover" icon="icons/tablasthover.png">
    <PropertyValue name="fillColor">
      <E>$$controlFaceColor.shaded(0.16129032258064513)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="last">true</PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Last Tab</PropertyValue>
  </Shortcut>
  <Shortcut to="videoframe" displayName="Video View (small)" icon="icons/videoviewsmall.png">
    <PropertyValue name="box">500,286</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="checkbox" displayName="Checkbox unchecked" icon="icons/checkboxunchecked.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="checked">false</PropertyValue>
  </Shortcut>
  <Shortcut to="radio" displayName="Radio uncheck" icon="icons/radiouncheck.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="checked">false</PropertyValue>
  </Shortcut>
  <Shortcut to="checkbox" displayName="Checkbox disabled" icon="icons/checkboxdisabled.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
    <PropertyValue name="checked">false</PropertyValue>
  </Shortcut>
  <Shortcut to="radio" displayName="Radio disabled" icon="icons/radiodisabled.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
    <PropertyValue name="checked">false</PropertyValue>
  </Shortcut>
  <Shortcut to="button" displayName="Button primary" icon="icons/buttonprimary.png">
    <PropertyValue name="fillColor">
      <E>$$controlFaceColor.shaded(0.16129032258064513)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button" displayName="Button disabled" icon="icons/buttondisabled.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
  </Shortcut>
  <Shortcut to="textinput" displayName="Text input disabled" icon="icons/textinputdisabled.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
  </Shortcut>
  <Shortcut to="toolbarbutton" displayName="Toolbar Icon Middle Disabled" icon="icons/toolbariconmiddledisabled.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text0ImageData">24,24,collection://bitmaps/testfield-toolbariconmiddledisabled-text0imagedata.png</PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
    <PropertyValue name="position">middle</PropertyValue>
  </Shortcut>
  <Shortcut to="progressoutside" displayName="Progress no background" icon="icons/progressnobackground.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="withBackgroundProgress">false</PropertyValue>
  </Shortcut>
  <Shortcut to="progressinside" displayName="Progress inside no background" icon="icons/progressinsidenobackground.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="withBackgroundProgress">false</PropertyValue>
  </Shortcut>
  <Shortcut to="spinner" displayName="Spinner max" icon="icons/spinnermax.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0">100</PropertyValue>
    <PropertyValue name="valueState">max</PropertyValue>
  </Shortcut>
  <Shortcut to="label" displayName="Label disabled" icon="icons/labeldisabled.png">
    <PropertyValue name="box">108,20</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0IconColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
  </Shortcut>
  <Shortcut to="label" displayName="Label h5" icon="icons/labelh5.png">
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultTextFont.resized(0.1333333333333333)</E>
    </PropertyValue>
    <PropertyValue name="text0IconColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="label" displayName="Label h4" icon="icons/labelh4.png">
    <PropertyValue name="box">200,22</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultTextFont.resized(0.2666666666666666)</E>
    </PropertyValue>
    <PropertyValue name="text0IconColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="label" displayName="Label h3" icon="icons/labelh3.png">
    <PropertyValue name="box">200,24</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultTextFont.resized(0.3999999999999999)</E>
    </PropertyValue>
    <PropertyValue name="text0IconColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="label" displayName="Label h2" icon="icons/labelh2.png">
    <PropertyValue name="box">200,29</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultTextFont.resized(0.6000000000000001)</E>
    </PropertyValue>
    <PropertyValue name="text0IconColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="label" displayName="Label h1" icon="icons/labelh1.png">
    <PropertyValue name="box">200,31</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultTextFont.bold(true).resized(0.8666666666666667)</E>
    </PropertyValue>
    <PropertyValue name="text0IconColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="label" displayName="Label huge" icon="icons/labelhuge.png">
    <PropertyValue name="box">229,40</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultTextFont.bold(true).resized(1.2666666666666666)</E>
    </PropertyValue>
    <PropertyValue name="text0IconColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="label" displayName="Paragraph" icon="icons/paragraph.png">
    <PropertyValue name="box">501,81</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="textAlignment">0,0</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis semper dolor. Nunc purus nisi, &lt;span xmlns="http://www.w3.org/1999/xhtml" style="font-weight: bold; color: rgb(255, 0, 0);"&gt;elementum&lt;/span&gt; id. Distinxit  media praeter vultus pro ligavit: persidaque flamma addidit innabilis dissaepser. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</PropertyValue>
    <PropertyValue name="text0IconColor">
      <E>$$themeColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="menubaritem" displayName="Menubar item selected" icon="icons/menubaritemselected.png">
    <PropertyValue name="box">97,50</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$themeColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$lineStyle.condensed(1)</E>
    </PropertyValue>
    <PropertyValue name="selected">true</PropertyValue>
  </Shortcut>
</Shapes>