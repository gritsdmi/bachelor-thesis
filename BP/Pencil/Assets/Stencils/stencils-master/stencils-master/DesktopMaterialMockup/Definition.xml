<Shapes xmlns="http://www.evolus.vn/Namespace/Pencil" id="dgthanhan.MaterialDesktopMockup" displayName="Material Desktop Mockup" author="Dương Thành An" description="Collection of shapes for creating desktop mockup in material style" url="">
  <Script comments="Built-in util script"><![CDATA[
collection.BOUND_CALCULATOR = {
    L: function (box, v) { return (box.x || 0) + v;},
    T: function (box, v) { return (box.y || 0) + v;},
    R: function (box, v) { return (box.x || 0) + box.w - v;},
    B: function (box, v) { return (box.y || 0) + box.h - v;},
    C: function (box, v) { return (box.x || 0) + box.w / 2 + v;},
    M: function (box, v) { return (box.y || 0) + box.h / 2 + v;},
    H0X: function (box, v, h0, h1) {
        return h0.x + v;
    },
    H0Y: function (box, v, h0, h1) {
        return h0.y + v;
    },
    H1X: function (box, v, h0, h1) {
        return h1.x + v;
    },
    H1Y: function (box, v, h0, h1) {
        return h1.y + v;
    },

    calculate: function (box, spec, h0, h1) {
        var matchResult = null;
        if (matchResult = spec.match(/^(([a-zA-Z0-9]+)\.)?([A-Z0-9]*[A-Z])([0-9\-]+)$/)) {
            var bounding = box;
            var targetName = RegExp.$2;
            var func = RegExp.$3;
            var delta = RegExp.$4;
            if (targetName) {
                var shapeNode = Dom.findUpward(F._target, {eval: function (node) {
                    return node.hasAttributeNS && node.getAttributeNS(PencilNamespaces.p, "type") == "Shape";
                }});

                if (shapeNode) {
                    var name = targetName;
                    if (targetName.match(/^text.*/)) name += "text"; //HACK: use text element natural bound

                    var node = Dom.getSingle(".//svg:*[@p:name='" + name + "']", shapeNode);
                    if (node) {
                        var bbox = node.getBBox();
                        if (bbox.width > 0 && bbox.height > 0) {
                            bounding = {
                                x: bbox.x,
                                y: bbox.y,
                                w: bbox.width,
                                h: bbox.height
                            };
                        }
                    }
                }
            }

            return collection.BOUND_CALCULATOR[func](bounding, parseInt(delta, 10), h0, h1);
        }
        return 0;
    }
};
collection.toBounds = function (box, textBounds, h0, h1) {
    var literal = textBounds.value || textBounds.toString();
    var parts = literal.split(",");
    var x = collection.BOUND_CALCULATOR.calculate(box, parts[0], h0, h1);
    var y = collection.BOUND_CALCULATOR.calculate(box, parts[1], h0, h1);
    var w = collection.BOUND_CALCULATOR.calculate(box, parts[2], h0, h1) - x;
    var h = collection.BOUND_CALCULATOR.calculate(box, parts[3], h0, h1) - y;

    return new Bound(x, y, w, h);
};
collection.calculateBoundsFromPolicy = function (box, originalInfo, policy) {
    var hLayout = Group.calculateLayout(originalInfo.x0, originalInfo.w0, originalInfo.gw0, policy.xPolicy, policy.wPolicy, box.w, originalInfo.w0);
    var vLayout = Group.calculateLayout(originalInfo.y0, originalInfo.h0, originalInfo.gh0, policy.yPolicy, policy.hPolicy, box.h, originalInfo.h0);

    return new Bound(Math.round(hLayout.pos), Math.round(vLayout.pos), Math.round(hLayout.size), Math.round(vLayout.size));
};
collection.copyClipboardImage = function (target, imageDataPropName, boxPropName) {
    try {
        var image = clipboard.readImage();
        if (image) {
            var id = Pencil.controller.nativeImageToRefSync(image);

            var size = image.getSize();
            var newImageData = new ImageData(size.width, size.height, ImageData.idToRefString(id));
            target.setProperty(imageDataPropName, newImageData);
            if (boxPropName) target.setProperty(boxPropName, new Dimension(size.width, size.height));
        }
    } catch (e) {
        console.error(e);
    }
};

collection.buildNPatchModel = function (cells, originalSize, newSize) {
    var totalScaleSize = 0;
    for (var cell of cells) totalScaleSize += (cell.to - cell.from);

    var r = (newSize - (originalSize - totalScaleSize)) / totalScaleSize;

    var models = [];
    var total = 0;
    var scaledTotal = 0;
    var last = false;

    //add a sentinel
    cells = cells.concat([{from: originalSize, to: originalSize + 1}]);

    for (var i = 0; i < cells.length; i ++) {
        var cell = cells[i];
        if (cell.from == cell.to) continue;

        var last = (i == cell.length - 2);

        var model = null;
        if (cell.from > total) {
            model = {
                start: total,
                size: cell.from - total,
                scaledStart: scaledTotal,
                scale: false
            };

            models.push(model);
            total = cell.from;
            scaledTotal += model.size;
        }

        if (cell.from >= originalSize) break;

        var scaledSize = (last ? (newSize - (originalSize - cell.to) - scaledTotal) : (r * (cell.to - cell.from)));

        model = {
            start: total,
            size: cell.to - cell.from,
            scaledStart: scaledTotal,
            scaledSize: scaledSize,
            scale: true
        };

        model.r = model.scaledSize / model.size;

        models.push(model);
        total = cell.to;
        scaledTotal += model.scaledSize;
    }

    return models;
};

collection.parsePathData = function (pathDataLiteral) {
    function normalize(pin) {
        pin.x = Math.round(pin.x);
        if (typeof(pin.y) == "number") pin.y = Math.round(pin.y);
    }
    function normalizeAll(pins) {
        for (var pin of pins) normalize(pin);
    }

    function processMultiPoints(points, current, chunk, relative) {
        var count = Math.ceil(points.length / chunk);
        for (var i = 0; i < count; i ++) {
            var pin = points[i * chunk + (chunk - 1)];

            for (var j = 0; j < (chunk - 1); j ++) {
                var p = points[i * chunk + j];
                if (relative) {
                    p.x += current.x;
                    p.y += current.y;
                }

                p.fixed = true;
            }

            normalize(pin);

            if (relative) {
                pin.x += current.x;
                pin.y += current.y;
            }
            current = pin;
        }

        return current;
    }

    //parse the original data
    var RE = /([A-Z])([^A-Z]*)/gi;
    var commands = [];
    var result = null;
    var current = {x: 0, y: 0};
    while ((result = RE.exec(pathDataLiteral))) {
        var c = result[1];
        var command = {
            command: c.toUpperCase()
        };
        var data = result[2].trim();
        if (data) {
            var DATA_RE = /(-?[0-9.]+)(,(-?[0-9.]+))?/g;
            var points = [];
            var result2 = null;
            while ((result2 = DATA_RE.exec(data))) {
                var x = parseFloat(result2[1]);
                var y = result2[3];
                if (y) y = parseFloat(y);
                points.push({
                    x: x,
                    y: y
                });
            }

            if (c == "M" || c == "L" || c == "T") {
                normalizeAll(points);
                command.points = points;
                current = points[points.length - 1];
            } else if (c == "m" || c == "l" || c == "t") {
                for (var p of points) {
                    p.x += current.x;
                    p.y += current.y;

                    current = p;
                }
                normalizeAll(points);
                command.points = points;
            } else if (c == "H") {
                for (var p of points) {
                    console.log("HX:", p.x);
                    p.y = current.y;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "h") {
                for (var p of points) {
                    p.x += current.x;
                    p.y = current.y;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "V") {
                for (var p of points) {
                    p.y = p.x;
                    p.x = current.x;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "v") {
                for (var p of points) {
                    p.y = p.x + current.y;
                    p.x = current.x;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "c" || c == "C") {
                current = processMultiPoints(points, current, 3, c == "c");
                command.points = points;
            } else if (c == "s" || c == "S") {
                current = processMultiPoints(points, current, 2, c == "s");

                command.points = points;
            } else if (c == "q" || c == "Q") {
                current = processMultiPoints(points, current, 2, c == "q");
                command.points = points;
            } else if ((c == "a" || c == "A") && points.length == 5) {
                for (var p of points) {
                    p.fixed = true;
                    p.noRelativeRecalcuate = true;
                    console.log("p.y", p.y);
                }
                var pin = points[4];
                pin.fixed = false;
                pin.noRelativeRecalcuate = false;
                if (c == "a") {
                    pin.x += current.y;
                    pin.y += current.y;
                }
                current = pin;

                normalizeAll(points);
                command.points = points;
                command.command = "A";
            }
        }

        commands.push(command);
    }

    return commands;

};

collection.calculateScaledPosition = function (value, models) {
    if (!models || models.length == 0) return value;
    var m = null;

    if (value < models[0].start) {
        m = models[0];
    } else {
        for (var model of models) {
            if (model.start <= value && value < (model.start + model.size)) {
                m = model;
                break;
            }
        }

        if (!m) m = models[models.length - 1];
    }

    if (m) {
        var d = value - m.start;

        if (m.scale) d *= m.r;

        return d + m.scaledStart;
    }

    return value;
};


collection.scalePathData = function (pathCommands, xCells, yCells, originalSize, newSize) {
    xCells = xCells || [];
    yCells = yCells || [];

    var xModel = collection.buildNPatchModel(xCells, originalSize.w, newSize.w);
    var yModel = collection.buildNPatchModel(yCells, originalSize.h, newSize.h);

    var newData = "";

    for (var command of pathCommands) {
        if (command.points) {
            var last = -1;
            for (var i = 0; i < command.points.length; i ++) {
                var pin = command.points[i];
                if (pin.fixed) {
                    continue;
                }

                var x = collection.calculateScaledPosition(pin.x, xModel);
                var y = collection.calculateScaledPosition(pin.y, yModel);

                for (var j = last + 1; j < i; j ++) {
                    if (command.points[j].noRelativeRecalcuate) continue;
                    command.points[j].x = x + command.points[j].x - pin.x;
                    if (typeof(command.points[j].y) == "number") command.points[j].y = y + command.points[j].y - pin.y;
                }

                pin.x = x;
                pin.y = y;
                last = i;
            }
        }

        if (newData) newData += " ";
        newData += command.command;
        if (command.points) {
            for (var i = 0; i < command.points.length; i ++) {
                var y = command.points[i].y;
                newData += (i > 0 ? " " : "") + command.points[i].x + (typeof(y) == "number" ? ("," + y) : "");
            }
        }
    }

    return newData;
};
collection.generatePathDOM = function (svgPathData, size, keepPathStyle) {
    var specs = [];
    var json = svgPathData.data;
    if (!json.startsWith("json:")) return specs;
    var parsedPathData = JSON.parse(json.substring(5));

    for (var info of parsedPathData) {
        var d = collection.scalePathData(info.commands, svgPathData.xCells, svgPathData.yCells, svgPathData, size);
        specs.push({
            _name: "path",
            _uri: PencilNamespaces.svg,
            d: d,
            style: keepPathStyle ? info.style : ""
        });
    }

    return Dom.newDOMFragment(specs);
};
collection.generateAdvancedRectPathData = function (box, strokeStyle, r, withTop, withRight, withBottom, withLeft, withTopLeftCorner, withTopRightCorner, withBottomRightCorner, withBottomLeftCorner) {
    var x = r * 4 * (Math.sqrt(2) - 1) / 3;
    var w = box.w - strokeStyle.w * ((withLeft ? 0.5 : 0) + (withRight ? 0.5 : 0));
    var h = box.h - strokeStyle.w * ((withTop ? 0.5 : 0) + (withBottom ? 0.5 : 0));
    var parts = [
    ];
    var close = true;
    if (withTop) {
        parts.push(L(w - (withRight && withTopRightCorner ? r : 0),0));
        if (withRight && withTopRightCorner && r > 0) parts.push(c(x,0,r,r-x,r,r));
    } else {
        parts.push(M(w,0));
        close = false;
    }

    if (withRight) {
        parts.push(L(w,h - (withBottom && withBottomRightCorner ? r : 0)));
        if (withBottom && withBottomRightCorner && r > 0) parts.push(c(0,x,x-r,r,0-r,r));
    } else {
        parts.push(M(w,h));
        close = false;
    }

    if (withBottom) {
        parts.push(L(withLeft && withBottomLeftCorner ? r : 0,h));
        if (withLeft && withBottomLeftCorner && r > 0) parts.push(c(x-r,0,0-r,x-r,0-r,0-r));
    } else {
        parts.push(M(0,h));
        close = false;
    }

    if (withLeft) {
        parts.push(L(0,withTop && withTopLeftCorner ? r : 0));
        if (withTop && withTopLeftCorner && r > 0) parts.push(c(0,0-x,r-x,0-r,r,0-r));
    } else {
        parts.push(M(0,0));
        close = false;
    }

    if (close) parts.push(z);

    var firstMove = -1;
    for (var i = 0; i < parts.length; i ++) {
        if (parts[i].indexOf("M") == 0) {
            firstMove = i;
            break;
        }
    }

    if (firstMove > 0) {
        while (firstMove > 0) {
            parts.push(parts.shift());
            firstMove --;
        }
    } else {
        parts.unshift(M(withLeft ? r : 0,0));
    }

    return parts;
};
collection.toColorizedDOMNode = function (svgXML, color) {
    if (!svgXML) return document.createDocumentFragment();

    var svg = Dom.parseDocument(svgXML);

    if (color) {
        var c = color.toRGBAString();
        Dom.workOn("//svg:*", svg, function (node) {
            if (node.style.fill != "none") {
                node.style.fill = c;
            }
            if (node.style.stroke && node.style.stroke != "none") {
                node.style.stroke = c;
            }

            var a = node.getAttribute("fill");
            if (a != "none") node.setAttribute("fill", c);

            a = node.getAttribute("stroke");
            if (a && a != "none") node.setAttribute("stroke", c);
        });
    }

    var g = svg.createElementNS(PencilNamespaces.svg, "g");
    while (svg.documentElement.firstChild) {
        var child = svg.documentElement.firstChild;
        svg.documentElement.removeChild(child);
        g.appendChild(child);
    }

    return g;
};
]]></Script>
  <Properties>
    <PropertyGroup name="Collection Properties">
      <Property name="primaryContentColor" displayName="Primary Content Color" type="Color">#00BCD4FF</Property>
      <Property name="invertedContentColor" displayName="Inverted Content Color" type="Color">#FFFFFFFF</Property>
      <Property name="defaultStrokeStyle" displayName="Default Line Style" type="StrokeStyle">1|</Property>
      <Property name="defaultFont" displayName="Default Font" type="Font">Android Roboto|normal|normal|16px|none|0</Property>
      <Property name="defaultTextColor" displayName="Default Text Color" type="Color">#000000FF</Property>
      <Property name="formBackground" displayName="Form Color" type="Color">#EEEEEEFF</Property>
      <Property name="problemContentColor" displayName="Problem Content Color" type="Color">#FF6666FF</Property>
      <Property name="secondaryContentColor" displayName="Problem Content Color" type="Color">#FF9900FF</Property>
    </PropertyGroup>
  </Properties>
  <Shape id="inputtext" displayName="Input Text" icon="icons/inputtext.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$formBackground.shaded(0.13978494623655913)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|0|0.2</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:36,&quot;w0&quot;:190,&quot;h0&quot;:26,&quot;x0&quot;:5,&quot;y0&quot;:5}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Input</Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Icon)" type="ImageData">24,24,collection://vectors/inputtext-vectorimage0.svg</Property>
        <Property name="iconColor" displayName="Icon Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="Caret Position" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true" p:disabled="!$withCaret.value" p:noScale="true">5,0</Property>
        <Property name="withCaret" displayName="With Caret" type="Bool">false</Property>
        <Property name="leftRoundedCorners" displayName="With left rounded corners" type="Bool">true</Property>
        <Property name="rightRoundedCorners" displayName="With right rounded corners" type="Bool">true</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("2,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":36,"w0":200,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("2,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, $leftRoundedCorners.value, $rightRoundedCorners.value, $rightRoundedCorners.value, $leftRoundedCorners.value); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":36,"w0":200,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="pathRect0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="text1text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":36,"w0":190,"h0":26,"x0":5,"y0":5}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":36,"w0":22,"h0":22,"x0":171,"y0":7}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $iconColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.toBounds($box, "H0X0,T6,H0X1,B6", $handle0)).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$withCaret.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0BrowseFile" displayName="Select Vector Image from File for Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Icon">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":36,"w0":200,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="pathRect0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="pathRect0_globalGroup" p:filter="url(#pathRect0_shadowFilter)">
        <path p:filter="url(#a51f7861eb2b488b975da94c99a3118b)" id="pathRect0" d="M 2 0 L 197 0 c 1.1045694996615871 0 2 0.8954305003384129 2 2 L 199 33 c 0 1.1045694996615871 -0.8954305003384129 2 -2 2 L 2 35 c -0.8954305003384129 0 -2 -0.8954305003384129 -2 -2 L 0 2 c 0 -1.1045694996615871 0.8954305003384129 -2 2 -2 z" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(204, 204, 204); stroke-opacity: 1; stroke-width: 1;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#39c3d9143a3546acb45e82a555b33af2)" id="text1text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#01fff17dc85d4f1e9abff120b119a175)" id="rectangle1" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.870588; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="1" height="20"/>
    </Content>
  </Shape>
  <Shape id="button2" displayName="Button2" icon="icons/button2.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$formBackground.shaded(0.13978494623655913)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|1.5|0</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.bolder(100)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:120,&quot;gh0&quot;:36,&quot;w0&quot;:120,&quot;h0&quot;:36,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">BUTTON</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="leftRoundedCorners" displayName="With left rounded corners" type="Bool">true</Property>
        <Property name="rightRoundedCorners" displayName="With right rounded corners" type="Bool">true</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("2,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":120,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("2,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, $leftRoundedCorners.value, $rightRoundedCorners.value, $rightRoundedCorners.value, $leftRoundedCorners.value); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":120,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="pathRect0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.5 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.2 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":120,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.5 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.2 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":120,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Button Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0BrowseFile" displayName="Select Vector Image from File for Button Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("text0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Button Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_text0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":120,"gh0":36,"w0":120,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_text0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_text0, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_text0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_text0, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_text0, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_text0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_text0, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_text0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_text0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_text0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="pathRect0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="pathRect0_globalGroup" p:filter="url(#pathRect0_shadowFilter)">
        <path p:filter="url(#fbbd96ce92e540f8a81a35f9ea109ff5)" id="pathRect0" d="M 2 0 L 118 0 c 1.1045694996615871 0 2 0.8954305003384129 2 2 L 120 34 c 0 1.1045694996615871 -0.8954305003384129 2 -2 2 L 2 36 c -0.8954305003384129 0 -2 -0.8954305003384129 -2 -2 L 0 2 c 0 -1.1045694996615871 0.8954305003384129 -2 2 -2 z" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(204, 204, 204); stroke-opacity: 1; stroke-width: 0;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#edfa81b7bf9545b6970f4d767c1b8910)" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="radio2" displayName="Radio 2" icon="icons/radio2.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">124,24</Property>
        <Property name="fillColor" displayName="On State Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (On State)" type="ImageData" p:disabled="true">24,24,collection://vectors/radio2-vectorimage0.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (vectorImage1)" type="ImageData" p:disabled="true">24,24,collection://vectors/radio2-vectorimage1.svg</Property>
        <Property name="checked" displayName="Checked" type="Bool">true</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage2ImageData" displayName="Image Data (vectorImage2)" type="ImageData" p:disabled="true">24,24,collection://vectors/radio2-vectorimage2.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage3ImageData" displayName="Image Data (vectorImage3)" type="ImageData" p:disabled="true">24,24,collection://vectors/radio2-vectorimage3.svg</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:124,&quot;gh0&quot;:24,&quot;w0&quot;:96.2097152,&quot;h0&quot;:24,&quot;x0&quot;:27.79029083251953,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Radio button</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$checked.value && !$disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $fillColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Visibility>
          <Arg><![CDATA[!$checked.value && !$disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), Color.fromString("#0000008A"))]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage2">
        <Visibility>
          <Arg><![CDATA[!$checked.value && $disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage2ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage2Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage2ImageData).getDataAsXML(), Color.fromString("#00000042"))]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage3">
        <Visibility>
          <Arg><![CDATA[$checked.value && $disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage3ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage3Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage3ImageData).getDataAsXML(), Color.fromString("#00000042"))]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$disabled.value ? $textColor.hollowed(0.4) : $textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$disabled.value ? $textColor.hollowed(0.4) : $textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":96.2097152,"h0":24,"x0":27.79029083251953,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#5463caa16a4243ea89a56127bc2525a1)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="24" height="24"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage2">
        <g id="vectorImage2Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage3">
        <g id="vectorImage3Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#eef14ff5cbe649299ebbb5429140dcb8)" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="checkbox2" displayName="Checkbox 2" icon="icons/checkbox2.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="checked" displayName="Checked" type="Bool">true</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property name="box" displayName="box" type="Dimension">124,24</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:124,&quot;gh0&quot;:24,&quot;w0&quot;:96.2097152,&quot;h0&quot;:24,&quot;x0&quot;:27.79029083251953,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Checkbox</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="fillColor" displayName="On State Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (On State)" type="ImageData" p:disabled="true">24,24,collection://vectors/checkbox2-vectorimage0.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (vectorImage1)" type="ImageData" p:disabled="true">24,24,collection://vectors/checkbox2-vectorimage1.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage2ImageData" displayName="Image Data (vectorImage2)" type="ImageData" p:disabled="true">24,24,collection://vectors/checkbox2-vectorimage2.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage3ImageData" displayName="Image Data (vectorImage3)" type="ImageData" p:disabled="true">24,24,collection://vectors/checkbox2-vectorimage3.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$disabled.value ? $textColor.hollowed(0.4) : $textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$disabled.value ? $textColor.hollowed(0.4) : $textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":96.2097152,"h0":24,"x0":27.79029083251953,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$checked.value && !$disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $fillColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Visibility>
          <Arg><![CDATA[!$checked.value && !$disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), Color.fromString("#0000008A"))]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage2">
        <Visibility>
          <Arg><![CDATA[!$checked.value && $disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage2ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage2Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage2ImageData).getDataAsXML(), Color.fromString("#00000042"))]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage3">
        <Visibility>
          <Arg><![CDATA[$checked.value && $disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":124,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage3ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage3Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage3ImageData).getDataAsXML(), Color.fromString("#00000042"))]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#22bdae9ce2b74330ae9c1b2f0ee3b33b)" id="text0text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#f00390d2b42d496eab0b0c158a3f718b)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="24" height="24"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage2">
        <g id="vectorImage2Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage3">
        <g id="vectorImage3Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="dialog" displayName="Dialog" icon="icons/dialog.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">500,600</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$formBackground</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|4|7|0.4</Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData">24,24,collection://vectors/dialog-vectorimage0.svg</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.bolder(100)</E>
        </Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$formBackground.shaded(0.4193548387096774)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:500,&quot;gh0&quot;:600,&quot;w0&quot;:449,&quot;h0&quot;:24,&quot;x0&quot;:11,&quot;y0&quot;:10}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: $textAlignment,richText: true})">Dialog Title</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":600,"w0":500,"h0":600,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("5,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":600,"w0":24,"h0":24,"x0":468,"y0":10}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), Color.fromString("#FF0000A3"))]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":600,"w0":449,"h0":24,"x0":12,"y0":11}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text1text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":600,"w0":449,"h0":24,"x0":11,"y0":10}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#00000012")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":600,"w0":500,"h0":1,"x0":0,"y0":42}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":600,"w0":500,"h0":1,"x0":0,"y0":42}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF38")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":600,"w0":500,"h0":1,"x0":0,"y0":43}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":500,"gh0":600,"w0":500,"h0":1,"x0":0,"y0":43}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for vectorImage0..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0BrowseFile" displayName="Select Vector Image from File for vectorImage0..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove vectorImage0">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":500,"gh0":600,"w0":500,"h0":600,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L20"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T62"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R20"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B20"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle0_globalGroup" p:filter="url(#rectangle0_shadowFilter)">
        <rect p:filter="url(#85baca7bc6f04a26a2b866387f08be21)" id="rectangle0" rx="5" ry="5" style="fill: rgb(238, 238, 238); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="500" height="600"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#598c6029444244a99c69775082cafb7e)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#72ee1d52f33d46f0a853c4cf84c2c92b)" id="text1text" dominant-baseline="auto"/>
      <path xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#2ca022a8cd24418cbda2d952c6846609)" id="pathRect0" d="M 0 0 L 500 0 L 500 1 L 0 1 L 0 0 z" style="fill: rgb(0, 0, 0); fill-opacity: 0.0705882; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
      <path xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#e4238dc15a4042159b23522479a88576)" id="pathRect1" d="M 0 0 L 500 0 L 500 1 L 0 1 L 0 0 z" style="fill: rgb(255, 255, 255); fill-opacity: 0.219608; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
    </Content>
  </Shape>
  <Shape id="datatablecell" displayName="DataTable Cell" icon="icons/datatablecell.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,48</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$formBackground.shaded(0.13978494623655913)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://vectors/datatablecell-vectorimage0.svg</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:48,&quot;w0&quot;:120,&quot;h0&quot;:30,&quot;x0&quot;:47,&quot;y0&quot;:9}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Text Content</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="text0IconColor" displayName="Text Icon Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="fillColor2" displayName="Other Checkbox Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="CheckboxImageData" displayName="Image Data (Checkbox)" type="ImageData" p:disabled="true">24,24,collection://vectors/datatablecell-checkbox.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="checkMode" displayName="Check Box Mode" type="Enum" p:enumValues="['checked|Checked', 'unchecked|Unchecked', 'none|None']">checked</Property>
        <Property name="trailingIconImageData" displayName="Image Data (Trailing Icon)" type="ImageData">24,24,collection://vectors/datatablecell-trailingicon.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="textPadding" displayName="textPadding" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true" p:disabled="$checkMode.value != 'none'">0,0</Property>
        <Property name="top" displayName="Top Border" type="Bool">true</Property>
        <Property name="left" displayName="Left Border" type="Bool">true</Property>
        <Property name="bottom" displayName="Bottom Border" type="Bool">false</Property>
        <Property name="right" displayName="Right Border" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, $top.value, $right.value, $bottom.value, $left.value, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate((($left.value) ? (s.w / 2) : 0) + b.x, (($top.value) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$checkMode.value == 'unchecked']]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":24,"h0":24,"x0":13,"y0":12}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), Color.fromString("#606060FF"))]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.2 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.3333 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }((function (bound) {
if ($checkMode.value == 'none') {
bound.x = bound.x - 42 + $textPadding.x;
bound.w = bound.w + 42 - $textPadding.x;
}
if ($trailingIconImageData.w <= 0) {
bound.w += 18;
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":120,"h0":30,"x0":47,"y0":9}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.2 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.3333 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }((function (bound) {
if ($checkMode.value == 'none') {
bound.x = bound.x - 42 + $textPadding.x;
bound.w = bound.w + 42 - $textPadding.x;
}
if ($trailingIconImageData.w <= 0) {
bound.w += 18;
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":120,"h0":30,"x0":47,"y0":9}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $text0IconColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="Checkbox">
        <Visibility>
          <Arg><![CDATA[$checkMode.value == 'checked']]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":24,"h0":24,"x0":13,"y0":12}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($CheckboxImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="CheckboxImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($CheckboxImageData).getDataAsXML(), $fillColor2)]]></Arg>
        </DomContent>
      </For>
      <For ref="trailingIcon">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":18,"h0":18,"x0":172,"y0":15}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($trailingIconImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="trailingIconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($trailingIconImageData).getDataAsXML(), Color.fromString("#0000008A"))]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0BrowseFile" displayName="Select Vector Image from File for Text Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("text0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="trailingIconBrowse" displayName="Select Resource Images for Trailing Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("trailingIconImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="trailingIconBrowseFile" displayName="Select Vector Image from File for Trailing Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("trailingIconImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="trailingIconRemove" displayName="Remove Trailing Icon">
        <Impl><![CDATA[this.setProperty("trailingIconImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#e1b93197d3fc4a0aa31002a410dcf363)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="200" height="48"/>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <path xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#d0b160f63ca645de8850c9fd2b6d7819)" id="pathRect0" d="M 199.5 47.5 M 0 47.5 L 0 0 L 199.5 0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(204, 204, 204); stroke-opacity: 1; stroke-width: 1;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#c8071444c85e4a1cab7393fa8e686f47)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="Checkbox">
        <g id="CheckboxImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="trailingIcon">
        <g id="trailingIconImage" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="combobox" displayName="Combo Box" icon="icons/combobox.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$formBackground</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$formBackground.shaded(0.19354838709677424)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|1.5|0</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:120,&quot;gh0&quot;:36,&quot;w0&quot;:85,&quot;h0&quot;:36,&quot;x0&quot;:10,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Combo</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="leftRoundedCorners" displayName="With left rounded corners" type="Bool">true</Property>
        <Property name="rightRoundedCorners" displayName="With right rounded corners" type="Bool">true</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://vectors/combobox-vectorimage0.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("2,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":120,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("2,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, $leftRoundedCorners.value, $rightRoundedCorners.value, $rightRoundedCorners.value, $leftRoundedCorners.value); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":120,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="pathRect0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.5 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.5 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":85,"h0":36,"x0":10,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.5 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.5 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":85,"h0":36,"x0":10,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":24,"h0":24,"x0":94,"y0":6}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Button Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0BrowseFile" displayName="Select Vector Image from File for Button Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("text0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Button Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="pathRect0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="pathRect0_globalGroup" p:filter="url(#pathRect0_shadowFilter)">
        <path p:filter="url(#2bb1f47594f24b33b7c933fe1821e677)" id="pathRect0" d="M 2 0 L 117 0 c 1.1045694996615871 0 2 0.8954305003384129 2 2 L 119 33 c 0 1.1045694996615871 -0.8954305003384129 2 -2 2 L 2 35 c -0.8954305003384129 0 -2 -0.8954305003384129 -2 -2 L 0 2 c 0 -1.1045694996615871 0.8954305003384129 -2 2 -2 z" style="fill: rgb(238, 238, 238); fill-opacity: 1; stroke: rgb(192, 192, 192); stroke-opacity: 1; stroke-width: 1;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#1b00f44555b04fbeb283902a84032b71)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="rectangle" displayName="Rectangle" icon="icons/rectangle.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,100</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(1)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="radius" displayName="Corner Radius" type="Handle" p:minX="(collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:100,&quot;w0&quot;:200,&quot;h0&quot;:100,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).x" p:lockY="true" p:maxX="(collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:100,&quot;w0&quot;:200,&quot;h0&quot;:100,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).x + Math.round((collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:100,&quot;w0&quot;:200,&quot;h0&quot;:100,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).w / 2)">0,0</Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|0|1</Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="topLeftCorner" displayName="Rounded Top-Left Corner" type="Bool">true</Property>
        <Property name="topRightCorner" displayName="Rounded Top-Right Corner" type="Bool">true</Property>
        <Property name="bottomRightCorner" displayName="Rounded Bottom-Right Corner" type="Bool">true</Property>
        <Property name="bottomLeftCorner" displayName="Rounded Bottom-Left Corner" type="Bool">true</Property>
        <Property name="topBorder" displayName="Top Border" type="Bool">true</Property>
        <Property name="rightBorder" displayName="Right Border" type="Bool">true</Property>
        <Property name="bottomBorder" displayName="Bottom Border" type="Bool">true</Property>
        <Property name="leftBorder" displayName="Left Border" type="Bool">true</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="padding" displayName="padding" type="Handle" p:minY="0" p:maxY="$box.h" p:lockX="true" p:noScale="true">0,10</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: Bound.fromBox($box, $padding.y),font: $textFont,align: $textAlignment,richText: true})"/>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$fillColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, ($radius).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":100,"w0":200,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = $radius;
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, $topLeftCorner.value && $topBorder.value && $leftBorder.value, $topRightCorner.value && $topBorder.value && $rightBorder.value, $bottomRightCorner.value && $bottomBorder.value && $rightBorder.value, $bottomLeftCorner.value && $bottomBorder.value && $leftBorder.value); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":100,"w0":200,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="pathRect0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, ($radius).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":100,"w0":200,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = $radius;
return collection.generateAdvancedRectPathData(b, s, r.x, $topBorder.value, $rightBorder.value, $bottomBorder.value, $leftBorder.value, $topLeftCorner.value, $topRightCorner.value, $bottomRightCorner.value, $bottomLeftCorner.value); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":100,"w0":200,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate((($leftBorder.value) ? (s.w / 2) : 0) + b.x, (($topBorder.value) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[Bound.fromBox($box, $padding.y)]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(Bound.fromBox($box, $padding.y)).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect1 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":100,"w0":200,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#5d5a5610417a4263bdc68f559e65ec64)" id="rectangle0" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.109804; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="100" width="200"/>
        </clipPath>
      </defs>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="pathRect0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="pathRect0_globalGroup" p:filter="url(#pathRect0_shadowFilter)">
        <path p:filter="url(#b37850cb7f7e421d9a3b1a4b36b32630)" id="pathRect0" d="M 0 0 L 198 0 L 198 98 L 0 98 L 0 0 z" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 2;"/>
      </g>
      <path xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#899cd5b5d7d640c5a331ccef0a579ad9)" id="pathRect1" d="M 0 0 L 198 0 L 198 98 L 0 98 L 0 0 z" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 188, 212); stroke-opacity: 1; stroke-width: 2;"/>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <g xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#007582fad85a43a2981ea6d2dfc502df)" id="text0text" dominant-baseline="auto"/>
      </g>
    </Content>
  </Shape>
  <Shape id="image" displayName="Image" icon="icons/image.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">160,160</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$formBackground.shaded(0.13978494623655913)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|0|1</Property>
        <Property name="bitmap0ImageData" displayName="Image Data (Image)" type="ImageData">255,197,collection://bitmaps/image-bitmap0.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="radiusHandle" displayName="radiusHandle" type="Handle" p:minX="0" p:maxX="$box.w / 2" p:lockY="true">18,0</Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":160,"w0":160,"h0":160,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($radiusHandle.x, $radiusHandle.x)).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="bitmap0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":160,"w0":160,"h0":160,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}));
var imageData = ($bitmap0ImageData);

[translate(bound.x, bound.y), scale(imageData.w <= 0 ? 1 : bound.w / imageData.w, imageData.h <= 0 ? 1 : bound.h / imageData.h)];]]></Arg>
        </Transform>
      </For>
      <For ref="bitmap0image">
        <Image>
          <Arg><![CDATA[$bitmap0ImageData]]></Arg>
        </Image>
      </For>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":160,"w0":160,"h0":160,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#00000054")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($radiusHandle.x, $radiusHandle.x)).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":160,"w0":160,"h0":160,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($radiusHandle.x, $radiusHandle.x)).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="bitmap0CopyClipboard" displayName="Use Clipboard Data as Image">
        <Impl><![CDATA[this.def.collection.copyClipboardImage(this, "bitmap0ImageData");]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0Browse" displayName="Select Resource Images for Image..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_BITMAP, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("bitmap0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0BrowseFile" displayName="Select Bitmap from File for Image..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("bitmap0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="bitmap0Remove" displayName="Remove Image">
        <Impl><![CDATA[this.setProperty("bitmap0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="avatarClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#fe49b4ac25224a65a2f7940fabe52665)" id="rectangle3" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.329412; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="160" width="160"/>
        </clipPath>
      </defs>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle0_globalGroup" p:filter="url(#rectangle0_shadowFilter)">
        <rect p:filter="url(#7ef8f708e03f40e6847b30cec2c9f08e)" id="rectangle0" rx="0" ry="0" style="fill: rgb(204, 204, 204); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="160" width="160"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#avatarClipPath);">
        <g id="bitmap0">
          <image id="bitmap0image" x="0" y="0"/>
        </g>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#b4d72212b91f46fc8ffaab5a8cef11ee)" id="rectangle2" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="160" width="160"/>
    </Content>
  </Shape>
  <Shape id="vector" displayName="Vector" icon="icons/vector.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">160,160</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$formBackground.shaded(0.13978494623655913)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|0|1</Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Vector Image)" type="ImageData">16,16,collection://vectors/vector-vectorimage0.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="radiusHandle" displayName="radiusHandle" type="Handle" p:minX="0" p:maxX="$box.w / 2" p:lockY="true">0,0</Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="padding" displayName="padding" type="Handle" p:minY="0" p:maxY="$box.h / 2" p:lockX="true">0,21</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":160,"w0":160,"h0":160,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($radiusHandle.x, $radiusHandle.x)).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
bound.x += $padding.y;
bound.y += $padding.y;
bound.w -= 2 * $padding.y;
bound.h -= 2 * $padding.y;

return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":160,"w0":160,"h0":160,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":160,"w0":160,"h0":160,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#00000054")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($radiusHandle.x, $radiusHandle.x)).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":160,"w0":160,"h0":160,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($radiusHandle.x, $radiusHandle.x)).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Vector Image..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0BrowseFile" displayName="Select Vector Image from File for Vector Image..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Vector Image">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="avatarClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#3b9aa432343d4f09ac7faf8caee118f6)" id="rectangle3" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.329412; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="160" width="160"/>
        </clipPath>
      </defs>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle0_globalGroup" p:filter="url(#rectangle0_shadowFilter)">
        <rect p:filter="url(#f715981fabd6418db9dba3806dae4f1d)" id="rectangle0" rx="0" ry="0" style="fill: rgb(204, 204, 204); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="160" width="160"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#avatarClipPath);">
        <g id="vectorImage0">
          <g id="vectorImage0Image" x="0" y="0"/>
        </g>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#c3d5783280f647738e8d749d73360958)" id="rectangle2" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="160" width="160"/>
    </Content>
  </Shape>
  <Shape id="paginator" displayName="Paginator" icon="icons/paginator.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">258,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$formBackground.shaded(0.032258064516129004)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:258,&quot;gh0&quot;:36,&quot;w0&quot;:36,&quot;h0&quot;:36,&quot;x0&quot;:37,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;relative&quot;,&quot;yPolicy&quot;:&quot;relative&quot;,&quot;wPolicy&quot;:&quot;relative&quot;,&quot;hPolicy&quot;:&quot;relative&quot;}),font: $textFont,align: $textAlignment,richText: true})">1</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://vectors/paginator-vectorimage0.svg</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text2" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text2text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:258,&quot;gh0&quot;:36,&quot;w0&quot;:36,&quot;h0&quot;:36,&quot;x0&quot;:74,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;relative&quot;,&quot;yPolicy&quot;:&quot;relative&quot;,&quot;wPolicy&quot;:&quot;relative&quot;,&quot;hPolicy&quot;:&quot;relative&quot;}),font: $textFont,align: $textAlignment,richText: true})">2</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text3" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text3text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:258,&quot;gh0&quot;:36,&quot;w0&quot;:36,&quot;h0&quot;:36,&quot;x0&quot;:111,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;relative&quot;,&quot;yPolicy&quot;:&quot;relative&quot;,&quot;wPolicy&quot;:&quot;relative&quot;,&quot;hPolicy&quot;:&quot;relative&quot;}),font: $textFont,align: $textAlignment,richText: true})">3</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text4" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text4text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:258,&quot;gh0&quot;:36,&quot;w0&quot;:36,&quot;h0&quot;:36,&quot;x0&quot;:148,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;relative&quot;,&quot;yPolicy&quot;:&quot;relative&quot;,&quot;wPolicy&quot;:&quot;relative&quot;,&quot;hPolicy&quot;:&quot;relative&quot;}),font: $textFont,align: $textAlignment,richText: true})">4</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text5" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text5text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:258,&quot;gh0&quot;:36,&quot;w0&quot;:36,&quot;h0&quot;:36,&quot;x0&quot;:185,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;relative&quot;,&quot;yPolicy&quot;:&quot;relative&quot;,&quot;wPolicy&quot;:&quot;relative&quot;,&quot;hPolicy&quot;:&quot;relative&quot;}),font: $textFont,align: $textAlignment,richText: true})">5</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (vectorImage1)" type="ImageData" p:disabled="true">24,24,collection://vectors/paginator-vectorimage1.svg</Property>
        <Property name="selectedColor" displayName="Selected Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="selected" displayName="Selected At" type="Enum" p:enumValues="['first|First', 'middle|Middle', 'last|Last']">first</Property>
        <Property name="selectedTextColor" displayName="Selected Text Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage2ImageData" displayName="Image Data (vectorImage2)" type="ImageData" p:disabled="true">24,24,collection://vectors/paginator-vectorimage2.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("3,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":222,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle;
var r = Handle.fromString("3,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, false, true, true, false); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":222,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("3,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle;
var r = Handle.fromString("3,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, false, false, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":37,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$selected.value == 'first' ? $selectedColor: $fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text1text">
        <Fill>
          <Arg><![CDATA[$selected.value == 'first' ? $selectedTextColor: $textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$selected.value == 'first' ? $selectedTextColor: $textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":37,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":18,"h0":18,"x0":9,"y0":9}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $selected.value == 'first' ? $textColor.hollowed(0.8): $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":74,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text2text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text2]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":74,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":111,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$selected.value == 'middle' ? $selectedColor: $fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text3text">
        <Fill>
          <Arg><![CDATA[$selected.value == 'middle' ? $selectedTextColor: $textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$selected.value == 'middle' ? $selectedTextColor: $textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text3]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":111,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle4">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":148,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text4text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text4]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":148,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle5">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":185,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$selected.value == 'last' ? $selectedColor: $fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text5text">
        <Fill>
          <Arg><![CDATA[$selected.value == 'last' ? $selectedTextColor: $textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$selected.value == 'last' ? $selectedTextColor: $textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text5]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":36,"h0":36,"x0":185,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vectorImage1">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":18,"h0":18,"x0":231,"y0":9}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), $selected.value == 'last' ? $textColor.hollowed(0.8): $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage2">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":36,"w0":18,"h0":18,"x0":9,"y0":9}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"}));

var imageData = ($vectorImage2ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage2Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage2ImageData).getDataAsXML(), $selected.value == 'first' ? $textColor.hollowed(0.8): $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#850f7b4e05054b5ba2dcdebf2ca491e8)" id="pathRect1" d="M 3 0 L 33 0 c 1.6568542494923806 0 3 1.3431457505076194 3 3 L 36 33 c 0 1.6568542494923806 -1.3431457505076194 3 -3 3 L 3 36 c -1.3431457505076194 0 -3 -1.3431457505076194 -3 -3 L 0 3 c 0 -1.6568542494923806 1.3431457505076194 -3 3 -3 z" style="fill: rgb(229, 229, 229); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
      <path xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#354cfa3acf1443f885d297c14a98e751)" id="pathRect0" d="M 3 0 L 33 0 c 1.6568542494923806 0 3 1.3431457505076194 3 3 L 36 33 c 0 1.6568542494923806 -1.3431457505076194 3 -3 3 L 3 36 c -1.3431457505076194 0 -3 -1.3431457505076194 -3 -3 L 0 3 c 0 -1.6568542494923806 1.3431457505076194 -3 3 -3 z" style="fill: rgb(229, 229, 229); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#5d3e4229caea4b63bbbf867f480f574f)" id="rectangle1" rx="0" ry="0" style="fill: rgb(229, 229, 229); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="36" height="36"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#6c61a81ce8854efda339122f5dc2515f)" id="text1text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#28edbf51d8af4cc68e66e6ff8644305c)" id="rectangle2" rx="0" ry="0" style="fill: rgb(229, 229, 229); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="36" height="36"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#712e2aeb8890439dbdb1e2517d89ee5b)" id="text2text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#6e7147a3f5a341dbbc315cbcbf29c1c6)" id="rectangle3" rx="0" ry="0" style="fill: rgb(229, 229, 229); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="36" height="36"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#e8d75418345b492980f117e043db423e)" id="text3text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#38e772ed82fb4362af42cef5409651e4)" id="rectangle4" rx="0" ry="0" style="fill: rgb(229, 229, 229); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="36" height="36"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#3817b18f53f74a59912a24be21260183)" id="text4text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#eb3fc080d8c54309abd80b5ffb7f948b)" id="rectangle5" rx="0" ry="0" style="fill: rgb(229, 229, 229); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="36" height="36"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#30998a1171e346d0848572708ae6938f)" id="text5text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage2">
        <g id="vectorImage2Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="dragfeedback" displayName="Drag Feedback" icon="icons/dragfeedback.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">90,90</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$formBackground.shaded(0.13978494623655913).hollowed(0.4)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|2|0.3</Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$formBackground.shaded(0.5698924731182795)</E>
        </Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData">24,24,collection://vectors/dragfeedback-vectorimage0.svg</Property>
        <Property name="handle0" displayName="handle0" type="Handle">61,61</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":90,"gh0":90,"w0":90,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":90,"gh0":90,"w0":90,"h0":90,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="pathRect0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (new Bound($handle0.x-5, $handle0.y, 24, 24));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for vectorImage0..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0BrowseFile" displayName="Select Vector Image from File for vectorImage0..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove vectorImage0">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="pathRect0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="pathRect0_globalGroup" p:filter="url(#pathRect0_shadowFilter)">
        <path p:filter="url(#7c1cecde24334da498996d48383aa001)" id="pathRect0" d="M 0 0 L 90 0 L 90 90 L 0 90 L 0 0 z" style="fill: rgb(204, 204, 204); fill-opacity: 0.6; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="infotip" displayName="Info Tip" icon="icons/infotip.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">160,48</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$problemContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|2|0.5</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:160,&quot;gh0&quot;:48,&quot;w0&quot;:136,&quot;h0&quot;:28,&quot;x0&quot;:13,&quot;y0&quot;:8}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Error message...</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0IconSide" displayName="Text icon side" type="Enum" p:enumValues="['leading|Leading', 'trailing|Trailing']">leading</Property>
        <Property name="text0IconColor" displayName="Tooltip Icon Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":48,"w0":160,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("61,48,33-51,10-32,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":9,\"y\":1}]},{\"command\":\"C\",\"points\":[{\"x\":23.816114900000002,\"y\":1.0196535,\"fixed\":true},{\"x\":38.6336429,\"y\":0.9608063,\"fixed\":true},{\"x\":53,\"y\":1},{\"x\":56.022205,\"y\":0.9792126,\"fixed\":true},{\"x\":59.269964,\"y\":2.71622299,\"fixed\":true},{\"x\":60,\"y\":6},{\"x\":60.664331,\"y\":9.5293154,\"fixed\":true},{\"x\":60.262072,\"y\":13.151893900000001,\"fixed\":true},{\"x\":60,\"y\":17},{\"x\":59.95986,\"y\":23.208668,\"fixed\":true},{\"x\":60.08341,\"y\":29.422249,\"fixed\":true},{\"x\":60,\"y\":36},{\"x\":59.94206,\"y\":39.05125,\"fixed\":true},{\"x\":57.80239,\"y\":41.992856,\"fixed\":true},{\"x\":55,\"y\":42},{\"x\":51.112231,\"y\":42.504189,\"fixed\":true},{\"x\":47.167614,\"y\":42.17537,\"fixed\":true},{\"x\":43,\"y\":42},{\"x\":37.653995,\"y\":42,\"fixed\":true},{\"x\":32.307985,\"y\":42,\"fixed\":true},{\"x\":27,\"y\":42},{\"x\":24.892657,\"y\":43.95617,\"fixed\":true},{\"x\":22.785308999999998,\"y\":45.912378,\"fixed\":true},{\"x\":21,\"y\":48}]},{\"command\":\"C\",\"points\":[{\"x\":18.91843,\"y\":45.361586,\"fixed\":true},{\"x\":16.811083,\"y\":43.405378,\"fixed\":true},{\"x\":15,\"y\":41},{\"x\":11.252921,\"y\":41.298027,\"fixed\":true},{\"x\":7.6651814,\"y\":41.912087,\"fixed\":true},{\"x\":4,\"y\":41},{\"x\":0.9828216,\"y\":39.379765,\"fixed\":true},{\"x\":0.343129,\"y\":35.366134,\"fixed\":true},{\"x\":1,\"y\":32},{\"x\":0.54904144,\"y\":24.005214,\"fixed\":true},{\"x\":0.49060994,\"y\":15.835047,\"fixed\":true},{\"x\":1,\"y\":8},{\"x\":0.53467923,\"y\":4.6399955,\"fixed\":true},{\"x\":2.3521482,\"y\":1.4534909,\"fixed\":true},{\"x\":6,\"y\":1},{\"x\":6.5892935,\"y\":0.59494094,\"fixed\":true},{\"x\":7.7112009,\"y\":0.50627322,\"fixed\":true},{\"x\":9,\"y\":1}]},{\"command\":\"Z\"}],\"style\":\"fill:none;stroke:#000000;stroke-width:0.99999994;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":48,"w0":160,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)].concat([]);}())]]></Arg>
        </Transform>
      </For>
      <For ref="vector0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="vector0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.6 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.2 * ($textFont).getPixelHeight());
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":48,"w0":136,"h0":28,"x0":13,"y0":8}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.6 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.2 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = $text0IconSide;
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":160,"gh0":48,"w0":136,"h0":28,"x0":13,"y0":8}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $text0IconColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Tooltip Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0BrowseFile" displayName="Select Vector Image from File for Tooltip Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("text0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Tooltip Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="vector0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vector0_globalGroup" p:filter="url(#vector0_shadowFilter)">
        <g p:filter="url(#d589434091724c4a8dca27cc06d3d97f)" id="vector0" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1; fill: rgb(255, 102, 102); fill-opacity: 1;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#1a146248211640ea8c1f4e63cc1b526c)" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="textview" displayName="Text View" icon="icons/textview.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,18</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.resized(-0.125)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:18,&quot;w0&quot;:200,&quot;h0&quot;:18,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Septemque secant pendebat</Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|0|0</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":18,"w0":200,"h0":18,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":18,"w0":200,"h0":18,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":18,"w0":200,"h0":18,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="text0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#7461f2ae2fb44e64a362c149d8ef8f6f)" id="pathRect0" d="M 0 0 L 200 0 L 200 18 L 0 18 L 0 0 z" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="text0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0_globalGroup" p:filter="url(#text0_shadowFilter)">
        <g p:filter="url(#d2de47ea382e4931b751d6c8c40a135c)" id="text0text" dominant-baseline="auto"/>
      </g>
    </Content>
  </Shape>
  <Shape id="mobilemenuitem" displayName="Mobile Menu Item" icon="icons/mobilemenuitem.png?token=1534491624248">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">168,48</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|3|5|0.2</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$formBackground</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: new Bound(16, $first.value ? 8 : 0, $box.w - 32, $box.h - ($first.value ? 8 : 0) - ($last.value ? 8 : 0)),font: $textFont,align: $textAlignment,richText: true})">Menu Item</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="text0IconColor" displayName="Icon Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
        </Property>
        <Property name="first" displayName="First" type="Bool">false</Property>
        <Property name="last" displayName="Last" type="Bool">false</Property>
        <Property name="selected" displayName="Selected" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="snapper">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":168,"gh0":48,"w0":168,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="background">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("2,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = new Bound(0, !$first.value ? -20 : 0, $box.w, $box.h + (!$first.value ? 20 : 0) + (!$last.value ? 20 : 0));
var s = $strokeStyle;
var r = Handle.fromString("2,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, $first.value, $first.value, $last.value, $last.value); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = new Bound(0, !$first.value ? -20 : 0, $box.w, $box.h + (!$first.value ? 20 : 0) + (!$last.value ? 20 : 0));
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="background_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="background_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="selected">
        <Bound>
          <Arg><![CDATA[(new Bound(0, $first.value ? 8 : 0, $box.w, $box.h - ($first.value ? 8 : 0) - ($last.value ? 8 : 0))).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$selected.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(1 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(new Bound(16, $first.value ? 8 : 0, $box.w - 32, $box.h - ($first.value ? 8 : 0) - ($last.value ? 8 : 0))))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(1 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(new Bound(16, $first.value ? 8 : 0, $box.w - 32, $box.h - ($first.value ? 8 : 0) - ($last.value ? 8 : 0)))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $text0IconColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="clip">
        <Bound>
          <Arg><![CDATA[(new Bound(-20, $first.value ? -20 : 0, $box.w + 40, $box.h + ($first.value ? 20 : 0) + ($last.value ? 20 : 0))).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#00BCD41A")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0BrowseFile" displayName="Select Vector Image from File for Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("text0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_snapper = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":168,"gh0":48,"w0":168,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#b91ec46f2c5a4d4fba73b1bda4c6b0ed)" id="snapper" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="168" height="48"/>
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#441429812e9240ae8cdaff822290fa0f)" id="clip" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 0.101961; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="200" height="74"/>
        </clipPath>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <defs>
          <filter id="background_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
        </defs>
        <g xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="background_globalGroup" p:filter="url(#background_shadowFilter)">
          <path p:filter="url(#8398febf6c2f42ba9d6ee8dad7553d61)" id="background" d="M 2 0 L 166 0 c 1.1045694996615871 0 2 0.8954305003384129 2 2 L 168 46 c 0 1.1045694996615871 -0.8954305003384129 2 -2 2 L 2 48 c -0.8954305003384129 0 -2 -0.8954305003384129 -2 -2 L 0 2 c 0 -1.1045694996615871 0.8954305003384129 -2 2 -2 z" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
        </g>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#074b0cfaa5fd41449c26665211995fc5)" id="selected" rx="0" ry="0" style="fill: rgb(235, 235, 235); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="168" height="48"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#21149c64cb804cf4817854d467d7ed84)" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shortcut to="button2" displayName="@Button21" icon="icons/button21.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$problemContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">CANCEL</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button21" icon="icons/button21.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">SELECT</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button22" icon="icons/button22.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.09677419354838712)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.24731182795698925)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text1" icon="icons/inputtext1.png">
    <PropertyValue name="box">210,36</PropertyValue>
    <PropertyValue name="text1">Normal text input</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="handle0">2,0</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button23" icon="icons/button23.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$secondaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.24731182795698925)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button24" icon="icons/button24.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$problemContentColor.hollowed(0.6)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor.hollowed(0.29803921568627456)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">CANCEL</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button25" icon="icons/button25.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor.hollowed(0.6)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor.hollowed(0.29803921568627456)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">SELECT</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button26" icon="icons/button26.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.09677419354838712).hollowed(0.6)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.24731182795698925)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button27" icon="icons/button27.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$secondaryContentColor.hollowed(0.6)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.24731182795698925)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor.hollowed(0.1098039215686275)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button28" icon="icons/button28.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$problemContentColor</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|1|2|0.3</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">CANCEL</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button29" icon="icons/button29.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|1|2|0.3</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">SELECT</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button210" icon="icons/button210.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.09677419354838712)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.24731182795698925)</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|1|2|0.3</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button211" icon="icons/button211.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$secondaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.24731182795698925)</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|1|2|0.3</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text2" icon="icons/inputtext2.png">
    <PropertyValue name="box">210,36</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.4980392156862745)</E>
    </PropertyValue>
    <PropertyValue name="text1">Placeholder text</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text3" icon="icons/inputtext3.png">
    <PropertyValue name="box">210,36</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="text1">Focused te&lt;span xmlns="http://www.w3.org/1999/xhtml" style="color: rgb(153, 153, 153);"&gt;xt with caret&lt;/span&gt;</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="handle0">83,0</PropertyValue>
    <PropertyValue name="withCaret">true</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text4" icon="icons/inputtext4.png">
    <PropertyValue name="box">210,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.13978494623655913).hollowed(0.8)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.13978494623655913).hollowed(0.41960784313725485)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.6509803921568628)</E>
    </PropertyValue>
    <PropertyValue name="text1">Disabled input</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text5" icon="icons/inputtext5.png">
    <PropertyValue name="box">210,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.13978494623655913).hollowed(0.8)</E>
    </PropertyValue>
    <PropertyValue name="text1">Read-only input</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text6" icon="icons/inputtext6.png">
    <PropertyValue name="box">210,36</PropertyValue>
    <PropertyValue name="text1">Text with action</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/mobilemenuitem-inputtext6-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="handle0">50,0</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text7" icon="icons/inputtext7.png">
    <PropertyValue name="box">210,36</PropertyValue>
    <PropertyValue name="text1">●●●●●●●</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/mobilemenuitem-inputtext7-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="handle0">50,0</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text8" icon="icons/inputtext8.png">
    <PropertyValue name="box">168,36</PropertyValue>
    <PropertyValue name="text1">08/13/2018</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="handle0">2,0</PropertyValue>
    <PropertyValue name="rightRoundedCorners">false</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="Button" icon="icons/button.png">
    <PropertyValue name="box">42,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.09677419354838712)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.24731182795698925)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.29803921568627456)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(0.0625)</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-button-text0imagedata.svg</PropertyValue>
    <PropertyValue name="leftRoundedCorners">false</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text9" icon="icons/inputtext9.png">
    <PropertyValue name="box">168,36</PropertyValue>
    <PropertyValue name="text1">Username</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="handle0">2,0</PropertyValue>
    <PropertyValue name="leftRoundedCorners">false</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="Button" icon="icons/button.png">
    <PropertyValue name="box">42,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.09677419354838712)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.24731182795698925)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.29803921568627456)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(0.0625)</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-button-text0imagedata.svg</PropertyValue>
    <PropertyValue name="rightRoundedCorners">false</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text10" icon="icons/inputtext10.png">
    <PropertyValue name="box">168,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.13978494623655913).hollowed(0.8)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.13978494623655913).hollowed(0.41960784313725485)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.6509803921568628)</E>
    </PropertyValue>
    <PropertyValue name="text1">08/13/2018</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="handle0">2,0</PropertyValue>
    <PropertyValue name="rightRoundedCorners">false</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="Button" icon="icons/button.png">
    <PropertyValue name="box">42,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.09677419354838712).hollowed(0.6)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.24731182795698925)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.8196078431372549)</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-button-text0imagedata.svg</PropertyValue>
    <PropertyValue name="leftRoundedCorners">false</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text11" icon="icons/inputtext11.png">
    <PropertyValue name="box">168,36</PropertyValue>
    <PropertyValue name="text1">Search field</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="handle0">2,0</PropertyValue>
    <PropertyValue name="rightRoundedCorners">false</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="Accept Button" icon="icons/acceptbutton.png">
    <PropertyValue name="box">43,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-acceptbutton-text0imagedata.svg</PropertyValue>
    <PropertyValue name="leftRoundedCorners">false</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button212" icon="icons/button212.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$problemContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$problemContentColor.shaded(0.5)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">CANCEL</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="Accept Button" icon="icons/acceptbutton.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.6980392156862745)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">SELECT</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button213" icon="icons/button213.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.09677419354838712)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.8)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button214" icon="icons/button214.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$secondaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.6980392156862745)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button215" icon="icons/button215.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.6980392156862745)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">SELECT</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button216" icon="icons/button216.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$problemContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$problemContentColor.shaded(0.5)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">CLOSE</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-button216-text0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="Accept Button" icon="icons/acceptbutton.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.6980392156862745)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">SELECT</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button217" icon="icons/button217.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.09677419354838712)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.8)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">BROWSE</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-button217-text0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button218" icon="icons/button218.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$secondaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.6980392156862745)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">UPLOAD</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-button218-text0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button219" icon="icons/button219.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.6980392156862745)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">SEARCH</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-button219-text0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text12" icon="icons/inputtext12.png">
    <PropertyValue name="box">210,36</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$problemContentColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">#FF0000DE</PropertyValue>
    <PropertyValue name="text1">Validation error</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="handle0">115,0</PropertyValue>
    <PropertyValue name="withCaret">true</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button220" icon="icons/button220.png">
    <PropertyValue name="box">56,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.09677419354838712)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.8)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(0.5)</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-button220-text0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button221" icon="icons/button221.png">
    <PropertyValue name="box">56,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.09677419354838712)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.8)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-button221-text0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="radio2" displayName="@Radio 21" icon="icons/radio21.png">
    <PropertyValue name="box">73,24</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Radio</PropertyValue>
  </Shortcut>
  <Shortcut to="radio2" displayName="@Radio 22" icon="icons/radio22.png">
    <PropertyValue name="box">73,24</PropertyValue>
    <PropertyValue name="checked">false</PropertyValue>
    <PropertyValue name="text0">Radio</PropertyValue>
  </Shortcut>
  <Shortcut to="radio2" displayName="@Radio 23" icon="icons/radio23.png">
    <PropertyValue name="box">73,24</PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
    <PropertyValue name="text0">Radio</PropertyValue>
  </Shortcut>
  <Shortcut to="radio2" displayName="@Radio 24" icon="icons/radio24.png">
    <PropertyValue name="box">73,24</PropertyValue>
    <PropertyValue name="checked">false</PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
    <PropertyValue name="text0">Radio</PropertyValue>
  </Shortcut>
  <Shortcut to="checkbox2" displayName="@Checkbox 21" icon="icons/checkbox21.png">
    <PropertyValue name="box">93,24</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="checkbox2" displayName="@Checkbox 22" icon="icons/checkbox22.png">
    <PropertyValue name="checked">false</PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
    <PropertyValue name="box">99,24</PropertyValue>
  </Shortcut>
  <Shortcut to="checkbox2" displayName="@Checkbox 23" icon="icons/checkbox23.png">
    <PropertyValue name="checked">false</PropertyValue>
    <PropertyValue name="box">93,24</PropertyValue>
  </Shortcut>
  <Shortcut to="checkbox2" displayName="@Checkbox 24" icon="icons/checkbox24.png">
    <PropertyValue name="disabled">true</PropertyValue>
    <PropertyValue name="box">93,24</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button21" icon="icons/button21.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">SELECT</PropertyValue>
  </Shortcut>
  <Shortcut to="button2" displayName="@Button22" icon="icons/button22.png">
    <PropertyValue name="box">99,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$problemContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">CANCEL</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell1" icon="icons/datatablecell1.png">
    <PropertyValue name="box">49,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.043010752688172005)</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="checkMode">unchecked</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell2" icon="icons/datatablecell2.png">
    <PropertyValue name="box">169,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.043010752688172005)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100)</E>
    </PropertyValue>
    <PropertyValue name="text0">Column Down</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-datatablecell2-text0imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell3" icon="icons/datatablecell3.png">
    <PropertyValue name="box">49,48</PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="fillColor2">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell4" icon="icons/datatablecell4.png">
    <PropertyValue name="box">169,48</PropertyValue>
    <PropertyValue name="text0">Utque erectos</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell5" icon="icons/datatablecell5.png">
    <PropertyValue name="box">49,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="checkMode">unchecked</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell6" icon="icons/datatablecell6.png">
    <PropertyValue name="box">169,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="text0">Secrevit ponderib...</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell7" icon="icons/datatablecell7.png">
    <PropertyValue name="box">49,58</PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="checkMode">unchecked</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell8" icon="icons/datatablecell8.png">
    <PropertyValue name="box">169,58</PropertyValue>
    <PropertyValue name="text0">&lt;span xmlns="http://www.w3.org/1999/xhtml" style="font-weight: bold;"&gt;Complex Text&lt;br xmlns="http://www.w3.org/1999/xhtml" /&gt;&lt;/span&gt;In multiple lines</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell9" icon="icons/datatablecell9.png">
    <PropertyValue name="box">49,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="fillColor2">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell10" icon="icons/datatablecell10.png">
    <PropertyValue name="box">169,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="textAlignment">2,1</PropertyValue>
    <PropertyValue name="text0">$13.45</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell11" icon="icons/datatablecell11.png">
    <PropertyValue name="box">49,48</PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="checkMode">unchecked</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="bottom">true</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell12" icon="icons/datatablecell12.png">
    <PropertyValue name="box">339,48</PropertyValue>
    <PropertyValue name="text0">Partim locum &lt;span xmlns="http://www.w3.org/1999/xhtml" style="color: rgb(52, 154, 153); text-decoration: underline;"&gt;crescendo&lt;/span&gt; norant...</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-datatablecell12-text0imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">24,24,collection://vectors/mobilemenuitem-datatablecell12-trailingiconimagedata.svg</PropertyValue>
    <PropertyValue name="textPadding">10.029585798816568,0</PropertyValue>
    <PropertyValue name="bottom">true</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View1" icon="icons/textview1.png">
    <PropertyValue name="box">155,24</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(0.1875)</E>
    </PropertyValue>
    <PropertyValue name="text0">Content Heading</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View2" icon="icons/textview2.png">
    <PropertyValue name="box">255,18</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.4117647058823529)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont</E>
    </PropertyValue>
    <PropertyValue name="text0">Total 6 items found.</PropertyValue>
  </Shortcut>
  <Shortcut to="combobox" displayName="@Combo Box1" icon="icons/combobox1.png">
    <PropertyValue name="box">166,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.13978494623655913)</E>
    </PropertyValue>
    <PropertyValue name="text0">Active Dropdown</PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="mobilemenuitem" displayName="@Mobile Menu Item1" icon="icons/mobilemenuitem1.png">
    <PropertyValue name="box">168,56</PropertyValue>
    <PropertyValue name="fillColor2">#33CCFFFF</PropertyValue>
    <PropertyValue name="text0">First Menu Item</PropertyValue>
    <PropertyValue name="first">true</PropertyValue>
  </Shortcut>
  <Shortcut to="mobilemenuitem" displayName="@Mobile Menu Item2" icon="icons/mobilemenuitem2.png">
    <PropertyValue name="box">168,56</PropertyValue>
    <PropertyValue name="fillColor2">
      <E>$$formBackground</E>
    </PropertyValue>
    <PropertyValue name="text0">Last Menu Item</PropertyValue>
    <PropertyValue name="last">true</PropertyValue>
  </Shortcut>
  <Shortcut to="mobilemenuitem" displayName="@Mobile Menu Item3" icon="icons/mobilemenuitem3.png">
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="fillColor2">
      <E>$$formBackground</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor.hollowed(0.12941176470588234)</E>
    </PropertyValue>
    <PropertyValue name="text0">Selected Item</PropertyValue>
  </Shortcut>
  <Shortcut to="paginator" displayName="@Paginator1" icon="icons/paginator1.png">
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="text3">...</PropertyValue>
    <PropertyValue name="text4">49</PropertyValue>
    <PropertyValue name="text5">50</PropertyValue>
    <PropertyValue name="selectedColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="infotip" displayName="@Info Tip1" icon="icons/infotip1.png">
    <PropertyValue name="box">191,46</PropertyValue>
    <PropertyValue name="fillColor">#FF00006B</PropertyValue>
    <PropertyValue name="shadowStyle">0|0|2|0.4</PropertyValue>
    <PropertyValue name="textAlignment">0,1</PropertyValue>
    <PropertyValue name="text0">Validation error</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-infotip1-text0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View3" icon="icons/textview3.png">
    <PropertyValue name="box">520,24</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont</E>
    </PropertyValue>
    <PropertyValue name="text0">Duris inclusum forma librata frigida coeperunt flexi homo aera proxima</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell13" icon="icons/datatablecell13.png">
    <PropertyValue name="box">169,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.043010752688172005)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100)</E>
    </PropertyValue>
    <PropertyValue name="text0">Column Up</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-datatablecell13-text0imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell14" icon="icons/datatablecell14.png">
    <PropertyValue name="box">169,48</PropertyValue>
    <PropertyValue name="text0">Utque erectos</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell15" icon="icons/datatablecell15.png">
    <PropertyValue name="box">169,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="textAlignment">1,1</PropertyValue>
    <PropertyValue name="text0">13/08/18 09:30</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-datatablecell15-text0imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell16" icon="icons/datatablecell16.png">
    <PropertyValue name="box">169,58</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$problemContentColor.hollowed(0.7294117647058824)</E>
    </PropertyValue>
    <PropertyValue name="text0">Error cell</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell17" icon="icons/datatablecell17.png">
    <PropertyValue name="box">169,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="text0">Check inside</PropertyValue>
    <PropertyValue name="fillColor2">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell18" icon="icons/datatablecell18.png">
    <PropertyValue name="box">133,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.043010752688172005)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100)</E>
    </PropertyValue>
    <PropertyValue name="text0">Unsortable</PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">24,24,collection://vectors/mobilemenuitem-datatablecell18-trailingiconimagedata.svg</PropertyValue>
    <PropertyValue name="textPadding">4,0</PropertyValue>
    <PropertyValue name="right">true</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell19" icon="icons/datatablecell19.png">
    <PropertyValue name="box">133,48</PropertyValue>
    <PropertyValue name="text0">&lt;span xmlns="http://www.w3.org/1999/xhtml"&gt;Sive&lt;/span&gt;</PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
    <PropertyValue name="right">true</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell20" icon="icons/datatablecell20.png">
    <PropertyValue name="box">133,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="text0">Nisi</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
    <PropertyValue name="right">true</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell21" icon="icons/datatablecell21.png">
    <PropertyValue name="box">133,58</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="text0">&lt;span xmlns="http://www.w3.org/1999/xhtml" style="text-decoration: underline;"&gt;Action&lt;/span&gt;</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-datatablecell21-text0imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
    <PropertyValue name="right">true</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell22" icon="icons/datatablecell22.png">
    <PropertyValue name="box">133,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="text0">Row Edit</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">24,24,collection://vectors/mobilemenuitem-datatablecell22-trailingiconimagedata.svg</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
    <PropertyValue name="right">true</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="@DataTable Cell23" icon="icons/datatablecell23.png">
    <PropertyValue name="box">133,48</PropertyValue>
    <PropertyValue name="text0">Capacius</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textPadding">5,0</PropertyValue>
    <PropertyValue name="bottom">true</PropertyValue>
    <PropertyValue name="right">true</PropertyValue>
  </Shortcut>
  <Shortcut to="combobox" displayName="@Combo Box2" icon="icons/combobox2.png">
    <PropertyValue name="box">110,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="combobox" displayName="@Combo Box3" icon="icons/combobox3.png">
    <PropertyValue name="box">187,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="text0">Combo with icon</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-combobox3-text0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="combobox" displayName="@Combo Box4" icon="icons/combobox4.png">
    <PropertyValue name="box">110,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.13978494623655913).hollowed(0.8)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.13978494623655913).hollowed(0.41960784313725485)</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|0|0|0.2</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.6509803921568628)</E>
    </PropertyValue>
    <PropertyValue name="text0">Disabled</PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="combobox" displayName="@Combo Box5" icon="icons/combobox5.png">
    <PropertyValue name="box">242,60</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(-0.032258064516129004)</E>
    </PropertyValue>
    <PropertyValue name="text0">&lt;span xmlns="http://www.w3.org/1999/xhtml" style="font-weight: bold;"&gt;Complex text&lt;br /&gt;&lt;/span&gt;In multiple lines recessit an...</PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="combobox" displayName="@Combo Box6" icon="icons/combobox6.png">
    <PropertyValue name="box">110,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.6980392156862745)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100)</E>
    </PropertyValue>
    <PropertyValue name="text0">Primary</PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="combobox" displayName="@Combo Box7" icon="icons/combobox7.png">
    <PropertyValue name="box">121,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$secondaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.6980392156862745)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100)</E>
    </PropertyValue>
    <PropertyValue name="text0">Secondary</PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext" displayName="@Input Text13" icon="icons/inputtext13.png">
    <PropertyValue name="box">242,36</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(-0.125)</E>
    </PropertyValue>
    <PropertyValue name="text1">Editable combo</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/mobilemenuitem-inputtext13-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="handle0">103,0</PropertyValue>
    <PropertyValue name="withCaret">true</PropertyValue>
  </Shortcut>
  <Shortcut to="combobox" displayName="@Combo Box8" icon="icons/combobox8.png">
    <PropertyValue name="box">242,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$problemContentColor</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|0|0|0.2</PropertyValue>
    <PropertyValue name="textColor">#FF0000DE</PropertyValue>
    <PropertyValue name="text0">Validation error</PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="infotip" displayName="@Info Tip2" icon="icons/infotip2.png">
    <PropertyValue name="box">221,46</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$secondaryContentColor.hollowed(0.3803921568627451)</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|0|2|0.4</PropertyValue>
    <PropertyValue name="textAlignment">0,1</PropertyValue>
    <PropertyValue name="text0">Warning message</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-infotip2-text0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="infotip" displayName="@Info Tip3" icon="icons/infotip3.png">
    <PropertyValue name="box">191,46</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$formBackground.shaded(0.3548387096774194)</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|0|2|0.2</PropertyValue>
    <PropertyValue name="textAlignment">0,1</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Information tooltip</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-infotip3-text0imagedata.svg</PropertyValue>
    <PropertyValue name="text0IconColor">
      <E>$$defaultTextColor.hollowed(0.5098039215686274)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="infotip" displayName="@Info Tip4" icon="icons/infotip4.png">
    <PropertyValue name="box">221,46</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|0|2|0.2</PropertyValue>
    <PropertyValue name="textAlignment">0,1</PropertyValue>
    <PropertyValue name="text0">Information tooltip</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/mobilemenuitem-infotip4-text0imagedata.svg</PropertyValue>
    <PropertyValue name="text0IconColor">
      <E>$$invertedContentColor.hollowed(0.18039215686274512)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="vector" displayName="@Vector1" icon="icons/vector1.png">
    <PropertyValue name="box">64,64</PropertyValue>
    <PropertyValue name="shadowStyle">0|0|2|0.7</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.34901960784313724)</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/mobilemenuitem-vector1-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="radiusHandle">32,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(2)</E>
    </PropertyValue>
    <PropertyValue name="padding">0,12</PropertyValue>
  </Shortcut>
  <Shortcut to="vector" displayName="@Vector2" icon="icons/vector2.png">
    <PropertyValue name="box">48,48</PropertyValue>
    <PropertyValue name="shadowStyle">0|0|2|0.7</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.34901960784313724)</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/mobilemenuitem-vector2-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="radiusHandle">24,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(2)</E>
    </PropertyValue>
    <PropertyValue name="padding">0,9</PropertyValue>
  </Shortcut>
  <Shortcut to="vector" displayName="@Vector3" icon="icons/vector3.png">
    <PropertyValue name="box">96,96</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|0|0|0.4</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/mobilemenuitem-vector3-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="radiusHandle">48,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="image" displayName="@Image1" icon="icons/image1.png">
    <PropertyValue name="box">174,132</PropertyValue>
    <PropertyValue name="radiusHandle">0,0</PropertyValue>
  </Shortcut>
  <Shortcut to="image" displayName="@Image2" icon="icons/image2.png">
    <PropertyValue name="box">174,132</PropertyValue>
    <PropertyValue name="shadowStyle">0|0|3|0.6</PropertyValue>
    <PropertyValue name="radiusHandle">0,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(3)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="image" displayName="@Image3" icon="icons/image3.png">
    <PropertyValue name="box">174,132</PropertyValue>
    <PropertyValue name="shadowStyle">0|0|0|0.6</PropertyValue>
    <PropertyValue name="radiusHandle">0,0</PropertyValue>
    <PropertyValue name="strokeColor">#E79F2EFF</PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(3)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="image" displayName="@Image4" icon="icons/image4.png">
    <PropertyValue name="box">96,96</PropertyValue>
    <PropertyValue name="shadowStyle">0|0|0|0.6</PropertyValue>
    <PropertyValue name="bitmap0ImageData">225,225,collection://bitmaps/mobilemenuitem-image4-bitmap0imagedata.png</PropertyValue>
    <PropertyValue name="radiusHandle">48,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="image" displayName="@Image5" icon="icons/image5.png">
    <PropertyValue name="box">64,64</PropertyValue>
    <PropertyValue name="shadowStyle">0|0|3|0.6</PropertyValue>
    <PropertyValue name="bitmap0ImageData">225,225,collection://bitmaps/mobilemenuitem-image5-bitmap0imagedata.png</PropertyValue>
    <PropertyValue name="radiusHandle">32,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(2)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="image" displayName="@Image6" icon="icons/image6.png">
    <PropertyValue name="box">48,48</PropertyValue>
    <PropertyValue name="shadowStyle">0|0|3|0.6</PropertyValue>
    <PropertyValue name="bitmap0ImageData">225,225,collection://bitmaps/mobilemenuitem-image6-bitmap0imagedata.png</PropertyValue>
    <PropertyValue name="radiusHandle">24,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(2)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle9" icon="icons/rectangle9.png">
    <PropertyValue name="box">118,73</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle10" icon="icons/rectangle10.png">
    <PropertyValue name="box">118,73</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.13978494623655913)</E>
    </PropertyValue>
    <PropertyValue name="rightBorder">false</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle11" icon="icons/rectangle11.png">
    <PropertyValue name="box">118,73</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$formBackground.shaded(0.13978494623655913)</E>
    </PropertyValue>
    <PropertyValue name="bottomBorder">false</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(-0.125)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="dragfeedback" displayName="@Drag Feedback1" icon="icons/dragfeedback1.png">
    <PropertyValue name="box">118,120</PropertyValue>
    <PropertyValue name="handle0">67,65</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View4" icon="icons/textview4.png">
    <PropertyValue name="box">201,50</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bold(true).resized(1.5)</E>
    </PropertyValue>
    <PropertyValue name="text0">Heading 1</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View5" icon="icons/textview5.png">
    <PropertyValue name="box">151,39</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bold(true).resized(0.875)</E>
    </PropertyValue>
    <PropertyValue name="text0">Heading 2</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View6" icon="icons/textview6.png">
    <PropertyValue name="box">131,34</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(0.5)</E>
    </PropertyValue>
    <PropertyValue name="text0">Heading 3</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View7" icon="icons/textview7.png">
    <PropertyValue name="box">121,30</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(0.25)</E>
    </PropertyValue>
    <PropertyValue name="text0">Heading 4</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View8" icon="icons/textview8.png">
    <PropertyValue name="box">114,25</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(0.125)</E>
    </PropertyValue>
    <PropertyValue name="text0">Heading 5</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View9" icon="icons/textview9.png">
    <PropertyValue name="box">93,20</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100)</E>
    </PropertyValue>
    <PropertyValue name="text0">Heading 6</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View10" icon="icons/textview10.png">
    <PropertyValue name="box">344,50</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont</E>
    </PropertyValue>
    <PropertyValue name="text0">Short paragraph - Minantia non modo formaeque in meis acervo formaeque gravi...</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View11" icon="icons/textview11.png">
    <PropertyValue name="box">185,20</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont</E>
    </PropertyValue>
    <PropertyValue name="text0">Normal text lorem caelo</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View12" icon="icons/textview12.png">
    <PropertyValue name="box">141,20</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bold(true)</E>
    </PropertyValue>
    <PropertyValue name="text0">Bold text lorem</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View13" icon="icons/textview13.png">
    <PropertyValue name="box">429,89</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.3803921568627451)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont</E>
    </PropertyValue>
    <PropertyValue name="text0">Caesa regio, est surgere. Humanas membra duae effervescere, rectumque lanient postquam pulsant satus. Summaque  peragebant aetas pondus nullaque aethere mundum tegi. Rudis  lege tanta praeter...</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View14" icon="icons/textview14.png">
    <PropertyValue name="box">185,20</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont</E>
    </PropertyValue>
    <PropertyValue name="text0">&lt;span xmlns="http://www.w3.org/1999/xhtml" style="text-decoration: underline;"&gt;Hyperlink lorem ipsum&lt;/span&gt;</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="@Text View15" icon="icons/textview15.png">
    <PropertyValue name="box">141,20</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$problemContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont</E>
    </PropertyValue>
    <PropertyValue name="text0">Error message</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle1" icon="icons/rectangle1.png">
    <PropertyValue name="box">278,67</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(1).styled("5,5")</E>
    </PropertyValue>
    <PropertyValue name="radius">7,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.8392156862745098)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.4)</E>
    </PropertyValue>
    <PropertyValue name="text0">Liberioris tuba quam flamina mea congestaque pugnabant orba...</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle2" icon="icons/rectangle2.png">
    <PropertyValue name="box">278,67</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(1).styled("5,5")</E>
    </PropertyValue>
    <PropertyValue name="radius">7,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$problemContentColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$problemContentColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Liberioris tuba quam flamina mea congestaque pugnabant orba...</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle3" icon="icons/rectangle3.png">
    <PropertyValue name="box">278,67</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(1).styled("5,5")</E>
    </PropertyValue>
    <PropertyValue name="radius">7,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Liberioris tuba quam flamina mea congestaque pugnabant orba...</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle4" icon="icons/rectangle4.png">
    <PropertyValue name="box">278,67</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$defaultTextColor.hollowed(0.8196078431372549)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(-1)</E>
    </PropertyValue>
    <PropertyValue name="radius">7,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Liberioris tuba quam flamina mea congestaque pugnabant orba...</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle5" icon="icons/rectangle5.png">
    <PropertyValue name="box">278,67</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(-1).styled("5,5")</E>
    </PropertyValue>
    <PropertyValue name="radius">7,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Liberioris tuba quam flamina mea congestaque pugnabant orba...</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle6" icon="icons/rectangle6.png">
    <PropertyValue name="box">278,67</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(1).styled("5,5")</E>
    </PropertyValue>
    <PropertyValue name="radius">7,0</PropertyValue>
    <PropertyValue name="strokeColor">#F39E18FF</PropertyValue>
    <PropertyValue name="textColor">#F39E18FF</PropertyValue>
    <PropertyValue name="text0">Liberioris tuba quam flamina mea congestaque pugnabant orba...</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle7" icon="icons/rectangle7.png">
    <PropertyValue name="box">278,67</PropertyValue>
    <PropertyValue name="fillColor">#F57F7EFF</PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(-1)</E>
    </PropertyValue>
    <PropertyValue name="radius">7,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$problemContentColor.hollowed(0.7803921568627451)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Liberioris tuba quam flamina mea congestaque pugnabant orba...</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="@Rectangle8" icon="icons/rectangle8.png">
    <PropertyValue name="box">278,67</PropertyValue>
    <PropertyValue name="fillColor">#F39C14FF</PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(-1)</E>
    </PropertyValue>
    <PropertyValue name="radius">7,0</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$defaultTextColor.hollowed(0.8392156862745098)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="text0">Liberioris tuba quam flamina mea congestaque pugnabant orba...</PropertyValue>
  </Shortcut>
  <Script comments="Resource script"><![CDATA[
collection.RESOURCE_LIST = [{"name":"Built-in vectors","type":"svg","prefix":"vectors"},{"name":"Built-in bitmaps","type":"bitmap","prefix":"bitmaps"}];

collection.browseResource = function (setNames, type, returnType, callback) {
    var options = {
        prefixes: [],
        type: type || CollectionResourceBrowserDialog.TYPE_BITMAP,
        returnType: returnType || CollectionResourceBrowserDialog.RETURN_IMAGEDATA
    };

    setNames = (setNames || "").trim();

    for (var resource of collection.RESOURCE_LIST) {
        if ((!resource.type || resource.type == options.type) && (!setNames || setNames.indexOf(resource.name) >= 0)) {
            options.prefixes.push(resource);
        }
    }

    CollectionResourceBrowserDialog.open(collection, options, callback);
};

]]></Script>
  <Fonts>
    <Font name="Android Roboto" thin="fonts/Android-Roboto/Android-Roboto-100-normal.ttf" thinItalic="fonts/Android-Roboto/Android-Roboto-100-italic.ttf" light="fonts/Android-Roboto/Android-Roboto-300-normal.ttf" lightItalic="fonts/Android-Roboto/Android-Roboto-300-italic.ttf" regular="fonts/Android-Roboto/Android-Roboto-normal-normal.ttf" regularItalic="fonts/Android-Roboto/Android-Roboto-normal-italic.ttf" medium="fonts/Android-Roboto/Android-Roboto-500-normal.ttf" mediumItalic="fonts/Android-Roboto/Android-Roboto-500-italic.ttf" bold="fonts/Android-Roboto/Android-Roboto-bold-normal.ttf" boldItalic="fonts/Android-Roboto/Android-Roboto-bold-italic.ttf" black="fonts/Android-Roboto/Android-Roboto-900-normal.ttf" blackItalic="fonts/Android-Roboto/Android-Roboto-900-italic.ttf"/>
  </Fonts>
</Shapes>