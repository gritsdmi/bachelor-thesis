<Shapes xmlns="http://www.evolus.vn/Namespace/Pencil" id="dgthanhan.AndroidNougatWireframe" displayName="Material Mobile Mockup" author="Dương Thành An" description="Toolkit for creating mobile Material mockup" url="">
  <Script comments="Built-in util script"><![CDATA[
collection.BOUND_CALCULATOR = {
    L: function (box, v) { return (box.x || 0) + v;},
    T: function (box, v) { return (box.y || 0) + v;},
    R: function (box, v) { return (box.x || 0) + box.w - v;},
    B: function (box, v) { return (box.y || 0) + box.h - v;},
    C: function (box, v) { return (box.x || 0) + box.w / 2 + v;},
    M: function (box, v) { return (box.y || 0) + box.h / 2 + v;},
    H0X: function (box, v, h0, h1) {
        return h0.x + v;
    },
    H0Y: function (box, v, h0, h1) {
        return h0.y + v;
    },
    H1X: function (box, v, h0, h1) {
        return h1.x + v;
    },
    H1Y: function (box, v, h0, h1) {
        return h1.y + v;
    },

    calculate: function (box, spec, h0, h1) {
        var matchResult = null;
        if (matchResult = spec.match(/^(([a-zA-Z0-9]+)\.)?([A-Z0-9]*[A-Z])([0-9\-]+)$/)) {
            var bounding = box;
            var targetName = RegExp.$2;
            var func = RegExp.$3;
            var delta = RegExp.$4;
            if (targetName) {
                var shapeNode = Dom.findUpward(F._target, {eval: function (node) {
                    return node.hasAttributeNS && node.getAttributeNS(PencilNamespaces.p, "type") == "Shape";
                }});

                if (shapeNode) {
                    var name = targetName;
                    if (targetName.match(/^text.*/)) name += "text"; //HACK: use text element natural bound

                    var node = Dom.getSingle(".//svg:*[@p:name='" + name + "']", shapeNode);
                    if (node) {
                        var bbox = node.getBBox();
                        if (bbox.width > 0 && bbox.height > 0) {
                            bounding = {
                                x: bbox.x,
                                y: bbox.y,
                                w: bbox.width,
                                h: bbox.height
                            };
                        }
                    }
                }
            }

            return collection.BOUND_CALCULATOR[func](bounding, parseInt(delta, 10), h0, h1);
        }
        return 0;
    }
};
collection.toBounds = function (box, textBounds, h0, h1) {
    var literal = textBounds.value || textBounds.toString();
    var parts = literal.split(",");
    var x = collection.BOUND_CALCULATOR.calculate(box, parts[0], h0, h1);
    var y = collection.BOUND_CALCULATOR.calculate(box, parts[1], h0, h1);
    var w = collection.BOUND_CALCULATOR.calculate(box, parts[2], h0, h1) - x;
    var h = collection.BOUND_CALCULATOR.calculate(box, parts[3], h0, h1) - y;

    return new Bound(x, y, w, h);
};
collection.calculateBoundsFromPolicy = function (box, originalInfo, policy) {
    var hLayout = Group.calculateLayout(originalInfo.x0, originalInfo.w0, originalInfo.gw0, policy.xPolicy, policy.wPolicy, box.w, originalInfo.w0);
    var vLayout = Group.calculateLayout(originalInfo.y0, originalInfo.h0, originalInfo.gh0, policy.yPolicy, policy.hPolicy, box.h, originalInfo.h0);

    return new Bound(Math.round(hLayout.pos), Math.round(vLayout.pos), Math.round(hLayout.size), Math.round(vLayout.size));
};
collection.copyClipboardImage = function (target, imageDataPropName, boxPropName) {
    try {
        var image = clipboard.readImage();
        if (image) {
            var id = Pencil.controller.nativeImageToRefSync(image);

            var size = image.getSize();
            var newImageData = new ImageData(size.width, size.height, ImageData.idToRefString(id));
            target.setProperty(imageDataPropName, newImageData);
            if (boxPropName) target.setProperty(boxPropName, new Dimension(size.width, size.height));
        }
    } catch (e) {
        console.error(e);
    }
};

collection.buildNPatchModel = function (cells, originalSize, newSize) {
    var totalScaleSize = 0;
    for (var cell of cells) totalScaleSize += (cell.to - cell.from);

    var r = (newSize - (originalSize - totalScaleSize)) / totalScaleSize;

    var models = [];
    var total = 0;
    var scaledTotal = 0;
    var last = false;

    //add a sentinel
    cells = cells.concat([{from: originalSize, to: originalSize + 1}]);

    for (var i = 0; i < cells.length; i ++) {
        var cell = cells[i];
        if (cell.from == cell.to) continue;

        var last = (i == cell.length - 2);

        var model = null;
        if (cell.from > total) {
            model = {
                start: total,
                size: cell.from - total,
                scaledStart: scaledTotal,
                scale: false
            };

            models.push(model);
            total = cell.from;
            scaledTotal += model.size;
        }

        if (cell.from >= originalSize) break;

        var scaledSize = (last ? (newSize - (originalSize - cell.to) - scaledTotal) : (r * (cell.to - cell.from)));

        model = {
            start: total,
            size: cell.to - cell.from,
            scaledStart: scaledTotal,
            scaledSize: scaledSize,
            scale: true
        };

        model.r = model.scaledSize / model.size;

        models.push(model);
        total = cell.to;
        scaledTotal += model.scaledSize;
    }

    return models;
};

collection.parsePathData = function (pathDataLiteral) {
    function normalize(pin) {
        pin.x = Math.round(pin.x);
        if (typeof(pin.y) == "number") pin.y = Math.round(pin.y);
    }
    function normalizeAll(pins) {
        for (var pin of pins) normalize(pin);
    }

    function processMultiPoints(points, current, chunk, relative) {
        var count = Math.ceil(points.length / chunk);
        for (var i = 0; i < count; i ++) {
            var pin = points[i * chunk + (chunk - 1)];

            for (var j = 0; j < (chunk - 1); j ++) {
                var p = points[i * chunk + j];
                if (relative) {
                    p.x += current.x;
                    p.y += current.y;
                }

                p.fixed = true;
            }

            normalize(pin);

            if (relative) {
                pin.x += current.x;
                pin.y += current.y;
            }
            current = pin;
        }

        return current;
    }

    //parse the original data
    var RE = /([A-Z])([^A-Z]*)/gi;
    var commands = [];
    var result = null;
    var current = {x: 0, y: 0};
    while ((result = RE.exec(pathDataLiteral))) {
        var c = result[1];
        var command = {
            command: c.toUpperCase()
        };
        var data = result[2].trim();
        if (data) {
            var DATA_RE = /(-?[0-9.]+)(,(-?[0-9.]+))?/g;
            var points = [];
            var result2 = null;
            while ((result2 = DATA_RE.exec(data))) {
                var x = parseFloat(result2[1]);
                var y = result2[3];
                if (y) y = parseFloat(y);
                points.push({
                    x: x,
                    y: y
                });
            }

            if (c == "M" || c == "L" || c == "T") {
                normalizeAll(points);
                command.points = points;
                current = points[points.length - 1];
            } else if (c == "m" || c == "l" || c == "t") {
                for (var p of points) {
                    p.x += current.x;
                    p.y += current.y;

                    current = p;
                }
                normalizeAll(points);
                command.points = points;
            } else if (c == "H") {
                for (var p of points) {
                    console.log("HX:", p.x);
                    p.y = current.y;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "h") {
                for (var p of points) {
                    p.x += current.x;
                    p.y = current.y;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "V") {
                for (var p of points) {
                    p.y = p.x;
                    p.x = current.x;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "v") {
                for (var p of points) {
                    p.y = p.x + current.y;
                    p.x = current.x;
                    current = p;
                }
                normalizeAll(points);
                command.points = points;
                command.command = "L";
            } else if (c == "c" || c == "C") {
                current = processMultiPoints(points, current, 3, c == "c");
                command.points = points;
            } else if (c == "s" || c == "S") {
                current = processMultiPoints(points, current, 2, c == "s");

                command.points = points;
            } else if (c == "q" || c == "Q") {
                current = processMultiPoints(points, current, 2, c == "q");
                command.points = points;
            } else if ((c == "a" || c == "A") && points.length == 5) {
                for (var p of points) {
                    p.fixed = true;
                    p.noRelativeRecalcuate = true;
                    console.log("p.y", p.y);
                }
                var pin = points[4];
                pin.fixed = false;
                pin.noRelativeRecalcuate = false;
                if (c == "a") {
                    pin.x += current.y;
                    pin.y += current.y;
                }
                current = pin;

                normalizeAll(points);
                command.points = points;
                command.command = "A";
            }
        }

        commands.push(command);
    }

    return commands;

};

collection.calculateScaledPosition = function (value, models) {
    if (!models || models.length == 0) return value;
    var m = null;

    if (value < models[0].start) {
        m = models[0];
    } else {
        for (var model of models) {
            if (model.start <= value && value < (model.start + model.size)) {
                m = model;
                break;
            }
        }

        if (!m) m = models[models.length - 1];
    }

    if (m) {
        var d = value - m.start;

        if (m.scale) d *= m.r;

        return d + m.scaledStart;
    }

    return value;
};


collection.scalePathData = function (pathCommands, xCells, yCells, originalSize, newSize) {
    xCells = xCells || [];
    yCells = yCells || [];

    var xModel = collection.buildNPatchModel(xCells, originalSize.w, newSize.w);
    var yModel = collection.buildNPatchModel(yCells, originalSize.h, newSize.h);

    var newData = "";

    for (var command of pathCommands) {
        if (command.points) {
            var last = -1;
            for (var i = 0; i < command.points.length; i ++) {
                var pin = command.points[i];
                if (pin.fixed) {
                    continue;
                }

                var x = collection.calculateScaledPosition(pin.x, xModel);
                var y = collection.calculateScaledPosition(pin.y, yModel);

                for (var j = last + 1; j < i; j ++) {
                    if (command.points[j].noRelativeRecalcuate) continue;
                    command.points[j].x = x + command.points[j].x - pin.x;
                    if (typeof(command.points[j].y) == "number") command.points[j].y = y + command.points[j].y - pin.y;
                }

                pin.x = x;
                pin.y = y;
                last = i;
            }
        }

        if (newData) newData += " ";
        newData += command.command;
        if (command.points) {
            for (var i = 0; i < command.points.length; i ++) {
                var y = command.points[i].y;
                newData += (i > 0 ? " " : "") + command.points[i].x + (typeof(y) == "number" ? ("," + y) : "");
            }
        }
    }

    return newData;
};
collection.generatePathDOM = function (svgPathData, size, keepPathStyle) {
    var specs = [];
    var json = svgPathData.data;
    if (!json.startsWith("json:")) return specs;
    var parsedPathData = JSON.parse(json.substring(5));

    for (var info of parsedPathData) {
        var d = collection.scalePathData(info.commands, svgPathData.xCells, svgPathData.yCells, svgPathData, size);
        specs.push({
            _name: "path",
            _uri: PencilNamespaces.svg,
            d: d,
            style: keepPathStyle ? info.style : ""
        });
    }

    return Dom.newDOMFragment(specs);
};
collection.generateAdvancedRectPathData = function (box, strokeStyle, r, withTop, withRight, withBottom, withLeft, withTopLeftCorner, withTopRightCorner, withBottomRightCorner, withBottomLeftCorner) {
    var x = r * 4 * (Math.sqrt(2) - 1) / 3;
    var w = box.w - strokeStyle.w * ((withLeft ? 0.5 : 0) + (withRight ? 0.5 : 0));
    var h = box.h - strokeStyle.w * ((withTop ? 0.5 : 0) + (withBottom ? 0.5 : 0));
    var parts = [
    ];
    var close = true;
    if (withTop) {
        parts.push(L(w - (withRight && withTopRightCorner ? r : 0),0));
        if (withRight && withTopRightCorner && r > 0) parts.push(c(x,0,r,r-x,r,r));
    } else {
        parts.push(M(w,0));
        close = false;
    }

    if (withRight) {
        parts.push(L(w,h - (withBottom && withBottomRightCorner ? r : 0)));
        if (withBottom && withBottomRightCorner && r > 0) parts.push(c(0,x,x-r,r,0-r,r));
    } else {
        parts.push(M(w,h));
        close = false;
    }

    if (withBottom) {
        parts.push(L(withLeft && withBottomLeftCorner ? r : 0,h));
        if (withLeft && withBottomLeftCorner && r > 0) parts.push(c(x-r,0,0-r,x-r,0-r,0-r));
    } else {
        parts.push(M(0,h));
        close = false;
    }

    if (withLeft) {
        parts.push(L(0,withTop && withTopLeftCorner ? r : 0));
        if (withTop && withTopLeftCorner && r > 0) parts.push(c(0,0-x,r-x,0-r,r,0-r));
    } else {
        parts.push(M(0,0));
        close = false;
    }

    if (close) parts.push(z);

    var firstMove = -1;
    for (var i = 0; i < parts.length; i ++) {
        if (parts[i].indexOf("M") == 0) {
            firstMove = i;
            break;
        }
    }

    if (firstMove > 0) {
        while (firstMove > 0) {
            parts.push(parts.shift());
            firstMove --;
        }
    } else {
        parts.unshift(M(withLeft ? r : 0,0));
    }

    return parts;
};
collection.toColorizedDOMNode = function (svgXML, color) {
    if (!svgXML) return document.createDocumentFragment();

    var svg = Dom.parseDocument(svgXML);

    if (color) {
        var c = color.toRGBAString();
        Dom.workOn("//svg:*", svg, function (node) {
            if (node.style.fill != "none") {
                node.style.fill = c;
            }
            if (node.style.stroke && node.style.stroke != "none") {
                node.style.stroke = c;
            }

            var a = node.getAttribute("fill");
            if (a != "none") node.setAttribute("fill", c);

            a = node.getAttribute("stroke");
            if (a && a != "none") node.setAttribute("stroke", c);
        });
    }

    var g = svg.createElementNS(PencilNamespaces.svg, "g");
    while (svg.documentElement.firstChild) {
        var child = svg.documentElement.firstChild;
        svg.documentElement.removeChild(child);
        g.appendChild(child);
    }

    return g;
};
]]></Script>
  <Properties>
    <PropertyGroup name="Collection Properties">
      <Property name="primaryContentColor" displayName="Primary Content Color" type="Color">#00BCD4FF</Property>
      <Property name="invertedContentColor" displayName="Inverted Content Color" type="Color">#FFFFFFFF</Property>
      <Property name="defaultStrokeStyle" displayName="Default Line Style" type="StrokeStyle">1|</Property>
      <Property name="defaultFont" displayName="Default Font" type="Font">Android Roboto|normal|normal|14px|none</Property>
      <Property name="defaultTextColor" displayName="Default Text Color" type="Color">#000000FF</Property>
    </PropertyGroup>
  </Properties>
  <Shape id="phoneframe" displayName="Phone Frame" icon="icons/phoneframe.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">456,922</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor.shaded(0.56)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$invertedContentColor.shaded(0.62)</E>
        </Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":456,"gh0":922,"w0":456,"h0":922,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("6|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("6|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("64,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":456,"gh0":922,"w0":410,"h0":730,"x0":23,"y0":85}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":456,"gh0":922,"w0":17,"h0":17,"x0":62,"y0":29}, {"xPolicy":"relative","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("8.5,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":456,"gh0":922,"w0":73,"h0":7,"x0":192,"y0":34}, {"xPolicy":"middle","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("4,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle4">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":456,"gh0":922,"w0":27,"h0":10,"x0":215,"y0":65}, {"xPolicy":"middle","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("5,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle5">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":456,"gh0":922,"w0":2,"h0":54,"x0":456,"y0":215}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle6">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":456,"gh0":922,"w0":2,"h0":113,"x0":456,"y0":337}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle1 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":456,"gh0":922,"w0":410,"h0":730,"x0":23,"y0":85}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "R24"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "B24"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#7aee38dc8b5a491c9fd45eaaed68e238)" id="rectangle0" rx="64" ry="64" style="fill: rgb(112, 112, 112); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 6;" width="450" height="916"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#98f83bda83c04b78a6fee082017768dd)" id="rectangle1" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="410" height="730"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#ce8c6d520e7242659cc0c53bc664bc62)" id="rectangle2" rx="8.5" ry="8.5" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="17" height="17"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#02608fe37a954e7c8d5d5fe722e55bd4)" id="rectangle3" rx="4" ry="4" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="73" height="7"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#04d79074c4db420c86bd488a3e171268)" id="rectangle4" rx="5" ry="5" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="27" height="10"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#890ecf5a5ceb4b099827f991a2af63c0)" id="rectangle5" rx="0" ry="0" style="fill: rgb(96, 96, 96); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="2" height="54"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#0ecf0dc3791b454da54b26978188dee2)" id="rectangle6" rx="0" ry="0" style="fill: rgb(96, 96, 96); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="2" height="113"/>
    </Content>
  </Shape>
  <Shape id="systemheaderbar" displayName="System Header Bar" icon="icons/systemheaderbar.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">410,24</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor.shaded(0.87)</E>
        </Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">18,18,collection://vectors/systemheaderbar-vectorimage0.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (vectorImage1)" type="ImageData" p:disabled="true">24,24,collection://vectors/systemheaderbar-vectorimage1.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage2ImageData" displayName="Image Data (vectorImage2)" type="ImageData" p:disabled="true">24,24,collection://vectors/systemheaderbar-vectorimage2.svg</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">2,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.bolder(100)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:24,&quot;w0&quot;:39,&quot;h0&quot;:24,&quot;x0&quot;:364,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;end&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;fixed&quot;,&quot;hPolicy&quot;:&quot;relative&quot;}),font: $textFont,align: $textAlignment,richText: true})">2:58</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":24,"w0":410,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":24,"w0":18,"h0":18,"x0":331,"y0":3}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":24,"w0":18,"h0":18,"x0":313,"y0":3}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage2">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":24,"w0":18,"h0":18,"x0":351,"y0":3}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage2ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage2Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage2ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":24,"w0":39,"h0":24,"x0":364,"y0":0}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"relative"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":410,"gh0":24,"w0":410,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Top", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#cddecb8299f64dc1882ad3fd853fc4a1)" id="rectangle0" rx="0" ry="0" style="fill: rgb(32, 32, 32); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="410" height="24"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage2">
        <g id="vectorImage2Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#02d7c207c39849a3a411eaee22e64549)" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="titlebar" displayName="Title Bar" icon="icons/titlebar.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">410,56</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$invertedContentColor.shaded(0.62)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|4|0.5</Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">48,48,collection://vectors/titlebar-vectorimage0.svg</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.bolder(100).resized(0.4285714285714286)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:56,&quot;w0&quot;:271,&quot;h0&quot;:30,&quot;x0&quot;:72,&quot;y0&quot;:13}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Inbox</Property>
        <Property name="vectorImage1ImageData" displayName="Image Data (Icon 1)" type="ImageData">24,24,collection://vectors/titlebar-vectorimage1.svg</Property>
        <Property name="Icon2ImageData" displayName="Image Data (Icon 2)" type="ImageData">18,18,collection://vectors/titlebar-icon2.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage3ImageData" displayName="Image Data (vectorImage3)" type="ImageData" p:disabled="true">18,18,collection://vectors/titlebar-vectorimage3.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="navigationMode" displayName="Navigation Icon" type="Enum" p:enumValues="['menu|Menu', 'back|Back', 'none|None']">menu</Property>
        <Property name="withShadow" displayName="With Shadow" type="Bool">true</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":444,"h0":56,"x0":-15,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$withShadow.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle1_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle1_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":410,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$navigationMode.value == "menu"]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":24,"h0":24,"x0":16,"y0":16}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
if ($navigationMode.value == "none") {
bound.x -= 56;
bound.w += 56;
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":271,"h0":30,"x0":72,"y0":13}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vectorImage1">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":24,"h0":24,"x0":326,"y0":16}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="Icon2">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":24,"h0":24,"x0":374,"y0":16}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($Icon2ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="Icon2Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($Icon2ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage3">
        <Visibility>
          <Arg><![CDATA[$navigationMode.value == "back"]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":24,"h0":24,"x0":16,"y0":16}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage3ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage3Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage3ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":410,"h0":77,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#00000036")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage1Browse" displayName="Select Resource Images for Icon 1..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage1ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage1BrowseFile" displayName="Select Vector Image from File for Icon 1..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage1ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage1Remove" displayName="Remove Icon 1">
        <Impl><![CDATA[this.setProperty("vectorImage1ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="Icon2Browse" displayName="Select Resource Images for Icon 2..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("Icon2ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="Icon2BrowseFile" displayName="Select Vector Image from File for Icon 2..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("Icon2ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="Icon2Remove" displayName="Remove Icon 2">
        <Impl><![CDATA[this.setProperty("Icon2ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":410,"gh0":56,"w0":410,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#1d9f477a13134f5c9934d1b20111349f)" id="rectangle2" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.211765; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="410" height="77"/>
        </clipPath>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <defs>
          <filter id="rectangle1_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
        </defs>
        <g xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle1_globalGroup" p:filter="url(#rectangle1_shadowFilter)">
          <rect p:filter="url(#f04ac383c86c42c2b11d990270b16374)" id="rectangle1" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="444" height="56"/>
        </g>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#52300623fbae4b1c9a7e29d8d85af51f)" id="rectangle0" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="410" height="56"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#ad77eed9e50d4aaa8a51e572fabeb2f1)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="Icon2">
        <g id="Icon2Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage3">
        <g id="vectorImage3Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="bottomsoftkeybar" displayName="Bottom Softkey Bar" icon="icons/bottomsoftkeybar.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">410,56</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor.shaded(0.79)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$invertedContentColor.shaded(0.62)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="backImageData" displayName="Image Data (back)" type="ImageData" p:disabled="true">24,24,collection://vectors/bottomsoftkeybar-back.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage3ImageData" displayName="Image Data (vectorImage3)" type="ImageData" p:disabled="true">24,24,collection://vectors/bottomsoftkeybar-vectorimage3.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage2ImageData" displayName="Image Data (vectorImage2)" type="ImageData" p:disabled="true">24,24,collection://vectors/bottomsoftkeybar-vectorimage2.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":410,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="back">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":24,"h0":24,"x0":89,"y0":16}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($backImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="backImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($backImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage3">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":24,"h0":24,"x0":192,"y0":16}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage3ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage3Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage3ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage2">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":24,"h0":24,"x0":297,"y0":16}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage2ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage2Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage2ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":410,"gh0":56,"w0":410,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom2", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T-24"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#5de0b1328e274f1bafbda73e6e656602)" id="rectangle0" rx="0" ry="0" style="fill: rgb(53, 53, 53); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="410" height="56"/>
      <g xmlns="http://www.w3.org/2000/svg" id="back">
        <g id="backImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage3">
        <g id="vectorImage3Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage2">
        <g id="vectorImage2Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="bottomnavigationbar" displayName="Bottom Navigation Bar" icon="icons/bottomnavigationbar.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">410,56</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.8980392156862745)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":410,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":410,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, false, false, false, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":410,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((false) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":410,"gh0":56,"w0":410,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#ac2f45e3733247af984e1d66243fc425)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="410" height="56"/>
      <path xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#73b3e7f8e0034c1bbcd544c8c98e2426)" id="pathRect0" d="M 410 55.5 M 0 55.5 M 0 0 L 410 0" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 0.101961; stroke-width: 1;"/>
    </Content>
  </Shape>
  <Shape id="bottomnavigationitem" displayName="Bottom Navigation Item" icon="icons/bottomnavigationitem.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">137,56</Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$invertedContentColor.shaded(0.8)</E>
        </Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData">24,24,collection://vectors/bottomnavigationitem-vectorimage0.svg</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:137,&quot;gh0&quot;:56,&quot;w0&quot;:137,&quot;h0&quot;:10,&quot;x0&quot;:0,&quot;y0&quot;:36}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;end&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $active.value ? $textFont : $textFont.resized(-0.143),align: $textAlignment,richText: true})">Normal Item</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property name="active" displayName="Active" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":137,"gh0":56,"w0":137,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
if (!$active.value) {
bound.y += 2;
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":137,"gh0":56,"w0":24,"h0":24,"x0":56,"y0":6}, {"xPolicy":"middle","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}))));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$active.value ? $textFont : $textFont.resized(-0.143)]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":137,"gh0":56,"w0":137,"h0":10,"x0":0,"y0":36}, {"xPolicy":"start","yPolicy":"end","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for vectorImage0..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0BrowseFile" displayName="Select Vector Image from File for vectorImage0..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove vectorImage0">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":137,"gh0":56,"w0":137,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#dac92e03f5054d99a379c318b09723a6)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="137" height="56"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#ade38a0e1d114a3c959fe1faf269dd76)" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="button" displayName="Button" icon="icons/button.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,36</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|1|1.5|0</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.bolder(100)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:120,&quot;gh0&quot;:36,&quot;w0&quot;:120,&quot;h0&quot;:36,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">BUTTON</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":120,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("2,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":36,"w0":120,"h0":36,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle0_globalGroup" p:filter="url(#rectangle0_shadowFilter)">
        <rect p:filter="url(#693639ed38f54eabb6408ec2f6013902)" id="rectangle0" rx="2" ry="2" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="120" height="36"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#9b78d6452edd4ddb95a6408fc9807334)" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="fab" displayName="FAB" icon="icons/fab.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">56,56</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$invertedContentColor.shaded(0.62)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|3|4|0.3</Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData">24,24,collection://vectors/fab-vectorimage0.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":56,"gh0":56,"w0":56,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle(Math.round($box.w / 2), 0)).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle1_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle1_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":56,"gh0":56,"w0":24,"h0":24,"x0":16,"y0":16}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for vectorImage0..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("Icon", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0BrowseFile" displayName="Select Vector Image from File for vectorImage0..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove vectorImage0">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle1_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle1_globalGroup" p:filter="url(#rectangle1_shadowFilter)">
        <rect p:filter="url(#03ff32da084a4ba285e86e8ae1b2effb)" id="rectangle1" rx="28" ry="28" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="56" height="56"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="card" displayName="Card" icon="icons/card.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">394,260</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|2|1|0.2</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":394,"gh0":260,"w0":394,"h0":260,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("2.0846560846560847,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":394,"gh0":260,"w0":394,"h0":260,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L16"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left2", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L8"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T16"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R16"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right2", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R8"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B16"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom2", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B8"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle0_globalGroup" p:filter="url(#rectangle0_shadowFilter)">
        <rect p:filter="url(#16f769fdf557447d924ee29576d3d736)" id="rectangle0" rx="2.0846560846560847" ry="2.0846560846560847" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="394" height="260"/>
      </g>
    </Content>
  </Shape>
  <Shape id="chip" displayName="Chip" icon="icons/chip.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">140,32</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor.shaded(0.17000000000000004)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$invertedContentColor.shaded(0.62)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|2|1|0</Property>
        <Property name="bitmap0ImageData" displayName="Image Data (bitmap0)" type="ImageData">305,290,collection://bitmaps/chip-bitmap0.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://vectors/chip-vectorimage0.svg</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.resized(-0.0714285714285714)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:140,&quot;gh0&quot;:32,&quot;w0&quot;:140,&quot;h0&quot;:32,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Chip One</Property>
        <Property name="withDelete" displayName="With Delete Action" type="Bool">true</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":140,"gh0":32,"w0":140,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("14.933333333333334,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="bitmap0">
        <Visibility>
          <Arg><![CDATA[$bitmap0ImageData.w > 0]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":140,"gh0":32,"w0":32,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));
var imageData = ($bitmap0ImageData);

[translate(bound.x, bound.y), scale(imageData.w <= 0 ? 1 : bound.w / imageData.w, imageData.h <= 0 ? 1 : bound.h / imageData.h)];]]></Arg>
        </Transform>
      </For>
      <For ref="bitmap0image">
        <Image>
          <Arg><![CDATA[$bitmap0ImageData]]></Arg>
        </Image>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":140,"gh0":32,"w0":32,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("16,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$withDelete.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":140,"gh0":32,"w0":20,"h0":20,"x0":114,"y0":6}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), Color.fromString("#606060B3"))]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
if ($withDelete.value) {
bound.w -= 26;
}
if ($bitmap0ImageData.w > 0) {
bound.x += 32;
bound.w -= 32;
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":140,"gh0":32,"w0":140,"h0":32,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="bitmap0CopyClipboard" displayName="Use Clipboard Data as bitmap0">
        <Impl><![CDATA[this.def.collection.copyClipboardImage(this, "bitmap0ImageData");]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0Browse" displayName="Select Resource Images for bitmap0..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("Chip Image", CollectionResourceBrowserDialog.TYPE_BITMAP, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("bitmap0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0BrowseFile" displayName="Select Bitmap from File for bitmap0..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("bitmap0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="bitmap0Remove" displayName="Remove bitmap0">
        <Impl><![CDATA[this.setProperty("bitmap0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#6660819527fb4c54baf8043ee2873970)" id="rectangle1" rx="16" ry="16" style="fill: rgb(0, 0, 0); fill-opacity: 0.121569; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="32" height="32"/>
        </clipPath>
      </defs>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle0_globalGroup" p:filter="url(#rectangle0_shadowFilter)">
        <rect p:filter="url(#fc110b67a5a040d58dd771dd9271dc29)" id="rectangle0" rx="14.933333333333334" ry="14.933333333333334" style="fill: rgb(212, 212, 212); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="140" height="32"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <g id="bitmap0">
          <image id="bitmap0image" x="0" y="0"/>
        </g>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#ebb58f9867884bae9ec1cb0f0b21135d)" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="datatablecell" displayName="Data Table Cell" icon="icons/datatablecell.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,48</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor.hollowed(1)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$invertedContentColor.shaded(0.19999999999999996)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://vectors/datatablecell-vectorimage0.svg</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.resized(-0.0714285714285714)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:48,&quot;w0&quot;:92,&quot;h0&quot;:30,&quot;x0&quot;:66,&quot;y0&quot;:9}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Text Content</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (vectorImage1)" type="ImageData" p:disabled="true">24,24,collection://vectors/datatablecell-vectorimage1.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="checkMode" displayName="Check Box Mode" type="Enum" p:enumValues="['checked|Checked', 'unchecked|Unchecked', 'none|None']">checked</Property>
        <Property name="trailingIconImageData" displayName="Image Data (Trailing Icon)" type="ImageData">24,24,collection://vectors/datatablecell-trailingicon.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":245,"h0":66,"x0":-21,"y0":-18}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":245,"h0":66,"x0":-21,"y0":-18}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$checkMode.value == 'unchecked']]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":24,"h0":24,"x0":21,"y0":12}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), Color.fromString("#606060FF"))]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.8 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.3333 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }((function (bound) {
if ($checkMode.value == 'none') {
bound.x -= 42;
bound.w += 42;
}
if ($trailingIconImageData.w <= 0) {
bound.w += 18;
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":92,"h0":30,"x0":66,"y0":9}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.8 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.3333 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }((function (bound) {
if ($checkMode.value == 'none') {
bound.x -= 42;
bound.w += 42;
}
if ($trailingIconImageData.w <= 0) {
bound.w += 18;
}
return bound;
}(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":92,"h0":30,"x0":66,"y0":9}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Visibility>
          <Arg><![CDATA[$checkMode.value == 'checked']]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":24,"h0":24,"x0":21,"y0":12}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), Color.fromString("#00BCD4FF"))]]></Arg>
        </DomContent>
      </For>
      <For ref="trailingIcon">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":18,"h0":18,"x0":158,"y0":15}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($trailingIconImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="trailingIconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($trailingIconImageData).getDataAsXML(), Color.fromString("#0000008A"))]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0BrowseFile" displayName="Select Vector Image from File for Text Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("text0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="trailingIconBrowse" displayName="Select Resource Images for Trailing Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("trailingIconImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="trailingIconBrowseFile" displayName="Select Vector Image from File for Trailing Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("trailingIconImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="trailingIconRemove" displayName="Remove Trailing Icon">
        <Impl><![CDATA[this.setProperty("trailingIconImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#c1b914aabfbe4797bbf3eb77de3b233f)" id="rectangle0" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.129412; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="200" height="48"/>
        </clipPath>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <path xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#820f92b3aab4428d85392f6601564aee)" id="pathRect0" d="M 0 0 L 244 0 L 244 65 L 0 65 L 0 0 z" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(204, 204, 204); stroke-opacity: 1; stroke-width: 1;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#7e68ecf2880a457e9c8b371fdad84d67)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="trailingIcon">
        <g id="trailingIconImage" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="datatableheader" displayName="Data Table Header" icon="icons/datatableheader.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">394,64</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor.hollowed(1)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$invertedContentColor.shaded(0.62)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.resized(0.4285714285714286)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:394,&quot;gh0&quot;:64,&quot;w0&quot;:297,&quot;h0&quot;:40,&quot;x0&quot;:24,&quot;y0&quot;:12}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Table Header</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="trailingIconImageData" displayName="Image Data (Trailing Icon)" type="ImageData">24,24,collection://vectors/datatableheader-trailingicon.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":394,"gh0":64,"w0":394,"h0":64,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.8 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.3333 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":394,"gh0":64,"w0":297,"h0":40,"x0":24,"y0":12}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.8 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.3333 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(collection.calculateBoundsFromPolicy($box, {"gw0":394,"gh0":64,"w0":297,"h0":40,"x0":24,"y0":12}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="trailingIcon">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":394,"gh0":64,"w0":24,"h0":24,"x0":356,"y0":20}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($trailingIconImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="trailingIconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($trailingIconImageData).getDataAsXML(), Color.fromString("#0000008A"))]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0BrowseFile" displayName="Select Vector Image from File for Text Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("text0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="trailingIconBrowse" displayName="Select Resource Images for Trailing Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("trailingIconImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="trailingIconBrowseFile" displayName="Select Vector Image from File for Trailing Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("trailingIconImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="trailingIconRemove" displayName="Remove Trailing Icon">
        <Impl><![CDATA[this.setProperty("trailingIconImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":394,"gh0":64,"w0":394,"h0":64,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R62"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right2", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R110"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#e820912bac6b47e4822d45d7e20c0549)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="394" height="64"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#381a7d24b7894af9bc76867fc55a7c64)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="trailingIcon">
        <g id="trailingIconImage" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="dialog" displayName="Dialog" icon="icons/dialog.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">320,200</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|10|15|0.3</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.bolder(100).resized(0.4285714285714286)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:320,&quot;gh0&quot;:200,&quot;w0&quot;:272,&quot;h0&quot;:26,&quot;x0&quot;:24,&quot;y0&quot;:24}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: $textAlignment,richText: true})">Usu undas fossae</Property>
        <Property name="textAlignment2" displayName="Other Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor2" displayName="Other Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont2" displayName="Other Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: collection.toBounds($box, &quot;L24,text0.B-20,R24,B24&quot;)/* @depends: $textAlignment, $textFont, $text0 */,font: $textFont2,align: $textAlignment2,richText: true})">Flamma speciem permisit nunc longo altae bracchia stagna diverso deorum.</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text2" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text2text&quot;,bound: collection.toBounds($box, &quot;R250,B40,R16,B19&quot;),font: $buttonFont,align: Alignment.fromString(&quot;2,2&quot;),richText: true})">LOREM IPSUM</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text3" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text3text&quot;,bound: collection.toBounds($box, &quot;L0,B40,text2.L-24,B19&quot;)/* @depends: Alignment.fromString(&quot;2,2&quot;), $buttonFont, $text2 */,font: $buttonFont,align: Alignment.fromString(&quot;2,2&quot;),richText: true})">SANCTIUS</Property>
        <Property name="buttonFont" displayName="Button Font" type="Font">
          <E>$$defaultFont.bolder(100)</E>
        </Property>
        <Property name="buttonColor" displayName="property1" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":320,"gh0":200,"w0":320,"h0":200,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("2,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle1_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle1_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":320,"gh0":200,"w0":272,"h0":26,"x0":24,"y0":24}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text1text">
        <Fill>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont2]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.toBounds($box, "L24,text0.B-20,R24,B24")/* @depends: $textAlignment, $textFont, $text0 */]]></Arg>
          <Arg><![CDATA[$textAlignment2]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text2text">
        <Fill>
          <Arg><![CDATA[$buttonColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$buttonColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$buttonFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text2]]></Arg>
          <Arg><![CDATA[collection.toBounds($box, "R250,B40,R16,B19")]]></Arg>
          <Arg><![CDATA[Alignment.fromString("2,2")]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text3text">
        <Fill>
          <Arg><![CDATA[$buttonColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$buttonColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$buttonFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text3]]></Arg>
          <Arg><![CDATA[collection.toBounds($box, "L0,B40,text2.L-24,B19")/* @depends: Alignment.fromString("2,2"), $buttonFont, $text2 */]]></Arg>
          <Arg><![CDATA[Alignment.fromString("2,2")]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle1 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":320,"gh0":200,"w0":320,"h0":200,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "L16"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left2", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "L8"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "T16"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "R16"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right2", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "R8"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "B16"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom2", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "B8"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle1_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle1_globalGroup" p:filter="url(#rectangle1_shadowFilter)">
        <rect p:filter="url(#19e36d9f89e540eeaa5e1af01466a1aa)" id="rectangle1" rx="2" ry="2" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="320" height="200"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#4add4d0fe08b4849972d760f91fcf68d)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#84ccf11f69c941f1a14344c7e81e1006)" id="text1text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#0d603ce83cd947299d6e1587e90bba23)" id="text2text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#eccf49333f084421a73efd337de06c78)" id="text3text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="fullscreendialogtitlebar" displayName="Full Screen Dialog Title Bar" icon="icons/fullscreendialogtitlebar.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">410,56</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$invertedContentColor.shaded(0.62)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|4|0.5</Property>
        <Property name="textColor" displayName="textColor" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (vectorImage0)" type="ImageData" p:disabled="true">24,24,collection://vectors/fullscreendialogtitlebar-vectorimage0.svg</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.bolder(100).resized(0.4285714285714286)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:56,&quot;w0&quot;:251,&quot;h0&quot;:30,&quot;x0&quot;:72,&quot;y0&quot;:13}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Dialog title</Property>
        <Property name="withShadow" displayName="With Shadow" type="Bool">true</Property>
        <Property name="textColor2" displayName="Other Text Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="textFont2" displayName="Other Text Font" type="Font">
          <E>$$defaultFont.bolder(100)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:56,&quot;w0&quot;:93,&quot;h0&quot;:20,&quot;x0&quot;:301,&quot;y0&quot;:18}, {&quot;xPolicy&quot;:&quot;end&quot;,&quot;yPolicy&quot;:&quot;middle&quot;,&quot;wPolicy&quot;:&quot;fixed&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont2,align: Alignment.fromString(&quot;2,1&quot;),richText: true})">SAVE</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":444,"h0":56,"x0":-15,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$withShadow.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle1_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle1_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":410,"h0":77,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#00000036")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#606060FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":410,"h0":56,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":24,"h0":24,"x0":16,"y0":16}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $textColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":251,"h0":30,"x0":72,"y0":13}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text1text">
        <Fill>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont2]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":56,"w0":93,"h0":20,"x0":301,"y0":18}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[Alignment.fromString("2,1")]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#ed19e785b010417bb6d63ab8af893bee)" id="rectangle2" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.211765; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="410" height="77"/>
        </clipPath>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <defs>
          <filter id="rectangle1_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
        </defs>
        <g xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle1_globalGroup" p:filter="url(#rectangle1_shadowFilter)">
          <rect p:filter="url(#69190334b1f24ac49617a361406b806c)" id="rectangle1" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="444" height="56"/>
        </g>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#39d26c2b52be413ea3be44c706beb31a)" id="rectangle0" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(96, 96, 96); stroke-opacity: 1; stroke-width: 0;" width="410" height="56"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#6d5b37f5a4b54eb3abd1e16bcb95243e)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#361a08c5df1a47248490d4a3e1095beb)" id="text1text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="listitem" displayName="List Item" icon="icons/listitem.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">410,72</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor.hollowed(1)</E>
        </Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$invertedContentColor.shaded(0.19999999999999996)</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.resized(0.1428571428571428)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:72,&quot;w0&quot;:322,&quot;h0&quot;:16,&quot;x0&quot;:72,&quot;y0&quot;:17}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: $textAlignment,richText: true})">List item primary title</Property>
        <Property name="textAlignment2" displayName="Other Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor2" displayName="Other Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.29803921568627456)</E>
        </Property>
        <Property name="textFont2" displayName="Other Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:72,&quot;w0&quot;:322,&quot;h0&quot;:14,&quot;x0&quot;:72,&quot;y0&quot;:38}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont2,align: $textAlignment2,richText: true})">Circumfluus aeris obsistitur ardentior fert</Property>
        <Property name="strokeColor" displayName="strokeColor" type="Color">
          <E>$$defaultTextColor.hollowed(0.8784313725490196)</E>
        </Property>
        <Property name="bitmap0ImageData" displayName="Image Data (Avatar)" type="ImageData">137,127,collection://bitmaps/listitem-bitmap0.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text2" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text2text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:72,&quot;w0&quot;:40,&quot;h0&quot;:40,&quot;x0&quot;:16,&quot;y0&quot;:16}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;fixed&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: Font.fromString(&quot;Arial|bold|normal|14px|none&quot;),align: Alignment.fromString(&quot;1,1&quot;),richText: true})"/>
        <Property name="avatarTextColor" displayName="Avatar Text Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="withDivider" displayName="With Divider" type="Bool">true</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="insetDivider" displayName="Use Inset Divider" type="Bool" p:disabled="!$withDivider.value">true</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":72,"w0":410,"h0":72,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":72,"w0":40,"h0":40,"x0":16,"y0":16}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("20,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":72,"w0":322,"h0":16,"x0":72,"y0":17}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text1text">
        <Fill>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont2]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":72,"w0":322,"h0":14,"x0":72,"y0":38}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment2]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(new Bound($insetDivider.value ? 72 : 0, $box.h - 1, $insetDivider.value ? $box.w - 72 : $box.w, 1)).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$withDivider.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="bitmap0">
        <Visibility>
          <Arg><![CDATA[!$text2.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":72,"w0":40,"h0":40,"x0":16,"y0":16}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));
var imageData = ($bitmap0ImageData);

[translate(bound.x, bound.y), scale(imageData.w <= 0 ? 1 : bound.w / imageData.w, imageData.h <= 0 ? 1 : bound.h / imageData.h)];]]></Arg>
        </Transform>
      </For>
      <For ref="bitmap0image">
        <Image>
          <Arg><![CDATA[$bitmap0ImageData]]></Arg>
        </Image>
      </For>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":72,"w0":40,"h0":40,"x0":16,"y0":16}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#00000054")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("20,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text2text">
        <Fill>
          <Arg><![CDATA[$avatarTextColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$avatarTextColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[Font.fromString("Arial|bold|normal|14px|none")]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text2]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":72,"w0":40,"h0":40,"x0":16,"y0":16}, {"xPolicy":"start","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[Alignment.fromString("1,1")]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="bitmap0CopyClipboard" displayName="Use Clipboard Data as Avatar">
        <Impl><![CDATA[this.def.collection.copyClipboardImage(this, "bitmap0ImageData");]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0Browse" displayName="Select Resource Images for Avatar..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_BITMAP, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("bitmap0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0BrowseFile" displayName="Select Bitmap from File for Avatar..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("bitmap0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="bitmap0Remove" displayName="Remove Avatar">
        <Impl><![CDATA[this.setProperty("bitmap0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle1 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":410,"gh0":72,"w0":410,"h0":72,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle1, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="avatarClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#bffe7335c72a4b9390ed067a4c945076)" id="rectangle3" rx="20" ry="20" style="fill: rgb(0, 0, 0); fill-opacity: 0.329412; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="40" width="40"/>
        </clipPath>
      </defs>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#2fdbeb2498fd49149a880e77cdf4d5bc)" id="rectangle1" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="72" width="410"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#92102da798254dceab4b8315e2cd0651)" id="rectangle0" rx="20" ry="20" style="fill: rgb(204, 204, 204); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="40" width="40"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#79c1b8165fc746eba281de3d8e66bf68)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#d5cbe4a1feff416b82d06daa8ff812e9)" id="text1text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#aa2657f8d6f44cfe8ed2c9aeac6c9a06)" id="rectangle2" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.121569; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="1" width="410"/>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#avatarClipPath);">
        <g id="bitmap0">
          <image id="bitmap0image" x="0" y="0"/>
        </g>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#62173d57ac03462a82dd98bc338a0a56)" id="text2text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="checkboxes" displayName="Checkboxes" icon="icons/checkboxes.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">24,24</Property>
        <Property name="fillColor" displayName="On State Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (On State)" type="ImageData" p:disabled="true">24,24,collection://vectors/checkboxes-vectorimage0.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (vectorImage1)" type="ImageData" p:disabled="true">24,24,collection://vectors/checkboxes-vectorimage1.svg</Property>
        <Property name="checked" displayName="Checked" type="Bool">true</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage2ImageData" displayName="Image Data (vectorImage2)" type="ImageData" p:disabled="true">24,24,collection://vectors/checkboxes-vectorimage2.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage3ImageData" displayName="Image Data (vectorImage3)" type="ImageData" p:disabled="true">24,24,collection://vectors/checkboxes-vectorimage3.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$checked.value && !$disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $fillColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Visibility>
          <Arg><![CDATA[!$checked.value && !$disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), Color.fromString("#0000008A"))]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage2">
        <Visibility>
          <Arg><![CDATA[!$checked.value && $disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage2ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage2Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage2ImageData).getDataAsXML(), Color.fromString("#00000042"))]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage3">
        <Visibility>
          <Arg><![CDATA[$checked.value && $disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage3ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage3Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage3ImageData).getDataAsXML(), Color.fromString("#00000042"))]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#5c8dbbbc7f6d45218a1069a18c9588d9)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="24" height="24"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage2">
        <g id="vectorImage2Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage3">
        <g id="vectorImage3Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="radio" displayName="Radio" icon="icons/radio.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">24,24</Property>
        <Property name="fillColor" displayName="On State Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage0ImageData" displayName="Image Data (On State)" type="ImageData" p:disabled="true">24,24,collection://vectors/radio-vectorimage0.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage1ImageData" displayName="Image Data (vectorImage1)" type="ImageData" p:disabled="true">24,24,collection://vectors/radio-vectorimage1.svg</Property>
        <Property name="checked" displayName="Checked" type="Bool">true</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage2ImageData" displayName="Image Data (vectorImage2)" type="ImageData" p:disabled="true">24,24,collection://vectors/radio-vectorimage2.svg</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="vectorImage3ImageData" displayName="Image Data (vectorImage3)" type="ImageData" p:disabled="true">24,24,collection://vectors/radio-vectorimage3.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Visibility>
          <Arg><![CDATA[$checked.value && !$disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $fillColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Visibility>
          <Arg><![CDATA[!$checked.value && !$disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), Color.fromString("#0000008A"))]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage2">
        <Visibility>
          <Arg><![CDATA[!$checked.value && $disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage2ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage2Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage2ImageData).getDataAsXML(), Color.fromString("#00000042"))]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage3">
        <Visibility>
          <Arg><![CDATA[$checked.value && $disabled.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"middle","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage3ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage3Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage3ImageData).getDataAsXML(), Color.fromString("#00000042"))]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#b949a21167004aaeba0489e06173e37b)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="24" height="24"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage2">
        <g id="vectorImage2Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage3">
        <g id="vectorImage3Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="avatar" displayName="Avatar" icon="icons/avatar.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">40,40</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor.shaded(0.19999999999999996)</E>
        </Property>
        <Property name="bitmap0ImageData" displayName="Image Data (Avatar)" type="ImageData">137,127,collection://bitmaps/avatar-bitmap0.png</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">Arial|bold|normal|14px|none</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text2" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text2text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:40,&quot;gh0&quot;:40,&quot;w0&quot;:40,&quot;h0&quot;:40,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: Alignment.fromString(&quot;1,1&quot;),richText: true})"/>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":40,"gh0":40,"w0":40,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="bitmap0">
        <Visibility>
          <Arg><![CDATA[!$text2.value]]></Arg>
        </Visibility>
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":40,"gh0":40,"w0":40,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}));
var imageData = ($bitmap0ImageData);

[translate(bound.x, bound.y), scale(imageData.w <= 0 ? 1 : bound.w / imageData.w, imageData.h <= 0 ? 1 : bound.h / imageData.h)];]]></Arg>
        </Transform>
      </For>
      <For ref="bitmap0image">
        <Image>
          <Arg><![CDATA[$bitmap0ImageData]]></Arg>
        </Image>
      </For>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":40,"gh0":40,"w0":40,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#00000054")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($box.w/2, $box.w/2)).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text2text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text2]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":40,"gh0":40,"w0":40,"h0":40,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[Alignment.fromString("1,1")]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="bitmap0CopyClipboard" displayName="Use Clipboard Data as Avatar">
        <Impl><![CDATA[this.def.collection.copyClipboardImage(this, "bitmap0ImageData");]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0Browse" displayName="Select Resource Images for Avatar..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_BITMAP, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("bitmap0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0BrowseFile" displayName="Select Bitmap from File for Avatar..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("bitmap0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="bitmap0Remove" displayName="Remove Avatar">
        <Impl><![CDATA[this.setProperty("bitmap0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="avatarClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#5cb7632a055847a5969063875af1752f)" id="rectangle3" rx="20" ry="20" style="fill: rgb(0, 0, 0); fill-opacity: 0.329412; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="40" width="40"/>
        </clipPath>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#avatarClipPath);">
        <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#8616f614321d4e35b757e6283a3f6dd1)" id="rectangle0" rx="0" ry="0" style="fill: rgb(204, 204, 204); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="40" width="40"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#avatarClipPath);">
        <g id="bitmap0">
          <image id="bitmap0image" x="0" y="0"/>
        </g>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#f428dbf8eab9407597e1fccd4ad24b86)" id="text2text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="textview" displayName="Text View" icon="icons/textview.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,18</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:18,&quot;w0&quot;:200,&quot;h0&quot;:18,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Septemque secant pendebat</Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|0|0</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":18,"w0":200,"h0":18,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = StrokeStyle.fromString("0|");
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":18,"w0":200,"h0":18,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":18,"w0":200,"h0":18,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="text0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <path xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#64cd8fd897dd469ea0ef8b37f3b44c46)" id="pathRect0" d="M 0 0 L 200 0 L 200 18 L 0 18 L 0 0 z" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="text0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0_globalGroup" p:filter="url(#text0_shadowFilter)">
        <g p:filter="url(#868a972c6dae418cb9e0c13f7016efc8)" id="text0text" dominant-baseline="auto"/>
      </g>
    </Content>
  </Shape>
  <Shape id="toggle-on" displayName="Toggle - On" icon="icons/toggle-on.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">36,20</Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|1|1|0.4</Property>
        <Property name="fillColor" displayName="Fill Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":36,"gh0":20,"w0":36,"h0":14,"x0":0,"y0":3}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"start-end","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$disabled.value ? Color.fromString("#00000012") : $fillColor.hollowed(0.5)]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("7,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":36,"gh0":20,"w0":20,"h0":20,"x0":16,"y0":0}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$disabled.value ? Color.fromString("#BDBDBDFF") : $fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("10,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#a0626b14e6ec423eb3ea0e16d8c4d4e9)" id="rectangle1" rx="7" ry="7" style="fill: rgb(0, 188, 212); fill-opacity: 0.501961; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="14" width="36"/>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle0_globalGroup" p:filter="url(#rectangle0_shadowFilter)">
        <rect p:filter="url(#d8455853d80643a4813b30c1a5f75eb8)" id="rectangle0" rx="10" ry="10" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="20" width="20"/>
      </g>
    </Content>
  </Shape>
  <Shape id="toggle-off" displayName="Toggle - Off" icon="icons/toggle-off.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">36,20</Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|1|1|0.4</Property>
        <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":36,"gh0":20,"w0":36,"h0":14,"x0":0,"y0":3}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"start-end","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$disabled.value ? Color.fromString("#00000012") : Color.fromString("#00000038")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("7,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":36,"gh0":20,"w0":20,"h0":20,"x0":0,"y0":0}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$disabled.value ? Color.fromString("#BDBDBDFF") : Color.fromString("#FAFAFAFF")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("10,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#af9dd863784d4871b743c5a711935d73)" id="rectangle1" rx="7" ry="7" style="fill: rgb(0, 0, 0); fill-opacity: 0.380392; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="14" width="36"/>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle0_globalGroup" p:filter="url(#rectangle0_shadowFilter)">
        <rect p:filter="url(#6b8cfbd564424da49869d6fbacca8da6)" id="rectangle0" rx="10" ry="10" style="fill: rgb(250, 250, 250); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="20" width="20"/>
      </g>
    </Content>
  </Shape>
  <Shape id="inputtext-single" displayName="Input Text - Single" icon="icons/inputtext-single.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,48</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor.hollowed(1)</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.580392156862745)</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.resized(0.1428571428571428)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text1" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text1text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:48,&quot;w0&quot;:200,&quot;h0&quot;:20,&quot;x0&quot;:0,&quot;y0&quot;:20}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Input</Property>
        <Property name="textFont2" displayName="Other Text Font" type="Font">
          <E>$$defaultFont.resized(-0.1428571428571429)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:48,&quot;w0&quot;:200,&quot;h0&quot;:12,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont2,align: $textAlignment,richText: true})">Label</Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Icon)" type="ImageData">24,24,collection://vectors/inputtext-single-vectorimage0.svg</Property>
        <Property name="iconColor" displayName="Icon Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="Caret Position" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true" p:disabled="!$withCaret.value" p:noScale="true">0,0</Property>
        <Property name="withCaret" displayName="With Caret" type="Bool">false</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text2" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text2text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:48,&quot;w0&quot;:200,&quot;h0&quot;:12,&quot;x0&quot;:-1,&quot;y0&quot;:56}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;end&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont2,align: $textAlignment,richText: true})">Help text (optional)</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = Handle.fromString("0,0");
return collection.generateAdvancedRectPathData(b, s, r.x, false, false, true, false, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((false) ? (s.w / 2) : 0) + b.x, ((false) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="text1text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text1]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":20,"x0":0,"y0":20}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont2]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":12,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":24,"h0":24,"x0":176,"y0":16}, {"xPolicy":"end","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $iconColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.toBounds($box, "H0X0,T18,H0X1,B6", $handle0)).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$withCaret.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text2text">
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont2]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text2]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":48,"w0":200,"h0":12,"x0":-1,"y0":56}, {"xPolicy":"start","yPolicy":"end","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0BrowseFile" displayName="Select Vector Image from File for Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Icon">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#e0dccf3d615d4998851f568b6dfccdfc)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="200" height="48"/>
      <path xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#86497b6d5b04484094a775fd02b75625)" id="pathRect0" d="M 0 0 M 200 0 M 200 47.5 L 0 47.5 M 0 0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 0.419608; stroke-width: 1;"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#87f9b99f3f3d4d35837450fc97771f0e)" id="text1text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#f9a6ee1ae9ed40a48cc3b658399a34f6)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#fa3673619023477ea67d906943009364)" id="rectangle1" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.870588; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="1" height="20"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#de6d15fb821045af82a3e79330489ca5)" id="text2text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="snackbar" displayName="Snackbar" icon="icons/snackbar.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">410,48</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor.shaded(0.8)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="radius" displayName="Corner Radius" type="Handle" p:minX="(collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:48,&quot;w0&quot;:410,&quot;h0&quot;:48,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).x" p:lockY="true" p:maxX="(collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:48,&quot;w0&quot;:410,&quot;h0&quot;:48,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).x + Math.round((collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:48,&quot;w0&quot;:410,&quot;h0&quot;:48,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).w / 2)">0,0</Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|0|1</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.toBounds($box, &quot;L24,T14,R24,B14&quot;),font: $textFont,align: $textAlignment,richText: true})">Message is archived</Property>
        <Property name="textColor2" displayName="Other Text Color" type="Color">#FFFF00DE</Property>
        <Property name="textFont2" displayName="Other Text Font" type="Font">
          <E>$$defaultFont.bolder(100)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="textAction" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;textActiontext&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:410,&quot;gh0&quot;:48,&quot;w0&quot;:144,&quot;h0&quot;:20,&quot;x0&quot;:242,&quot;y0&quot;:14}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont2,align: Alignment.fromString(&quot;2,1&quot;),richText: true})">UNDO</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":48,"w0":410,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, ($radius).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.toBounds($box, "L24,T14,R24,B14")]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="textActiontext">
        <Fill>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor2]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont2]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$textAction]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":410,"gh0":48,"w0":144,"h0":20,"x0":242,"y0":14}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[Alignment.fromString("2,1")]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle0_globalGroup" p:filter="url(#rectangle0_shadowFilter)">
        <rect p:filter="url(#043614bf39134a0c9a693839a266d5fd)" id="rectangle0" rx="0" ry="0" style="fill: rgb(50, 50, 50); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="410" height="48"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#e22d30b7a4054f35be5d5d70112a8835)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#c4b1e4a3bb7c410480808f4a5bec5fac)" id="textActiontext" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="progress" displayName="Progress" icon="icons/progress.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">360,4</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.8784313725490196)</E>
        </Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="handle0" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true">134,2</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle1" displayName="handle1" type="Handle" p:minX="0" p:maxX="$box.w" p:lockY="true" p:disabled="!$withBuffer.value">212,2</Property>
        <Property name="bufferColor" displayName="Buffer Color" type="Color">
          <E>$$primaryContentColor.hollowed(0.7803921568627451)</E>
        </Property>
        <Property name="withBuffer" displayName="With Buffer" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":360,"gh0":4,"w0":360,"h0":4,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle2">
        <Bound>
          <Arg><![CDATA[(collection.toBounds($box, "L0,T0,H1X0,B0", null, $handle1)).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$withBuffer.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$bufferColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.toBounds($box, "L0,T0,H0X0,B0", $handle0)).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":360,"gh0":4,"w0":360,"h0":17,"x0":0,"y0":-6}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#00BCD400")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#1a2214cf0a5f413ba04b8a6f2c2aeb0c)" id="rectangle0" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.121569; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="360" height="4"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#897443f4b0314d779557db8ce814d5bf)" id="rectangle2" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 0.219608; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="212" height="4"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#be37a27fde3a46acbe5bddb9fea467bd)" id="rectangle1" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="134" height="4"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#11e24a116ecd49ea8b8b091ae1cf9113)" id="rectangle3" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="360" height="17"/>
    </Content>
  </Shape>
  <Shape id="progress-indeterminate" displayName="Progress - Indeterminate" icon="icons/progress-indeterminate.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">360,4</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.8784313725490196)</E>
        </Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle0" displayName="handle0" type="Handle" p:minX="0" p:maxX="$handle1.x - 10" p:lockY="true">78,2</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle1" displayName="handle1" type="Handle" p:minX="$handle0.x + 10" p:maxX="$box.w" p:lockY="true">212,2</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle3">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":360,"gh0":4,"w0":360,"h0":17,"x0":0,"y0":-6}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#00BCD400")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":360,"gh0":4,"w0":360,"h0":4,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.toBounds($box, "H0X0,T0,H1X0,B0", $handle0, $handle1)).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#ace00fbf10af479a853d1b69e2582e06)" id="rectangle3" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="360" height="17"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#5ef97ca8ee9e45969faa1ba321322cb5)" id="rectangle0" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.121569; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="360" height="4"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#df0d6e5dca804389844c3ef50228da6f)" id="rectangle1" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="134" height="4"/>
    </Content>
  </Shape>
  <Shape id="tabitem" displayName="Tab Item" icon="icons/tabitem.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">120,72</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,1</Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.bolder(100)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: (function () {&#10;    var hasIcon = $iconImageData.w &gt; 0;&#10;    return new Bound(0, $box.h - (hasIcon ? 28 : 32), $box.w, 14);&#10;})(),font: $textFont,align: $textAlignment,richText: true})">TAB ITEM</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="focused" displayName="Focused" type="Bool">false</Property>
        <Property name="strokeColor" displayName="strokeColor" type="Color">#FFFF00FF</Property>
        <Property name="iconImageData" displayName="Image Data (Tab Icon)" type="ImageData">24,24,collection://vectors/tabitem-icon.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":72,"w0":120,"h0":72,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$focused.value ? $textColor : $textColor.hollowed(0.3)]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$focused.value ? $textColor : $textColor.hollowed(0.3)]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.5 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1 * ($textFont).getPixelHeight());
                                var side = "trailing";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }((function () {
    var hasIcon = $iconImageData.w > 0;
    return new Bound(0, $box.h - (hasIcon ? 28 : 32), $box.w, 14);
})()))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(0.5 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "trailing";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }((function () {
    var hasIcon = $iconImageData.w > 0;
    return new Bound(0, $box.h - (hasIcon ? 28 : 32), $box.w, 14);
})())));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $focused.value ? $textColor : $textColor.hollowed(0.3))]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":72,"w0":120,"h0":2,"x0":0,"y0":70}, {"xPolicy":"start","yPolicy":"end","wPolicy":"start-end","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$focused.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="icon">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":120,"gh0":72,"w0":24,"h0":24,"x0":48,"y0":12}, {"xPolicy":"middle","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($iconImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="iconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($iconImageData).getDataAsXML(), $focused.value ? $textColor : $textColor.hollowed(0.3))]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Text Trailing Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0BrowseFile" displayName="Select Vector Image from File for Text Trailing Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("text0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Text Trailing Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="iconBrowse" displayName="Select Resource Images for Tab Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("iconImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="iconBrowseFile" displayName="Select Vector Image from File for Tab Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("iconImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="iconRemove" displayName="Remove Tab Icon">
        <Impl><![CDATA[this.setProperty("iconImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_rectangle0 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":120,"gh0":72,"w0":120,"h0":72,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_rectangle0, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#81840e8643eb4d9bb3f7d832349e1ea4)" id="rectangle0" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="120" height="72"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#0a71cfc4ae264fe598068ed54962784e)" id="text0text" dominant-baseline="auto"/>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#db089ea8d84447f3b7ec5cf3570a0b4f)" id="rectangle1" rx="0" ry="0" style="fill: rgb(255, 255, 0); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 0;" width="120" height="2"/>
      <g xmlns="http://www.w3.org/2000/svg" id="icon">
        <g id="iconImage" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="icon" displayName="Icon" icon="icons/icon.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">24,24</Property>
        <Property name="fillColor" displayName="Icon Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Icon)" type="ImageData">24,24,collection://vectors/icon-vectorimage0.svg</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":24,"gh0":24,"w0":24,"h0":24,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $fillColor)]]></Arg>
        </DomContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0BrowseFile" displayName="Select Vector Image from File for Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Icon">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#2a7d5874d129473ca10235a6fa515343)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="24" width="24"/>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
    </Content>
  </Shape>
  <Shape id="rectangle" displayName="Rectangle" icon="icons/rectangle.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,100</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(1)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="radius" displayName="Corner Radius" type="Handle" p:minX="(collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:100,&quot;w0&quot;:200,&quot;h0&quot;:100,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).x" p:lockY="true" p:maxX="(collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:100,&quot;w0&quot;:200,&quot;h0&quot;:100,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).x + Math.round((collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:100,&quot;w0&quot;:200,&quot;h0&quot;:100,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).w / 2)">0,0</Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|0|0|1</Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="topLeftCorner" displayName="Rounded Top-Left Corner" type="Bool">true</Property>
        <Property name="topRightCorner" displayName="Rounded Top-Right Corner" type="Bool">true</Property>
        <Property name="bottomRightCorner" displayName="Rounded Bottom-Right Corner" type="Bool">true</Property>
        <Property name="bottomLeftCorner" displayName="Rounded Bottom-Left Corner" type="Bool">true</Property>
        <Property name="topBorder" displayName="Top Border" type="Bool">true</Property>
        <Property name="rightBorder" displayName="Right Border" type="Bool">true</Property>
        <Property name="bottomBorder" displayName="Bottom Border" type="Bool">true</Property>
        <Property name="leftBorder" displayName="Left Border" type="Bool">true</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="padding" displayName="padding" type="Handle" p:minY="0" p:maxY="$box.h" p:lockX="true" p:noScale="true">0,10</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: Bound.fromBox($box, $padding.y),font: $textFont,align: $textAlignment,richText: true})"/>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect0">
        <Visibility>
          <Arg><![CDATA[(!$leftBorder.value && !$rightBorder.value) || (!$topBorder.value && !$bottomBorder.value)]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$fillColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, ($radius).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":100,"w0":200,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = $radius;
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, $topLeftCorner.value && $topBorder.value && $leftBorder.value, $topRightCorner.value && $topBorder.value && $rightBorder.value, $bottomRightCorner.value && $bottomBorder.value && $rightBorder.value, $bottomLeftCorner.value && $bottomBorder.value && $leftBorder.value); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":100,"w0":200,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="pathRect0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, ($radius).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":100,"w0":200,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = $strokeStyle;
var r = $radius;
return collection.generateAdvancedRectPathData(b, s, r.x, $topBorder.value, $rightBorder.value, $bottomBorder.value, $leftBorder.value, $topLeftCorner.value, $topRightCorner.value, $bottomRightCorner.value, $bottomLeftCorner.value); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":100,"w0":200,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate((($leftBorder.value) ? (s.w / 2) : 0) + b.x, (($topBorder.value) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = ((!$leftBorder.value && !$rightBorder.value) || (!$topBorder.value && !$bottomBorder.value)) ? ShadowStyle.fromString("0|0|0|0") : $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="pathRect1_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[(((!$leftBorder.value && !$rightBorder.value) || (!$topBorder.value && !$bottomBorder.value)) ? ShadowStyle.fromString("0|0|0|0") : $shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[Bound.fromBox($box, $padding.y)]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(Bound.fromBox($box, $padding.y)).narrowed(($strokeStyle).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_pathRect1 = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":200,"gh0":100,"w0":200,"h0":100,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_pathRect1, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#42362fcf07a640e79529f0a570c93a82)" id="rectangle0" rx="0" ry="0" style="fill: rgb(0, 0, 0); fill-opacity: 0.109804; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" height="100" width="200"/>
        </clipPath>
      </defs>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="pathRect0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="pathRect0_globalGroup" p:filter="url(#pathRect0_shadowFilter)">
        <path p:filter="url(#6cc6da5d86c5475cba5123e7e81bd7bd)" id="pathRect0" d="M 0 0 L 198 0 L 198 98 L 0 98 L 0 0 z" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 2;"/>
      </g>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="pathRect1_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="pathRect1_globalGroup" p:filter="url(#pathRect1_shadowFilter)">
        <path p:filter="url(#1a02185ee5ed4119b95bc2a9ec92950d)" id="pathRect1" d="M 0 0 L 198 0 L 198 98 L 0 98 L 0 0 z" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 188, 212); stroke-opacity: 1; stroke-width: 2;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <g xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#1963d3a47a584a4e8f019a57b923c17a)" id="text0text" dominant-baseline="auto"/>
      </g>
    </Content>
  </Shape>
  <Shape id="mobilemenuitem" displayName="Mobile Menu Item" icon="icons/mobilemenuitem.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">168,48</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|3|5|0.2</Property>
        <Property name="fillColor2" displayName="Other Background Color" type="Color">
          <E>$$invertedContentColor.shaded(0.07999999999999996)</E>
        </Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: new Bound(16, $first.value ? 8 : 0, $box.w - 32, $box.h - ($first.value ? 8 : 0) - ($last.value ? 8 : 0)),font: $textFont,align: $textAlignment,richText: true})">Menu Item</Property>
        <Property name="text0ImageData" displayName="Text icon" type="ImageData">0,0,data:image/svg+xml;utf8,&lt;svg&gt;&lt;/svg&gt;</Property>
        <Property name="text0IconColor" displayName="Icon Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
        </Property>
        <Property name="first" displayName="First" type="Bool">false</Property>
        <Property name="last" displayName="Last" type="Bool">false</Property>
        <Property name="selected" displayName="Selected" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="snapper">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":168,"gh0":48,"w0":168,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="background">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("2,0")).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = new Bound(0, !$first.value ? -20 : 0, $box.w, $box.h + (!$first.value ? 20 : 0) + (!$last.value ? 20 : 0));
var s = $strokeStyle;
var r = Handle.fromString("2,0");
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, $first.value, $first.value, $last.value, $last.value); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = $strokeStyle;
var b = new Bound(0, !$first.value ? -20 : 0, $box.w, $box.h + (!$first.value ? 20 : 0) + (!$last.value ? 20 : 0));
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="background_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="background_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="selected">
        <Bound>
          <Arg><![CDATA[(new Bound(0, $first.value ? 8 : 0, $box.w, $box.h - ($first.value ? 8 : 0) - ($last.value ? 8 : 0))).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$selected.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[$fillColor2]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[(function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(1 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    bound.x += iconHeight + iconGap;
                                    bound.w -= iconHeight + iconGap;
                                } else {
                                    bound.w -= iconHeight + iconGap;
                                }
                            }

                            return bound;

                        }(new Bound(16, $first.value ? 8 : 0, $box.w - 32, $box.h - ($first.value ? 8 : 0) - ($last.value ? 8 : 0))))]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text0Icon">
        <Transform>
          <Arg><![CDATA[var bound = ((function (bound) {
                            if (($text0ImageData).w > 0) {
                                //depends $text0, $textFont
                                var iconGap = Math.round(1 * ($textFont).getPixelHeight());
                                var iconHeight = Math.round(1.4 * ($textFont).getPixelHeight());
                                var y = bound.y + Math.round(bound.h - iconHeight) / 2;
                                var side = "leading";
                                var align = $textAlignment;
                                if (side == "leading") {
                                    if (align.h == 0) {
                                        return new Bound(bound.x, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w - w) / 2), y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + bound.w - w, y, iconHeight, iconHeight);
                                    }
                                } else {
                                    if (align.h == 0) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        if (textWidth) textWidth += iconGap;
                                        return new Bound(bound.x + textWidth, y, iconHeight, iconHeight);
                                    } else if (align.h == 1) {
                                        var textWidth = F.getObjectBoundingBox("text0text").w;
                                        var w = iconHeight + textWidth + (textWidth ? iconGap : 0);
                                        return new Bound(bound.x + Math.round((bound.w + w) / 2) - iconHeight, y, iconHeight, iconHeight);
                                    } else if (align.h == 2) {
                                        return new Bound(bound.x + bound.w - iconHeight, y, iconHeight, iconHeight);
                                    }
                                }
                            }

                            return bound;

                        }(new Bound(16, $first.value ? 8 : 0, $box.w - 32, $box.h - ($first.value ? 8 : 0) - ($last.value ? 8 : 0)))));

var imageData = ($text0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="text0IconImage">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($text0ImageData).getDataAsXML(), $text0IconColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="clip">
        <Bound>
          <Arg><![CDATA[(new Bound(-20, $first.value ? -20 : 0, $box.w + 40, $box.h + ($first.value ? 20 : 0) + ($last.value ? 20 : 0))).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#00BCD41A")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0Browse" displayName="Select Resource Images for Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("text0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="text0BrowseFile" displayName="Select Vector Image from File for Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("text0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="text0Remove" displayName="Remove Icon...">
        <Impl><![CDATA[this.setProperty("text0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_snapper = this.def.collection.calculateBoundsFromPolicy(__prop_box, {"gw0":168,"gh0":48,"w0":168,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Left0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "L0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Left1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "R0"), "Left", true, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "T0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Top1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "B0"), "Top", false, this.id).makeLocal(true),
new SnappingData("Right0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "R0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Right1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "L0"), "Right", true, this.id).makeLocal(true),
new SnappingData("Bottom0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "B0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("Bottom1", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "T0"), "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "C0"), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_snapper, "M0"), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#da021bb2e25049bbbf6153282ebf1d47)" id="snapper" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="168" height="48"/>
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#69c82962710f45f699681cf47a80c31f)" id="clip" rx="0" ry="0" style="fill: rgb(0, 188, 212); fill-opacity: 0.101961; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="200" height="74"/>
        </clipPath>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <defs>
          <filter id="background_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
        </defs>
        <g xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="background_globalGroup" p:filter="url(#background_shadowFilter)">
          <path p:filter="url(#0dc4dd996285430ca0a7b0500def886a)" id="background" d="M 2 0 L 166 0 c 1.1045694996615871 0 2 0.8954305003384129 2 2 L 168 46 c 0 1.1045694996615871 -0.8954305003384129 2 -2 2 L 2 48 c -0.8954305003384129 0 -2 -0.8954305003384129 -2 -2 L 0 2 c 0 -1.1045694996615871 0.8954305003384129 -2 2 -2 z" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
        </g>
      </g>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#86bd460a685a4077bff74db2753a8da7)" id="selected" rx="0" ry="0" style="fill: rgb(235, 235, 235); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="168" height="48"/>
      <g xmlns="http://www.w3.org/2000/svg" id="text0Icon">
        <g id="text0IconImage" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#7b2f7cd0a2a54f00bbc971883bd7fa53)" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="appicon" displayName="App Icon" icon="icons/appicon.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">72,72</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">1,2</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.12941176470588234)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.resized(-0.1428571428571429)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:72,&quot;gh0&quot;:72,&quot;w0&quot;:72,&quot;h0&quot;:28,&quot;x0&quot;:0,&quot;y0&quot;:44}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;end&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: $textAlignment,richText: true})">Maps</Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|2|0.3|0.4</Property>
        <Property name="bitmap0ImageData" displayName="Image Data (App Icon)" type="ImageData">300,300,collection://bitmaps/appicon-bitmap0.png</Property>
        <Property name="rounded" displayName="Show in Circle" type="Bool">false</Property>
        <Property name="zoomed" displayName="Zoomed" type="Bool">false</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":72,"gh0":72,"w0":72,"h0":72,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFF00")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("0,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":72,"gh0":72,"w0":72,"h0":28,"x0":0,"y0":44}, {"xPolicy":"start","yPolicy":"end","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="rectangle1">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":72,"gh0":72,"w0":48,"h0":48,"x0":12,"y0":0}, {"xPolicy":"middle","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Visibility>
          <Arg><![CDATA[$rounded.value]]></Arg>
        </Visibility>
        <Fill>
          <Arg><![CDATA[Color.fromString("#FFFFFFFF")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("24,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle1_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle1_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="bitmap0">
        <Transform>
          <Arg><![CDATA[var bound = (new Bound($box.w / 2 - 24, 0, 48, 48).narrowed($zoomed.value ? -8: 0));
var imageData = ($bitmap0ImageData);

[translate(bound.x, bound.y), scale(imageData.w <= 0 ? 1 : bound.w / imageData.w, imageData.h <= 0 ? 1 : bound.h / imageData.h)];]]></Arg>
        </Transform>
      </For>
      <For ref="bitmap0image">
        <Image>
          <Arg><![CDATA[$bitmap0ImageData]]></Arg>
        </Image>
      </For>
      <For ref="clipper">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":72,"gh0":72,"w0":48,"h0":48,"x0":12,"y0":0}, {"xPolicy":"middle","yPolicy":"start","wPolicy":"fixed","hPolicy":"fixed"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[Color.fromString("#33CCFF33")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (new Handle($rounded.value ? 24 : 0, $rounded.value ? 24 : 0)).x)]]></Arg>
        </Radius>
      </For>
    </Behaviors>
    <Actions>
      <Action id="bitmap0CopyClipboard" displayName="Use Clipboard Data as App Icon">
        <Impl><![CDATA[this.def.collection.copyClipboardImage(this, "bitmap0ImageData");]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0Browse" displayName="Select Resource Images for App Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_BITMAP, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("bitmap0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0BrowseFile" displayName="Select Bitmap from File for App Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("bitmap0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="bitmap0Remove" displayName="Remove App Icon">
        <Impl><![CDATA[this.setProperty("bitmap0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <rect xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#8b8497b234764569a8af8ef5d9b7ab15)" id="clipper" rx="24" ry="24" style="fill: rgb(51, 204, 255); fill-opacity: 0.2; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="48" height="48"/>
        </clipPath>
      </defs>
      <rect xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#c200180cc37b4026b805c8f0796c6a86)" id="rectangle0" rx="0" ry="0" style="fill: rgb(255, 255, 255); fill-opacity: 0; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="72" height="72"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#daa9fd88fabe44f5ac4bc9f23368de93)" id="text0text" dominant-baseline="auto"/>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle1_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle1_globalGroup" p:filter="url(#rectangle1_shadowFilter)">
        <rect p:filter="url(#5896e607a98945138f9bdc041f99c539)" id="rectangle1" rx="24" ry="24" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="48" height="48"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <g id="bitmap0">
          <image id="bitmap0image" x="0" y="0"/>
        </g>
      </g>
    </Content>
  </Shape>
  <Shape id="imagecard" displayName="Image Card" icon="icons/imagecard.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">200,240</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="radius" displayName="Corner Radius" type="Handle" p:minX="(collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:240,&quot;w0&quot;:200,&quot;h0&quot;:240,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).x" p:lockY="true" p:maxX="(collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:240,&quot;w0&quot;:200,&quot;h0&quot;:240,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).x + Math.round((collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:200,&quot;gh0&quot;:240,&quot;w0&quot;:200,&quot;h0&quot;:240,&quot;x0&quot;:0,&quot;y0&quot;:0}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;})).w / 2)">2,0</Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|2|1|0.2</Property>
        <Property name="bitmap0ImageData" displayName="Image Data (bitmap0)" type="ImageData">293,335,collection://bitmaps/imagecard-bitmap0.png</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="handle1" displayName="handle1" type="Handle" p:minY="0" p:maxY="$box.h" p:lockX="true" p:disabled="$bitmap0ImageData.w &lt;= 0">0,137</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="pathRect1">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, ($radius).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":240,"w0":200,"h0":240,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
var s = StrokeStyle.fromString("0|");
var r = $radius;
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, true, true); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = collection.calculateBoundsFromPolicy($box, {"gw0":200,"gh0":240,"w0":200,"h0":240,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"});
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="pathRect1_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="pathRect1_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="bitmap0">
        <Transform>
          <Arg><![CDATA[var bound = (new Bound(0, 0, $box.w, $bitmap0ImageData.w > 0 ? ($bitmap0ImageData.h * $box.w / $bitmap0ImageData.w) : 0));
var imageData = ($bitmap0ImageData);

[translate(bound.x, bound.y), scale(imageData.w <= 0 ? 1 : bound.w / imageData.w, imageData.h <= 0 ? 1 : bound.h / imageData.h)];]]></Arg>
        </Transform>
      </For>
      <For ref="bitmap0image">
        <Image>
          <Arg><![CDATA[$bitmap0ImageData]]></Arg>
        </Image>
      </For>
      <For ref="pathRect0">
        <Fill>
          <Arg><![CDATA[Color.fromString("#00BCD466")]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, ($radius).x)]]></Arg>
        </Radius>
        <D>
          <Arg><![CDATA[(function () { var b = new Bound(0, 0, $box.w, $handle1.y);
var s = StrokeStyle.fromString("0|");
var r = $radius;
return collection.generateAdvancedRectPathData(b, s, r.x, true, true, true, true, true, true, $handle1.y == $box.h, $handle1.y == $box.h); }())]]></Arg>
        </D>
        <Transform>
          <Arg><![CDATA[(function () { var s = StrokeStyle.fromString("0|");
var b = new Bound(0, 0, $box.w, $handle1.y);
return [translate(((true) ? (s.w / 2) : 0) + b.x, ((true) ? (s.w / 2) : 0) + b.y)];}())]]></Arg>
        </Transform>
      </For>
    </Behaviors>
    <Actions>
      <Action id="bitmap0CopyClipboard" displayName="Use Clipboard Data as bitmap0">
        <Impl><![CDATA[this.def.collection.copyClipboardImage(this, "bitmap0ImageData");]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0Browse" displayName="Select Resource Images for bitmap0..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_BITMAP, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("bitmap0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="bitmap0BrowseFile" displayName="Select Bitmap from File for bitmap0..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("bitmap0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="bitmap0Remove" displayName="Remove bitmap0">
        <Impl><![CDATA[this.setProperty("bitmap0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");
var __bound_bitmap0 = new Bound(0, 0, __prop_box.w, __prop_bitmap0ImageData.w > 0 ? (__prop_bitmap0ImageData.h * __prop_box.w / __prop_bitmap0ImageData.w) : 0);

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true),
new SnappingData("Top0", this.def.collection.BOUND_CALCULATOR.calculate(__bound_bitmap0, "T0"), "Top", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <clipPath id="sbDefaultClipPath">
          <path xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#e5ac3913ec714d548e409bf5bdec552f)" id="pathRect0" d="M 2 0 L 198 0 c 1.1045694996615871 0 2 0.8954305003384129 2 2 L 200 135 c 0 1.1045694996615871 -0.8954305003384129 2 -2 2 L 2 137 c -0.8954305003384129 0 -2 -0.8954305003384129 -2 -2 L 0 2 c 0 -1.1045694996615871 0.8954305003384129 -2 2 -2 z" style="fill: rgb(0, 188, 212); fill-opacity: 0.4; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
        </clipPath>
      </defs>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="pathRect1_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="pathRect1_globalGroup" p:filter="url(#pathRect1_shadowFilter)">
        <path p:filter="url(#01ab7b7dde93451caec1e628ea3d6c0d)" id="pathRect1" d="M 2 0 L 198 0 c 1.1045694996615871 0 2 0.8954305003384129 2 2 L 200 238 c 0 1.1045694996615871 -0.8954305003384129 2 -2 2 L 2 240 c -0.8954305003384129 0 -2 -0.8954305003384129 -2 -2 L 0 2 c 0 -1.1045694996615871 0.8954305003384129 -2 2 -2 z" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" style="clip-path: url(#sbDefaultClipPath);">
        <g id="bitmap0">
          <image id="bitmap0image" x="0" y="0"/>
        </g>
      </g>
    </Content>
  </Shape>
  <Shape id="conversationmessage" displayName="Conversation Message" icon="icons/conversationmessage.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">258,80</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|1|1|0.3</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:258,&quot;gh0&quot;:80,&quot;w0&quot;:218,&quot;h0&quot;:35,&quot;x0&quot;:13,&quot;y0&quot;:11}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Sinistra regna duas erat aestu astra poena terris cingebant...</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text4" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text4text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:258,&quot;gh0&quot;:80,&quot;w0&quot;:145,&quot;h0&quot;:16,&quot;x0&quot;:13,&quot;y0&quot;:56}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;end&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: Alignment.fromString(&quot;0,0&quot;),richText: true})">Apr 4, 05:22 pm</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":80,"w0":258,"h0":80,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("258,66,13-235,18-56,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":6,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":258,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":246,\"y\":14}]},{\"command\":\"L\",\"points\":[{\"x\":246,\"y\":60}]},{\"command\":\"C\",\"points\":[{\"x\":246,\"y\":63.324019,\"fixed\":true},{\"x\":243.32402,\"y\":66,\"fixed\":true},{\"x\":240,\"y\":66}]},{\"command\":\"L\",\"points\":[{\"x\":6,\"y\":66}]},{\"command\":\"C\",\"points\":[{\"x\":2.6759925,\"y\":66.000001,\"fixed\":true},{\"x\":0,\"y\":63.32402,\"fixed\":true},{\"x\":0,\"y\":60}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":6}]},{\"command\":\"C\",\"points\":[{\"x\":0,\"y\":2.6759811,\"fixed\":true},{\"x\":2.6759925,\"y\":0,\"fixed\":true},{\"x\":6,\"y\":0}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:6;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:0.98492462\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":80,"w0":258,"h0":80,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vector0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="vector0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":80,"w0":218,"h0":35,"x0":13,"y0":11}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text4text">
        <Fill>
          <Arg><![CDATA[$textColor.hollowed(0.25)]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor.hollowed(0.25)]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text4]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":80,"w0":145,"h0":16,"x0":13,"y0":56}, {"xPolicy":"start","yPolicy":"end","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[Alignment.fromString("0,0")]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="vector0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vector0_globalGroup" p:filter="url(#vector0_shadowFilter)">
        <g p:filter="url(#b6a09fe83084449d895945a94bcf112d)" id="vector0" style="stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0; fill: rgb(0, 188, 212); fill-opacity: 1;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#c65abf0caca444a7b37f777c213aa07f)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#c1002c0fa2984e77964c2375fd5ac956)" id="text4text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="conversationmessagereversed" displayName="Conversation Message Reversed" icon="icons/conversationmessagereversed.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">258,80</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$primaryContentColor</E>
        </Property>
        <Property name="strokeColor" displayName="Line Color" type="Color">
          <E>$$defaultTextColor</E>
        </Property>
        <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
          <E>$$defaultStrokeStyle.condensed(-1)</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|1|1|0.3</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,0</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:258,&quot;gh0&quot;:80,&quot;w0&quot;:218,&quot;h0&quot;:35,&quot;x0&quot;:25,&quot;y0&quot;:11}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Sinistra regna duas erat aestu astra poena terris cingebant...</Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text4" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text4text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:258,&quot;gh0&quot;:80,&quot;w0&quot;:145,&quot;h0&quot;:16,&quot;x0&quot;:25,&quot;y0&quot;:56}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;end&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;fixed&quot;}),font: $textFont,align: Alignment.fromString(&quot;0,0&quot;),richText: true})">Apr 4, 05:22 pm</Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="vector0">
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[$strokeColor]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[$strokeStyle]]></Arg>
        </StrokeStyle>
        <DomContent>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":80,"w0":258,"h0":80,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle; b.w -= s.w; b.h -= s.w;
return collection.generatePathDOM(ImageData.fromString("258,66,26-242,20-58,json:[{\"commands\":[{\"command\":\"M\",\"points\":[{\"x\":252,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":0,\"y\":0}]},{\"command\":\"L\",\"points\":[{\"x\":12,\"y\":14}]},{\"command\":\"L\",\"points\":[{\"x\":12,\"y\":60}]},{\"command\":\"C\",\"points\":[{\"x\":12,\"y\":63.324019,\"fixed\":true},{\"x\":14.675981,\"y\":66,\"fixed\":true},{\"x\":18,\"y\":66}]},{\"command\":\"L\",\"points\":[{\"x\":252,\"y\":66}]},{\"command\":\"C\",\"points\":[{\"x\":255.32401,\"y\":66,\"fixed\":true},{\"x\":258,\"y\":63.324019,\"fixed\":true},{\"x\":258,\"y\":60}]},{\"command\":\"L\",\"points\":[{\"x\":258,\"y\":6}]},{\"command\":\"C\",\"points\":[{\"x\":258.00003,\"y\":2.6759811,\"fixed\":true},{\"x\":255.32404,\"y\":0,\"fixed\":true},{\"x\":252,\"y\":0}]},{\"command\":\"Z\"}],\"style\":\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:6;stroke-linecap:square;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:0.98492462\"}]"), b, false); }())]]></Arg>
        </DomContent>
        <Transform>
          <Arg><![CDATA[(function () { var b = collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":80,"w0":258,"h0":80,"x0":0,"y0":0}, {"xPolicy":"relative","yPolicy":"relative","wPolicy":"relative","hPolicy":"relative"});
var s = $strokeStyle; b.x += s.w / 2; b.y += s.w / 2;
return [translate(b.x, b.y)];}())]]></Arg>
        </Transform>
      </For>
      <For ref="vector0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="vector0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":80,"w0":218,"h0":35,"x0":25,"y0":11}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
      <For ref="text4text">
        <Fill>
          <Arg><![CDATA[$textColor.hollowed(0.25)]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor.hollowed(0.25)]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text4]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":258,"gh0":80,"w0":145,"h0":16,"x0":25,"y0":56}, {"xPolicy":"start","yPolicy":"end","wPolicy":"start-end","hPolicy":"fixed"})]]></Arg>
          <Arg><![CDATA[Alignment.fromString("0,0")]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="vector0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vector0_globalGroup" p:filter="url(#vector0_shadowFilter)">
        <g p:filter="url(#88ba7eaaa52645d8b5a8363fbdd47945)" id="vector0" style="stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0; fill: rgb(0, 188, 212); fill-opacity: 1;"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#e6b193da2cfc4a75a509b2b45ce66f50)" id="text0text" dominant-baseline="auto"/>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#e232e5215cbc4a11a6db7e335b2c50f3)" id="text4text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shape id="solotextfield" displayName="Solo Text Field" icon="icons/solotextfield.png?token=1499140972688">
    <Properties>
      <PropertyGroup name="Common" holder="true">
        <Property name="box" displayName="box" type="Dimension">362,48</Property>
        <Property name="fillColor" displayName="Background Color" type="Color">
          <E>$$invertedContentColor</E>
        </Property>
        <Property name="shadowStyle" displayName="Shadow Style" type="ShadowStyle">0|1|2|0.5</Property>
        <Property name="vectorImage0ImageData" displayName="Image Data (Leading Icon)" type="ImageData">24,24,collection://vectors/solotextfield-vectorimage0.svg</Property>
        <Property name="vectorImage1ImageData" displayName="Image Data (Trailing Icon)" type="ImageData">24,24,collection://vectors/solotextfield-vectorimage1.svg</Property>
        <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        <Property name="textColor" displayName="Text Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
        </Property>
        <Property name="textFont" displayName="Text Font" type="Font">
          <E>$$defaultFont.resized(0.4285714285714286)</E>
        </Property>
        <Property xmlns:p="http://www.evolus.vn/Namespace/Pencil" name="text0" displayName="Text" type="RichText" p:editInfo="({targetName: &quot;text0text&quot;,bound: collection.calculateBoundsFromPolicy($box, {&quot;gw0&quot;:362,&quot;gh0&quot;:48,&quot;w0&quot;:268,&quot;h0&quot;:30,&quot;x0&quot;:53,&quot;y0&quot;:9}, {&quot;xPolicy&quot;:&quot;start&quot;,&quot;yPolicy&quot;:&quot;start&quot;,&quot;wPolicy&quot;:&quot;start-end&quot;,&quot;hPolicy&quot;:&quot;start-end&quot;}),font: $textFont,align: $textAlignment,richText: true})">Search</Property>
        <Property name="iconColor" displayName="Icon Color" type="Color">
          <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
        </Property>
      </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="rectangle0">
        <Bound>
          <Arg><![CDATA[(collection.calculateBoundsFromPolicy($box, {"gw0":362,"gh0":48,"w0":362,"h0":48,"x0":0,"y0":0}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})).narrowed((StrokeStyle.fromString("0|")).w / 2)]]></Arg>
        </Bound>
        <Fill>
          <Arg><![CDATA[$fillColor]]></Arg>
        </Fill>
        <StrokeColor>
          <Arg><![CDATA[Color.fromString("#000000FF")]]></Arg>
        </StrokeColor>
        <StrokeStyle>
          <Arg><![CDATA[StrokeStyle.fromString("0|")]]></Arg>
        </StrokeStyle>
        <Radius>
          <Arg><![CDATA[Math.max(0, (Handle.fromString("3,0")).x)]]></Arg>
        </Radius>
      </For>
      <For ref="rectangle0_shadowFilter">
        <DomContent>
          <Arg><![CDATA[(function () {
                        var shadowStyle = $shadowStyle;
                        return Dom.newDOMFragment(
                        [
                            { _name: "feGaussianBlur", _uri: PencilNamespaces.svg, in: "SourceAlpha", stdDeviation: shadowStyle.size },
                            { _name: "feOffset", _uri: PencilNamespaces.svg, dx: shadowStyle.dx, dy: shadowStyle.dy },
                            { _name: "feComponentTransfer", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feFuncA", _uri: PencilNamespaces.svg, type: "linear", slope: shadowStyle.opacity }
                            ]},
                            { _name: "feMerge", _uri: PencilNamespaces.svg, _children: [
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg },
                                { _name: "feMergeNode", _uri: PencilNamespaces.svg, in: "SourceGraphic" }
                            ]}
                        ]);
                    }())]]></Arg>
        </DomContent>
      </For>
      <For ref="rectangle0_globalGroup">
        <ApplyFilter>
          <Arg><![CDATA[($shadowStyle.opacity) ? true : false]]></Arg>
        </ApplyFilter>
      </For>
      <For ref="vectorImage0">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":362,"gh0":48,"w0":24,"h0":24,"x0":11,"y0":12}, {"xPolicy":"start","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage0ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage0Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage0ImageData).getDataAsXML(), $iconColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="vectorImage1">
        <Transform>
          <Arg><![CDATA[var bound = (collection.calculateBoundsFromPolicy($box, {"gw0":362,"gh0":48,"w0":24,"h0":24,"x0":329,"y0":12}, {"xPolicy":"end","yPolicy":"middle","wPolicy":"fixed","hPolicy":"fixed"}));

var imageData = ($vectorImage1ImageData);

[translate(bound.x, bound.y), scale(bound.w / (imageData.w || 1), bound.h / (imageData.h || 1))];]]></Arg>
        </Transform>
      </For>
      <For ref="vectorImage1Image">
        <DomContent>
          <Arg><![CDATA[collection.toColorizedDOMNode(($vectorImage1ImageData).getDataAsXML(), $iconColor)]]></Arg>
        </DomContent>
      </For>
      <For ref="text0text">
        <Fill>
          <Arg><![CDATA[$textColor]]></Arg>
        </Fill>
        <Color>
          <Arg><![CDATA[$textColor]]></Arg>
        </Color>
        <Font>
          <Arg><![CDATA[$textFont]]></Arg>
        </Font>
        <RichTextContent>
          <Arg><![CDATA[$text0]]></Arg>
          <Arg><![CDATA[collection.calculateBoundsFromPolicy($box, {"gw0":362,"gh0":48,"w0":268,"h0":30,"x0":53,"y0":9}, {"xPolicy":"start","yPolicy":"start","wPolicy":"start-end","hPolicy":"start-end"})]]></Arg>
          <Arg><![CDATA[$textAlignment]]></Arg>
        </RichTextContent>
      </For>
    </Behaviors>
    <Actions>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0Browse" displayName="Select Resource Images for Leading Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage0ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage0BrowseFile" displayName="Select Vector Image from File for Leading Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage0ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage0Remove" displayName="Remove Leading Icon">
        <Impl><![CDATA[this.setProperty("vectorImage0ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage1Browse" displayName="Select Resource Images for Trailing Icon..." p:content-action="true">
        <Impl><![CDATA[this.def.collection.browseResource("", CollectionResourceBrowserDialog.TYPE_SVG, CollectionResourceBrowserDialog.RETURN_IMAGEDATA, function (imageData) {this.setProperty("vectorImage1ImageData", imageData)}.bind(this));]]></Impl>
      </Action>
      <Action xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="vectorImage1BrowseFile" displayName="Select Vector Image from File for Trailing Icon..." p:content-action="true">
        <Impl><![CDATA[
                            var thiz = this;
                            ImageData.prompt(function(data) {
                                if (!data) return;
                                thiz.setProperty("vectorImage1ImageData", data);
                            });
                            ]]></Impl>
      </Action>
      <Action id="vectorImage1Remove" displayName="Remove Trailing Icon">
        <Impl><![CDATA[this.setProperty("vectorImage1ImageData", new ImageData(0,0,"data:"));]]></Impl>
      </Action>
      <Action id="getSnappingGuide">
        <Impl><![CDATA[
var __prop_box = this.getProperty("box");

var snaps = [new SnappingData("Left", 0, "Left", true, this.id).makeLocal(true),
new SnappingData("Right", __prop_box.w, "Right", true, this.id).makeLocal(true),
new SnappingData("Top", 0, "Top", false, this.id).makeLocal(true),
new SnappingData("Bottom", __prop_box.h, "Bottom", false, this.id).makeLocal(true),
new SnappingData("VCenter", Math.round(__prop_box.w / 2), "VCenter", true, this.id).makeLocal(true),
new SnappingData("HCenter", Math.round(__prop_box.h / 2), "HCenter", false, this.id).makeLocal(true)];
return snaps;
]]></Impl>
      </Action>
    </Actions>
    <Content>
      <defs xmlns="http://www.w3.org/2000/svg">
        <filter id="rectangle0_shadowFilter" x="-50%" width="200%" y="-50%" height="200%"/>
      </defs>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" id="rectangle0_globalGroup" p:filter="url(#rectangle0_shadowFilter)">
        <rect p:filter="url(#07bdb109eb804c5bb2b5e7e7dc247c7b)" id="rectangle0" rx="3" ry="3" style="fill: rgb(255, 255, 255); fill-opacity: 1; stroke: rgb(0, 0, 0); stroke-opacity: 1; stroke-width: 0;" width="362" height="48"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage0">
        <g id="vectorImage0Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" id="vectorImage1">
        <g id="vectorImage1Image" x="0" y="0"/>
      </g>
      <g xmlns="http://www.w3.org/2000/svg" xmlns:p="http://www.evolus.vn/Namespace/Pencil" p:filter="url(#7b0b9ac7b93545ce8e7cfac05fee4b2f)" id="text0text" dominant-baseline="auto"/>
    </Content>
  </Shape>
  <Shortcut to="bottomnavigationitem" displayName="Active Navigation Item" icon="icons/activenavigationitem.png">
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-activenavigationitem-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="text0">Active Item</PropertyValue>
    <PropertyValue name="active">true</PropertyValue>
  </Shortcut>
  <Shortcut to="bottomnavigationbar" displayName="Colorized Bottom Bar" icon="icons/colorizedbottombar.png">
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="bottomnavigationitem" displayName="Inverted Active Bottom Item" icon="icons/invertedactivebottomitem.png">
    <PropertyValue name="textColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-invertedactivebottomitem-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="text0">Active Item</PropertyValue>
    <PropertyValue name="active">true</PropertyValue>
  </Shortcut>
  <Shortcut to="bottomnavigationitem" displayName="Inverted Normal Bottom Item" icon="icons/invertednormalbottomitem.png">
    <PropertyValue name="textColor">
      <E>$$invertedContentColor.hollowed(0.0980392156862745)</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-invertednormalbottomitem-vectorimage0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="button" displayName="Raised Button" icon="icons/raisedbutton.png">
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|2|1|0.2</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button" displayName="Raised Button (color)" icon="icons/raisedbuttoncolor.png">
    <PropertyValue name="shadowStyle">0|2|1|0.2</PropertyValue>
  </Shortcut>
  <Shortcut to="button" displayName="Flat Button" icon="icons/flatbutton.png">
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|2|1|0</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button" displayName="Focused Flat Button" icon="icons/focusedflatbutton.png">
    <PropertyValue name="fillColor">
      <E>$$defaultTextColor.hollowed(0.8784313725490196)</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|2|1|0</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button" displayName="Focused Flat Color Button" icon="icons/focusedflatcolorbutton.png">
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor.hollowed(0.8784313725490196)</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|2|1|0</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="button" displayName="Disabed Button" icon="icons/disabedbutton.png">
    <PropertyValue name="fillColor">
      <E>$$defaultTextColor.hollowed(0.8784313725490196)</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|2|1|0</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.5490196078431373)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="fab" displayName="FAB No color" icon="icons/fabnocolor.png">
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-fabnocolor-vectorimage0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="fab" displayName="FAB Mini color" icon="icons/fabminicolor.png">
    <PropertyValue name="box">40,40</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-fabminicolor-vectorimage0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="fab" displayName="FAB Mini No color" icon="icons/fabmininocolor.png">
    <PropertyValue name="box">40,40</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-fabmininocolor-vectorimage0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="card" displayName="Card Raised" icon="icons/cardraised.png">
    <PropertyValue name="shadowStyle">0|4|5|0.4</PropertyValue>
  </Shortcut>
  <Shortcut to="card" displayName="Card Half" icon="icons/cardhalf.png">
    <PropertyValue name="box">193,260</PropertyValue>
  </Shortcut>
  <Shortcut to="chip" displayName="Chip Raised" icon="icons/chipraised.png">
    <PropertyValue name="shadowStyle">0|2|1|0.2</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-chipraised-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="text0">Chip Raised</PropertyValue>
  </Shortcut>
  <Shortcut to="chip" displayName="Chip no image" icon="icons/chipnoimage.png">
    <PropertyValue name="box">112,32</PropertyValue>
    <PropertyValue name="bitmap0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-chipnoimage-vectorimage0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="chip" displayName="Chip no delete" icon="icons/chipnodelete.png">
    <PropertyValue name="box">109,32</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-chipnodelete-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="withDelete">false</PropertyValue>
  </Shortcut>
  <Shortcut to="chip" displayName="Chip simple" icon="icons/chipsimple.png">
    <PropertyValue name="box">80,32</PropertyValue>
    <PropertyValue name="bitmap0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-chipsimple-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="withDelete">false</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC Header Uncheck" icon="icons/dcheaderuncheck.png">
    <PropertyValue name="box">259,48</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dcheaderuncheck-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.1428571428571429)</E>
    </PropertyValue>
    <PropertyValue name="text0">Dessert (100g serving)</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dcheaderuncheck-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">unchecked</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC header up" icon="icons/dcheaderup.png">
    <PropertyValue name="box">103,48</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dcheaderup-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="textAlignment">2,1</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.1428571428571429)</E>
    </PropertyValue>
    <PropertyValue name="text0">Calories</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/solotextfield-dcheaderup-text0imagedata.svg</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dcheaderup-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC header down active" icon="icons/dcheaderdownactive.png">
    <PropertyValue name="box">121,48</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dcheaderdownactive-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="textAlignment">2,1</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.1428571428571429)</E>
    </PropertyValue>
    <PropertyValue name="text0">Fat (g)</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/solotextfield-dcheaderdownactive-text0imagedata.svg</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dcheaderdownactive-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC cell unchecked" icon="icons/dccellunchecked.png">
    <PropertyValue name="box">259,48</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dccellunchecked-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="text0">Frozen yogurt</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dccellunchecked-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">unchecked</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC cell number dropdown" icon="icons/dccellnumberdropdown.png">
    <PropertyValue name="box">103,48</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dccellnumberdropdown-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="textAlignment">2,1</PropertyValue>
    <PropertyValue name="text0">159</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dccellnumberdropdown-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">24,24,collection://vectors/solotextfield-dccellnumberdropdown-trailingiconimagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC cell number" icon="icons/dccellnumber.png">
    <PropertyValue name="box">121,48</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dccellnumber-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="textAlignment">2,1</PropertyValue>
    <PropertyValue name="text0">6.0</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dccellnumber-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC cell checked hover" icon="icons/dccellcheckedhover.png">
    <PropertyValue name="box">259,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.shaded(0.040000000000000036)</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dccellcheckedhover-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="text0">Ice cream sandwich</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dccellcheckedhover-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC cell number dropdown hover" icon="icons/dccellnumberdropdownhover.png">
    <PropertyValue name="box">103,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.shaded(0.040000000000000036)</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dccellnumberdropdownhover-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="textAlignment">2,1</PropertyValue>
    <PropertyValue name="text0">1.829</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dccellnumberdropdownhover-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">24,24,collection://vectors/solotextfield-dccellnumberdropdownhover-trailingiconimagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC cell number hover" icon="icons/dccellnumberhover.png">
    <PropertyValue name="box">121,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.shaded(0.040000000000000036)</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dccellnumberhover-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="textAlignment">2,1</PropertyValue>
    <PropertyValue name="text0">9.0</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dccellnumberhover-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC header comment" icon="icons/dcheadercomment.png">
    <PropertyValue name="box">246,48</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dcheadercomment-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.1428571428571429)</E>
    </PropertyValue>
    <PropertyValue name="text0">Comments</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/solotextfield-dcheadercomment-text0imagedata.svg</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dcheadercomment-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC cell text edit icon" icon="icons/dccelltextediticon.png">
    <PropertyValue name="box">246,48</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dccelltextediticon-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="text0">Super tasty</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dccelltextediticon-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">24,24,collection://vectors/solotextfield-dccelltextediticon-trailingiconimagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="datatablecell" displayName="DC cell text hover" icon="icons/dccelltexthover.png">
    <PropertyValue name="box">246,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.shaded(0.040000000000000036)</E>
    </PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-dccelltexthover-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="text0">I like ice cream more</PropertyValue>
    <PropertyValue name="vectorImage1ImageData">24,24,collection://vectors/solotextfield-dccelltexthover-vectorimage1imagedata.svg</PropertyValue>
    <PropertyValue name="checkMode">none</PropertyValue>
    <PropertyValue name="trailingIconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="listitem" displayName="LI - Full bold" icon="icons/li-fullbold.png">
    <PropertyValue name="text0">&lt;span xmlns="http://www.w3.org/1999/xhtml" style="font-weight: bold;"&gt;List item primary title&lt;/span&gt;</PropertyValue>
    <PropertyValue name="bitmap0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="text2">M</PropertyValue>
    <PropertyValue name="insetDivider">false</PropertyValue>
  </Shortcut>
  <Shortcut to="listitem" displayName="LI - Inset letter" icon="icons/li-insetletter.png">
    <PropertyValue name="bitmap0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="text2">K</PropertyValue>
  </Shortcut>
  <Shortcut to="checkboxes" displayName="CB - unchecked" icon="icons/cb-unchecked.png">
    <PropertyValue name="checked">false</PropertyValue>
  </Shortcut>
  <Shortcut to="checkboxes" displayName="CB - unchecked disabled" icon="icons/cb-uncheckeddisabled.png">
    <PropertyValue name="checked">false</PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
  </Shortcut>
  <Shortcut to="checkboxes" displayName="CB - disabled" icon="icons/cb-disabled.png">
    <PropertyValue name="disabled">true</PropertyValue>
  </Shortcut>
  <Shortcut to="radio" displayName="R - uncheked" icon="icons/r-uncheked.png">
    <PropertyValue name="checked">false</PropertyValue>
  </Shortcut>
  <Shortcut to="radio" displayName="R - unchecked disabled" icon="icons/r-uncheckeddisabled.png">
    <PropertyValue name="checked">false</PropertyValue>
    <PropertyValue name="disabled">true</PropertyValue>
  </Shortcut>
  <Shortcut to="radio" displayName="R - disabled" icon="icons/r-disabled.png">
    <PropertyValue name="disabled">true</PropertyValue>
  </Shortcut>
  <Shortcut to="avatar" displayName="Avatar - two letters" icon="icons/avatar-twoletters.png">
    <PropertyValue name="bitmap0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="text2">AB</PropertyValue>
  </Shortcut>
  <Shortcut to="avatar" displayName="Avatar - large" icon="icons/avatar-large.png">
    <PropertyValue name="box">64,64</PropertyValue>
  </Shortcut>
  <Shortcut to="avatar" displayName="Avatar - letter inverted" icon="icons/avatar-letterinverted.png">
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="bitmap0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor.hollowed(0.12941176470588234)</E>
    </PropertyValue>
    <PropertyValue name="text2">B</PropertyValue>
  </Shortcut>
  <Shortcut to="avatar" displayName="Avatar - large letter" icon="icons/avatar-largeletter.png">
    <PropertyValue name="box">64,64</PropertyValue>
    <PropertyValue name="bitmap0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textFont">Arial|bold|normal|25px|none</PropertyValue>
    <PropertyValue name="text2">C</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Disabled Text View" icon="icons/disabledtextview.png">
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.5215686274509803)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Display 4" icon="icons/display4.png">
    <PropertyValue name="box">492,130</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(-100).resized(7)</E>
    </PropertyValue>
    <PropertyValue name="text0">Display 4</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Display 3" icon="icons/display3.png">
    <PropertyValue name="box">258,67</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(3)</E>
    </PropertyValue>
    <PropertyValue name="text0">Display 3</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Display 2" icon="icons/display2.png">
    <PropertyValue name="box">218,53</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(2.2142857142857144)</E>
    </PropertyValue>
    <PropertyValue name="text0">Display 2</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Display 1" icon="icons/display1.png">
    <PropertyValue name="box">165,41</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(1.4285714285714284)</E>
    </PropertyValue>
    <PropertyValue name="text0">Display 1</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Heading" icon="icons/heading.png">
    <PropertyValue name="box">142,31</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(0.7142857142857142)</E>
    </PropertyValue>
    <PropertyValue name="text0">Headline</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Title" icon="icons/title.png">
    <PropertyValue name="box">123,25</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(0.4285714285714286)</E>
    </PropertyValue>
    <PropertyValue name="text0">Title Text</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Subheading" icon="icons/subheading.png">
    <PropertyValue name="box">126,24</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(0.1428571428571428)</E>
    </PropertyValue>
    <PropertyValue name="text0">Subheading</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Body 2" icon="icons/body2.png">
    <PropertyValue name="box">232,18</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100)</E>
    </PropertyValue>
    <PropertyValue name="text0">Body 2 - Locis quarum peregrinum</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Body 1" icon="icons/body1.png">
    <PropertyValue name="box">218,18</PropertyValue>
    <PropertyValue name="text0">Body 1 - Lucis capacius boreas</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Caption" icon="icons/caption.png">
    <PropertyValue name="box">207,15</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(-0.1428571428571429)</E>
    </PropertyValue>
    <PropertyValue name="text0">Caption - Suis austro fluminaque</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Long body text" icon="icons/longbodytext.png">
    <PropertyValue name="box">431,57</PropertyValue>
    <PropertyValue name="text0">Long body text - Minantia non modo formaeque in meis acervo formaeque gravitate erat indigestaque habentia fixo mutatas aliud orbis retinebat qui non alta</PropertyValue>
  </Shortcut>
  <Shortcut to="toggle-on" displayName="Toggle On (Inverted)" icon="icons/toggleoninverted.png">
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="toggle-on" displayName="Toggle On Disabled" icon="icons/toggleondisabled.png">
    <PropertyValue name="disabled">true</PropertyValue>
  </Shortcut>
  <Shortcut to="toggle-off" displayName="Toggle Off Disabled" icon="icons/toggleoffdisabled.png">
    <PropertyValue name="disabled">true</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext-single" displayName="Input (empty, idle, help)" icon="icons/inputemptyidlehelp.png">
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="text1">Label</PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext-single" displayName="Input (empty, idle)" icon="icons/inputemptyidle.png">
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="text1">Label</PropertyValue>
    <PropertyValue name="text0"/>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="text2"/>
  </Shortcut>
  <Shortcut to="inputtext-single" displayName="Input (filled, idle)" icon="icons/inputfilledidle.png">
    <PropertyValue name="text1">Text value</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="text2"/>
  </Shortcut>
  <Shortcut to="inputtext-single" displayName="Input (filled, idle, help)" icon="icons/inputfilledidlehelp.png">
    <PropertyValue name="text1">Text value</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext-single" displayName="Input (placeholder, focus, help)" icon="icons/inputplaceholderfocushelp.png">
    <PropertyValue name="strokeColor">
      <E>$$primaryContentColor.hollowed(0.12941176470588234)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(1)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="text1">Placeholder</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="withCaret">true</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext-single" displayName="Input (empty, focus, help)" icon="icons/inputemptyfocushelp.png">
    <PropertyValue name="strokeColor">
      <E>$$primaryContentColor.hollowed(0.12941176470588234)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(1)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="text1"/>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="withCaret">true</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext-single" displayName="Input (filled, focus, help)" icon="icons/inputfilledfocushelp.png">
    <PropertyValue name="strokeColor">
      <E>$$primaryContentColor.hollowed(0.12941176470588234)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(1)</E>
    </PropertyValue>
    <PropertyValue name="text1">Text value</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="handle0">73,0</PropertyValue>
    <PropertyValue name="withCaret">true</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext-single" displayName="Input (empty, focus, help, icon)" icon="icons/inputemptyfocushelpicon.png">
    <PropertyValue name="strokeColor">
      <E>$$primaryContentColor.hollowed(0.12941176470588234)</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(1)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor.hollowed(0.45882352941176474)</E>
    </PropertyValue>
    <PropertyValue name="text1"/>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-inputemptyfocushelpicon-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="withCaret">true</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext-single" displayName="Input (filled, error, help)" icon="icons/inputfillederrorhelp.png">
    <PropertyValue name="strokeColor">#FF0000FF</PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(1)</E>
    </PropertyValue>
    <PropertyValue name="text1">Text value</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="handle0">73,0</PropertyValue>
    <PropertyValue name="withCaret">true</PropertyValue>
    <PropertyValue name="text2">Error: message</PropertyValue>
  </Shortcut>
  <Shortcut to="inputtext-single" displayName="Input (date)" icon="icons/inputdate.png">
    <PropertyValue name="text1">Thu, Oct 19 2017</PropertyValue>
    <PropertyValue name="text0">Start date</PropertyValue>
    <PropertyValue name="vectorImage0ImageData">24,24,collection://vectors/solotextfield-inputdate-vectorimage0imagedata.svg</PropertyValue>
    <PropertyValue name="text2"/>
  </Shortcut>
  <Shortcut to="snackbar" displayName="Snackbar - no action" icon="icons/snackbar-noaction.png">
    <PropertyValue name="text0">Nondum margine regat divino stagna</PropertyValue>
    <PropertyValue name="textAction"/>
  </Shortcut>
  <Shortcut to="snackbar" displayName="Toast - action" icon="icons/toast-action.png">
    <PropertyValue name="box">362,48</PropertyValue>
    <PropertyValue name="radius">1.7658536585365856,0</PropertyValue>
    <PropertyValue name="shadowStyle">0|1|2|0.5</PropertyValue>
  </Shortcut>
  <Shortcut to="snackbar" displayName="Toast - no action" icon="icons/toast-noaction.png">
    <PropertyValue name="box">362,48</PropertyValue>
    <PropertyValue name="radius">1.7658536585365856,0</PropertyValue>
    <PropertyValue name="shadowStyle">0|1|2|0.5</PropertyValue>
    <PropertyValue name="text0">Coegit his dissaepserat summaque habentem</PropertyValue>
    <PropertyValue name="textAction"/>
  </Shortcut>
  <Shortcut to="progress" displayName="Progress - Buffer" icon="icons/progress-buffer.png">
    <PropertyValue name="withBuffer">true</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Focused tab" icon="icons/focusedtab.png">
    <PropertyValue name="box">136,48</PropertyValue>
    <PropertyValue name="text0">FOCUSED ITEM</PropertyValue>
    <PropertyValue name="focused">true</PropertyValue>
    <PropertyValue name="iconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Inactive tab" icon="icons/inactivetab.png">
    <PropertyValue name="box">109,48</PropertyValue>
    <PropertyValue name="iconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Tab with more" icon="icons/tabwithmore.png">
    <PropertyValue name="box">93,48</PropertyValue>
    <PropertyValue name="text0">MORE</PropertyValue>
    <PropertyValue name="text0ImageData">40,40,collection://vectors/solotextfield-tabwithmore-text0imagedata.svg</PropertyValue>
    <PropertyValue name="iconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Multiline tab" icon="icons/multilinetab.png">
    <PropertyValue name="box">73,48</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.1428571428571429)</E>
    </PropertyValue>
    <PropertyValue name="text0">MULTI&lt;br xmlns="http://www.w3.org/1999/xhtml" /&gt;LINE</PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="iconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Multiline tab with icon" icon="icons/multilinetabwithicon.png">
    <PropertyValue name="box">73,72</PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.1428571428571429)</E>
    </PropertyValue>
    <PropertyValue name="text0">MULTI&lt;br xmlns="http://www.w3.org/1999/xhtml" /&gt;LINE</PropertyValue>
    <PropertyValue name="iconImageData">24,24,collection://vectors/solotextfield-multilinetabwithicon-iconimagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Tab with icon and more" icon="icons/tabwithiconandmore.png">
    <PropertyValue name="box">93,72</PropertyValue>
    <PropertyValue name="text0">MORE</PropertyValue>
    <PropertyValue name="text0ImageData">40,40,collection://vectors/solotextfield-tabwithiconandmore-text0imagedata.svg</PropertyValue>
    <PropertyValue name="iconImageData">24,24,collection://vectors/solotextfield-tabwithiconandmore-iconimagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Focused tab (inversed)" icon="icons/focusedtabinversed.png">
    <PropertyValue name="box">136,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="text0">FOCUSED ITEM</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="focused">true</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="iconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Inactive tab (inversed)" icon="icons/inactivetabinversed.png">
    <PropertyValue name="box">109,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="iconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Tab with more (inversed)" icon="icons/tabwithmoreinversed.png">
    <PropertyValue name="box">93,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="text0">MORE</PropertyValue>
    <PropertyValue name="text0ImageData">40,40,collection://vectors/solotextfield-tabwithmoreinversed-text0imagedata.svg</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="iconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Multiline tab (inversed)" icon="icons/multilinetabinversed.png">
    <PropertyValue name="box">73,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.1428571428571429)</E>
    </PropertyValue>
    <PropertyValue name="text0">MULTI&lt;br xmlns="http://www.w3.org/1999/xhtml" /&gt;LINE</PropertyValue>
    <PropertyValue name="text0ImageData">0,0,data:</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="iconImageData">0,0,data:</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Focused tab with icon (inversed)" icon="icons/focusedtabwithiconinversed.png">
    <PropertyValue name="box">136,72</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="text0">FOCUSED ITEM</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="focused">true</PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="iconImageData">24,24,collection://vectors/solotextfield-focusedtabwithiconinversed-iconimagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Inactive tab with icon (inversed)" icon="icons/inactivetabwithiconinversed.png">
    <PropertyValue name="box">109,72</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="iconImageData">24,24,collection://vectors/solotextfield-inactivetabwithiconinversed-iconimagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Multiline tab with icon (inversed)" icon="icons/multilinetabwithiconinversed.png">
    <PropertyValue name="box">73,72</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100).resized(-0.1428571428571429)</E>
    </PropertyValue>
    <PropertyValue name="text0">MULTI&lt;br xmlns="http://www.w3.org/1999/xhtml" /&gt;LINE</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="iconImageData">24,24,collection://vectors/solotextfield-multilinetabwithiconinversed-iconimagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Tab with icon and more (inversed)" icon="icons/tabwithiconandmoreinversed.png">
    <PropertyValue name="box">93,72</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor.hollowed(1)</E>
    </PropertyValue>
    <PropertyValue name="text0">MORE</PropertyValue>
    <PropertyValue name="text0ImageData">40,40,collection://vectors/solotextfield-tabwithiconandmoreinversed-text0imagedata.svg</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="iconImageData">24,24,collection://vectors/solotextfield-tabwithiconandmoreinversed-iconimagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="tabitem" displayName="Focused tab with icon" icon="icons/focusedtabwithicon.png">
    <PropertyValue name="box">135,72</PropertyValue>
    <PropertyValue name="focused">true</PropertyValue>
  </Shortcut>
  <Shortcut to="icon" displayName="Icon 24 - color" icon="icons/icon24-color.png">
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="icon" displayName="Icon 36 - color" icon="icons/icon36-color.png">
    <PropertyValue name="box">36,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="icon" displayName="Icon 48 - color" icon="icons/icon48-color.png">
    <PropertyValue name="box">48,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="icon" displayName="Icon 36" icon="icons/icon36.png">
    <PropertyValue name="box">36,36</PropertyValue>
  </Shortcut>
  <Shortcut to="icon" displayName="Icon 48" icon="icons/icon48.png">
    <PropertyValue name="box">48,48</PropertyValue>
  </Shortcut>
  <Shortcut to="icon" displayName="Icon 24 - disabled" icon="icons/icon24-disabled.png">
    <PropertyValue name="fillColor">
      <E>$$defaultTextColor.hollowed(0.6588235294117647)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="icon" displayName="Icon 36 - disabled" icon="icons/icon36-disabled.png">
    <PropertyValue name="box">36,36</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$defaultTextColor.hollowed(0.6588235294117647)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="icon" displayName="Icon 48 - disabled" icon="icons/icon48-disabled.png">
    <PropertyValue name="box">48,48</PropertyValue>
    <PropertyValue name="fillColor">
      <E>$$defaultTextColor.hollowed(0.6588235294117647)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="Box - no top" icon="icons/box-notop.png">
    <PropertyValue name="topBorder">false</PropertyValue>
    <PropertyValue name="padding">1,11</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="Box - no bottom" icon="icons/box-nobottom.png">
    <PropertyValue name="bottomBorder">false</PropertyValue>
    <PropertyValue name="padding">1,11</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="Box - no right" icon="icons/box-noright.png">
    <PropertyValue name="rightBorder">false</PropertyValue>
    <PropertyValue name="padding">1,11</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="Box - no left" icon="icons/box-noleft.png">
    <PropertyValue name="leftBorder">false</PropertyValue>
    <PropertyValue name="padding">1,11</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="Box - color" icon="icons/box-color.png">
    <PropertyValue name="fillColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(-1)</E>
    </PropertyValue>
    <PropertyValue name="strokeColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="padding">1,11</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$invertedContentColor.hollowed(0.12941176470588234)</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="Box - rounded" icon="icons/box-rounded.png">
    <PropertyValue name="radius">6,0</PropertyValue>
    <PropertyValue name="padding">1,11</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="Box - shadow" icon="icons/box-shadow.png">
    <PropertyValue name="shadowStyle">0|0|3|0.5</PropertyValue>
    <PropertyValue name="padding">1,11</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Subsection" icon="icons/subsection.png">
    <PropertyValue name="box">164,24</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.bolder(100)</E>
    </PropertyValue>
    <PropertyValue name="text0">Sub-section heading</PropertyValue>
  </Shortcut>
  <Shortcut to="textview" displayName="Hyperlink" icon="icons/hyperlink.png">
    <PropertyValue name="box">185,24</PropertyValue>
    <PropertyValue name="textColor">
      <E>$$primaryContentColor</E>
    </PropertyValue>
    <PropertyValue name="textFont">
      <E>$$defaultFont.resized(0.1428571428571428)</E>
    </PropertyValue>
    <PropertyValue name="text0">&lt;span xmlns="http://www.w3.org/1999/xhtml" style="text-decoration: underline;"&gt;http://www.example.com&lt;/span&gt;</PropertyValue>
  </Shortcut>
  <Shortcut to="rectangle" displayName="Blank Phone Frame - portrait" icon="icons/blankphoneframe-portrait.png">
    <PropertyValue name="box">410,730</PropertyValue>
    <PropertyValue name="strokeStyle">
      <E>$$defaultStrokeStyle.condensed(-1)</E>
    </PropertyValue>
    <PropertyValue name="shadowStyle">0|0|2|0.2</PropertyValue>
    <PropertyValue name="padding">1,11</PropertyValue>
  </Shortcut>
  <Shortcut to="mobilemenuitem" displayName="Menu Item With Icon" icon="icons/menuitemwithicon.png">
    <PropertyValue name="text0">Item With Icon</PropertyValue>
    <PropertyValue name="text0ImageData">24,24,collection://vectors/solotextfield-menuitemwithicon-text0imagedata.svg</PropertyValue>
  </Shortcut>
  <Shortcut to="mobilemenuitem" displayName="First Menu Item" icon="icons/firstmenuitem.png">
    <PropertyValue name="box">168,56</PropertyValue>
    <PropertyValue name="text0">First Menu Item</PropertyValue>
    <PropertyValue name="first">true</PropertyValue>
  </Shortcut>
  <Shortcut to="mobilemenuitem" displayName="Selected Menu Item" icon="icons/selectedmenuitem.png">
    <PropertyValue name="text0">Selected Item</PropertyValue>
    <PropertyValue name="selected">true</PropertyValue>
  </Shortcut>
  <Shortcut to="mobilemenuitem" displayName="Last Menu Item" icon="icons/lastmenuitem.png">
    <PropertyValue name="box">168,56</PropertyValue>
    <PropertyValue name="text0">Last Menu Item</PropertyValue>
    <PropertyValue name="last">true</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="Gmail" icon="icons/gmail.png">
    <PropertyValue name="text0">Gmail</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-gmail-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="Chrome" icon="icons/chrome.png">
    <PropertyValue name="text0">Chome</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-chrome-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="Drive" icon="icons/drive.png">
    <PropertyValue name="text0">Drive</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-drive-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="Photos" icon="icons/photos.png">
    <PropertyValue name="text0">Photos</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-photos-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="Youtube" icon="icons/youtube.png">
    <PropertyValue name="text0">Youtube</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-youtube-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="GooglePlus" icon="icons/googleplus.png">
    <PropertyValue name="text0">Google+</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-googleplus-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="Doc" icon="icons/doc.png">
    <PropertyValue name="text0">Doc</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-doc-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="Skype" icon="icons/skype.png">
    <PropertyValue name="text0">Skype</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-skype-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="Facebook" icon="icons/facebook.png">
    <PropertyValue name="text0">Facebook</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-facebook-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="Twitter" icon="icons/twitter.png">
    <PropertyValue name="text0">Twitter</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-twitter-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="appicon" displayName="Keep" icon="icons/keep.png">
    <PropertyValue name="text0">Google Keep</PropertyValue>
    <PropertyValue name="bitmap0ImageData">300,300,collection://bitmaps/solotextfield-keep-bitmap0imagedata.png</PropertyValue>
  </Shortcut>
  <Shortcut to="conversationmessage" displayName="Conversation Message - White" icon="icons/conversationmessage-white.png">
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
  </Shortcut>
  <Shortcut to="conversationmessagereversed" displayName="Conversation Message - White - Reversed" icon="icons/conversationmessage-white-reversed.png">
    <PropertyValue name="fillColor">
      <E>$$invertedContentColor</E>
    </PropertyValue>
    <PropertyValue name="textColor">
      <E>$$defaultTextColor</E>
    </PropertyValue>
  </Shortcut>
  <Script comments="Resource script"><![CDATA[
collection.RESOURCE_LIST = [{"name":"Built-in vectors","type":"svg","prefix":"vectors"},{"name":"Built-in bitmaps","type":"bitmap","prefix":"bitmaps"}];

collection.browseResource = function (setNames, type, returnType, callback) {
    var options = {
        prefixes: [],
        type: type || CollectionResourceBrowserDialog.TYPE_BITMAP,
        returnType: returnType || CollectionResourceBrowserDialog.RETURN_IMAGEDATA
    };

    setNames = (setNames || "").trim();

    for (var resource of collection.RESOURCE_LIST) {
        if ((!resource.type || resource.type == options.type) && (!setNames || setNames.indexOf(resource.name) >= 0)) {
            options.prefixes.push(resource);
        }
    }

    CollectionResourceBrowserDialog.open(collection, options, callback);
};

]]></Script>
  <Fonts>
    <Font name="Android Roboto" thin="fonts/Android-Roboto/Android-Roboto-100-normal.ttf" thinItalic="fonts/Android-Roboto/Android-Roboto-100-italic.ttf" light="fonts/Android-Roboto/Android-Roboto-300-normal.ttf" lightItalic="fonts/Android-Roboto/Android-Roboto-300-italic.ttf" regular="fonts/Android-Roboto/Android-Roboto-normal-normal.ttf" regularItalic="fonts/Android-Roboto/Android-Roboto-normal-italic.ttf" medium="fonts/Android-Roboto/Android-Roboto-500-normal.ttf" mediumItalic="fonts/Android-Roboto/Android-Roboto-500-italic.ttf" bold="fonts/Android-Roboto/Android-Roboto-bold-normal.ttf" boldItalic="fonts/Android-Roboto/Android-Roboto-bold-italic.ttf" black="fonts/Android-Roboto/Android-Roboto-900-normal.ttf" blackItalic="fonts/Android-Roboto/Android-Roboto-900-italic.ttf"/>
  </Fonts>
</Shapes>